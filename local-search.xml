<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【html+css】margin问题</title>
    <link href="/2021/05/24/%E3%80%90html-css%E3%80%91margin%E9%97%AE%E9%A2%98/"/>
    <url>/2021/05/24/%E3%80%90html-css%E3%80%91margin%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="【html-css】maring问题"><a href="#【html-css】maring问题" class="headerlink" title="【html+css】maring问题"></a>【html+css】maring问题</h1><h2 id="一、margin值穿透"><a href="#一、margin值穿透" class="headerlink" title="一、margin值穿透"></a>一、margin值穿透</h2><h3 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h3><p>一个父盒子嵌套一个子盒子。</p><p>当父盒子无：文字，border，padding-top时，我们给子盒子加上一个margin-top,会发现父盒子跟着子盒子一起掉</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--html--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dad&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">//css-<br><span class="hljs-selector-class">.dad</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br><span class="hljs-attribute">background-color</span>: green;<br>&#125;<br><span class="hljs-selector-class">.son</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20201026221105498.png"></p><p><img src="/images/image-20201026221128166.png"></p><h3 id="2、原理"><a href="#2、原理" class="headerlink" title="2、原理"></a>2、原理</h3><p>父盒子在垂直方向的margin是合并在一起的，通常取两者最大值</p><p>正常情况下,父级元素应该相对浏览器进行定位,子级相对父级定位.但由于margin的塌陷,父级相对浏览器定位.而子级没有相对父级定位,子级相对父级,就像坍塌了一样.</p><h3 id="3、解决方法"><a href="#3、解决方法" class="headerlink" title="3、解决方法"></a>3、解决方法</h3><p>方法一：父级设置边框或者padding</p><p>方法二：触发bfc(block format context),改变父级的渲染规则</p><p>触发一个盒子的bfc方法：</p><ol><li><p>position：absolute/fixed；</p></li><li><p>display：inline-block；</p></li><li><p>float：left/right；</p></li><li><p>overflow：hidden；（溢出部分隐藏）</p></li></ol><h2 id="二、margin合并"><a href="#二、margin合并" class="headerlink" title="二、margin合并"></a>二、margin合并</h2><h3 id="1、问题描述-1"><a href="#1、问题描述-1" class="headerlink" title="1、问题描述"></a>1、问题描述</h3><blockquote><p>两个上下关系的盒子，都设置了margin值，他们之间的距离不会取距离之和，而是会取二者之间最大的。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;do1&quot;</span>&gt;</span>第一个盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;do2&quot;</span>&gt;</span>第二个盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">//css<br><span class="hljs-selector-class">.do1</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: pink;<br><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><span class="hljs-selector-class">.do2</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br><span class="hljs-attribute">margin-top</span>:<span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20201026222659948.png"></p><h3 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h3><p>方法一：给do2加上一层父级元素并加上overflow:hidden;</p><p>方法二：给两个都加一层父级再加bfc</p><p>方法三：只设置上一个盒子的margin-bottom</p>]]></content>
    
    
    <categories>
      
      <category>html+css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【html+css】css入门基础</title>
    <link href="/2021/05/24/%E3%80%90html-css%E3%80%91css%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/05/24/%E3%80%90html-css%E3%80%91css%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="【html-css】css入门基础"><a href="#【html-css】css入门基础" class="headerlink" title="【html+css】css入门基础"></a>【html+css】css入门基础</h1><blockquote><p>css：cascading style sheet层叠样式表</p></blockquote><h2 id="一-引入css"><a href="#一-引入css" class="headerlink" title="一.引入css"></a>一.引入css</h2><h3 id="行间样式"><a href="#行间样式" class="headerlink" title="行间样式"></a>行间样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="页面级css"><a href="#页面级css" class="headerlink" title="页面级css"></a>页面级css</h3><blockquote><p>在head标签写</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="外部css文件"><a href="#外部css文件" class="headerlink" title="外部css文件"></a>外部css文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二-选择器"><a href="#二-选择器" class="headerlink" title="二.选择器"></a>二.选择器</h2><blockquote><p>！important &gt; 行间样式 &gt; id &gt; class = 属性选择器 &gt; 标签选择器 &gt; 通配符选择器</p></blockquote><p><img src="/images/image-20200709220058264.png"></p><p>权重的进制：256进制</p><h3 id="1-id选择器"><a href="#1-id选择器" class="headerlink" title="1.id选择器"></a>1.id选择器</h3><blockquote><p>一对一</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>#only&#123;<br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-class选择器"><a href="#2-class选择器" class="headerlink" title="2.class选择器"></a>2.class选择器</h3><blockquote><p>多对多，1个可多用多个class</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>.demo&#123;<br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br>&#125;<br>.demo2&#123;<br><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;dome dome1&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-标签选择器"><a href="#3-标签选择器" class="headerlink" title="3.标签选择器"></a>3.标签选择器</h3><blockquote><p>常用于初始化标签</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">span</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.通配符选择器</h3><blockquote><p>所有标签适用，全局</p><p>可以初始化所有标签</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>*&#123;<br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-属性选择器"><a href="#5-属性选择器" class="headerlink" title="5.属性选择器"></a>5.属性选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-attr">[id=(<span class="hljs-string">&quot;only&quot;</span>)]</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="6-！important"><a href="#6-！important" class="headerlink" title="6.！important"></a>6.！important</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:green<span class="hljs-meta">!important</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-父子选择权-派生选择器"><a href="#7-父子选择权-派生选择器" class="headerlink" title="7.父子选择权/派生选择器"></a>7.父子选择权/派生选择器</h3><blockquote><p>浏览器自右向左寻找</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-comment">/*div下的所有strong*/</span></span><br><span class="css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">strong</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:green;</span><br>&#125;<br><span class="css">&lt;/<span class="hljs-selector-tag">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-直接子元素选择器"><a href="#8-直接子元素选择器" class="headerlink" title="8.直接子元素选择器"></a>8.直接子元素选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">strong</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:green;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-并列选择器"><a href="#9-并列选择器" class="headerlink" title="9.并列选择器"></a>9.并列选择器</h3><blockquote><p>用多个限制条件选中一个条件，并且不加空格</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.demo</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:green;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-分组选择器"><a href="#10-分组选择器" class="headerlink" title="10.分组选择器"></a>10.分组选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">em</span>,</span><br><span class="css"><span class="hljs-selector-tag">strong</span>,</span><br><span class="css"><span class="hljs-selector-tag">span</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="11-伪类选择器"><a href="#11-伪类选择器" class="headerlink" title="11.伪类选择器"></a>11.伪类选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:orange;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、css部分属性："><a href="#三、css部分属性：" class="headerlink" title="三、css部分属性："></a>三、css部分属性：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-comment">/*默认16px*/</span><br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;<br>    <span class="hljs-comment">/*lighter,normal=400,bold=700,bolder,100,200,.....,900*/</span><br>    <span class="hljs-attribute">font-weight</span>:bold;<br>    <span class="hljs-comment">/*斜体*/</span><br>    <span class="hljs-attribute">font-style</span>:italic;<br>    <span class="hljs-comment">/*字体*/</span><br>    <span class="hljs-attribute">font-family</span>:arial;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-comment">/*1.纯英文单词(开发别用)</span><br><span class="hljs-comment">  2.颜色代码：RGB</span><br><span class="hljs-comment">  00-ff    00-ff  00-ff</span><br><span class="hljs-comment">      3.颜色函数：rgb(0-255,0-255,0-255)</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#ff4400</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-comment">/*虚心、展示形式、颜色（合属性，也可以拆开写）*/</span><br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-comment">/*dashed(条状虚线)，dotted(点状虚线)，solid(实线)*/</span><br><span class="hljs-attribute">border-style</span>:solid;<br><span class="hljs-attribute">border-color</span>:black;<br>    <span class="hljs-comment">/*可以四个边单独设置*/</span><br>    <span class="hljs-attribute">border-left-color</span>:transparent;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-comment">/*对齐方式：left,center,right*/</span><br>    <span class="hljs-attribute">text-align</span>:center;<br><span class="hljs-comment">/*文本行高*/</span><br>    <span class="hljs-comment">/*水平垂直居中:行高=盒子高度*/</span><br>    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">100px</span>;<br><span class="hljs-comment">/*首行缩进*/</span><br>    <span class="hljs-comment">/*em是一个相对单位：1 em = 1 font-size = 16px*/</span><br>    <span class="hljs-attribute">text-indent</span>:<span class="hljs-number">2em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-comment">/*尽量别再html中使用过多css类型的，比如&lt;del&gt;&lt;/del&gt;标签*/</span><br>    <span class="hljs-comment">/*none:没有线，underline:下划线，overline：上划线，line-through：删除线*/</span><br>    <span class="hljs-attribute">text-decoration</span>:line-through;<br>    <span class="hljs-comment">/*光标pointer:小手，help:小问号，e-resize，w-resize....*/</span><br>    <span class="hljs-attribute">cursor</span>:pointer;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、css代码块"><a href="#四、css代码块" class="headerlink" title="四、css代码块"></a>四、css代码块</h2><h3 id="1-行级元素-内联元素inline"><a href="#1-行级元素-内联元素inline" class="headerlink" title="1.行级元素(内联元素inline)"></a>1.行级元素(内联元素inline)</h3><blockquote><p>内容决定元素所占位置，不可以通过css改变宽高</p></blockquote><ul><li>span</li><li>strong</li><li>em</li><li>a</li><li>del</li></ul><h3 id="2-块级元素-block"><a href="#2-块级元素-block" class="headerlink" title="2.块级元素(block)"></a>2.块级元素(block)</h3><blockquote><p>独占一行，可以通过css改变宽高</p></blockquote><ul><li>div</li><li>p</li><li>ul</li><li>li</li><li>ol</li><li>form</li><li>address</li></ul><h3 id="3-行级块元素-inline-block"><a href="#3-行级块元素-inline-block" class="headerlink" title="3.行级块元素(inline-block)"></a>3.行级块元素(inline-block)</h3><blockquote><p>内容决定大小，可以改宽高</p></blockquote><ul><li>img</li></ul><h3 id="4、嵌套问题"><a href="#4、嵌套问题" class="headerlink" title="4、嵌套问题"></a>4、嵌套问题</h3><blockquote><p>行级元素只能套行级元素</p><p>块级元素可以套任何元素</p></blockquote><blockquote><p>特殊的：p标签不能套块级元素</p><p>​                a标签不能套a标签</p></blockquote><blockquote><p>在span，div里面有一个默认的display:inline/block;</p></blockquote><blockquote><p>凡是带有inline的元素，都有文字特性，比如四张图片并列中间有分隔符。</p></blockquote><h2 id="四、盒子模型（传统）"><a href="#四、盒子模型（传统）" class="headerlink" title="四、盒子模型（传统）"></a>四、盒子模型（传统）</h2><blockquote><p>盒子模型：border+padding+(width+height)+margin</p></blockquote><p>盒子三大部分：</p><ol><li><p>盒子壁    border</p></li><li><p>内边距    padding：上右下左/padding-top:100px;</p></li><li><p>盒子内容    width+height</p></li></ol><p><img src="/images/image-20200719142444081.png"></p><p>注意：body有一个默认的margin:8px;</p><h2 id="五、层模型"><a href="#五、层模型" class="headerlink" title="五、层模型"></a>五、层模型</h2><h3 id="1、-absolute定位："><a href="#1、-absolute定位：" class="headerlink" title="1、 absolute定位："></a>1、 absolute定位：</h3><blockquote><p>绝对定位</p></blockquote><p>absolute：脱离原来位置进行定位,相对于最近的有定位的父级进行定位，如果没有，则相对于文档进行定位。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">bottom</span>:<span class="hljs-number">10px</span>;<br>    <span class="hljs-comment">/*透明度*/</span><br>    <span class="hljs-attribute">opacity</span>:<span class="hljs-number">0.5</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-relative定位"><a href="#2-relative定位" class="headerlink" title="2.relative定位"></a>2.relative定位</h3><blockquote><p>相对定位</p></blockquote><p>relative:保留原来位置进行定位，相对于原来的位置进行定位。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>:relative;<br>&#125;<br></code></pre></td></tr></table></figure><p>子绝父相：用relative作为参照物，用absolute进行定位。</p><h3 id="3、fixed定位"><a href="#3、fixed定位" class="headerlink" title="3、fixed定位"></a>3、fixed定位</h3><p>常用于：固定（广告）定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*居中固定*/</span><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>:fixed;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>:red;<br>    <span class="hljs-attribute">margin-left</span>:-<span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin-top</span>:-<span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、position层数："><a href="#4、position层数：" class="headerlink" title="4、position层数："></a>4、position层数：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">z-index</span>：<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、margin塌陷"><a href="#5、margin塌陷" class="headerlink" title="5、margin塌陷"></a>5、margin塌陷</h3><p>现象：垂直方向的margin父子元素结合到一起了</p><p>解决：触发bfc(block format context)，改变渲染规则</p><p>四种方法：</p><ol><li><p>position：absolute；</p></li><li><p>display：inline-block；</p></li><li><p>float：left/right；</p></li><li><p>overflow：hidden；（溢出部分隐藏）</p></li></ol><h2 id="六、浮动模型"><a href="#六、浮动模型" class="headerlink" title="六、浮动模型"></a>六、浮动模型</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-comment">/*left,right*/</span><br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200721160052023.png"></p><h3 id="清除浮动流"><a href="#清除浮动流" class="headerlink" title="清除浮动流"></a>清除浮动流</h3><p>方法一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="css"><span class="hljs-attribute">clear</span>:both;</span><br>&#125;<br><span class="css"><span class="hljs-comment">/*但这个方法不好，可以利用伪元素清除浮动*/</span></span><br><span class="css"><span class="hljs-comment">/*要是用clear清除浮动的话，必须加在块级元素里面*/</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-class">.wrapper</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>:inline-block;</span><br><span class="css">    <span class="hljs-attribute">clear</span>:both;</span><br><span class="css">    <span class="hljs-attribute">content</span>:=<span class="hljs-string">&quot;&quot;</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以参考另一篇文章：清除浮动</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><blockquote><p>天生存在，在HTML中不显示，但是可以在css中进行操作</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;haha&quot;</span>;<br>&#125;<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;heihei&quot;</span>;<br>&#125;<br><span class="hljs-comment">/*必须写上content属性*/</span><br><span class="hljs-comment">/*伪元素天生是行级元素，要进行宽高等设置，要先变成块级元素</span><br><span class="hljs-comment">display:inline-block;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="七、文字溢出处理"><a href="#七、文字溢出处理" class="headerlink" title="七、文字溢出处理"></a>七、文字溢出处理</h2><p>处理效果：溢出容器要打点展示</p><h3 id="1、单行文本"><a href="#1、单行文本" class="headerlink" title="1、单行文本"></a>1、单行文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">white-space</span>:nowrap;<br>    <span class="hljs-attribute">overflow</span>:hidden;<br>    <span class="hljs-attribute">text-overflow</span>:ellipsis;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、多行文本"><a href="#2、多行文本" class="headerlink" title="2、多行文本"></a>2、多行文本</h3><p>估算打点或者只做截断</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">overflow</span>:hidden;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、背景图片处理"><a href="#八、背景图片处理" class="headerlink" title="八、背景图片处理"></a>八、背景图片处理</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">../../xxx.png</span>);<br>    <span class="hljs-attribute">background-size</span>:<span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-repeat</span>:no-repeat;<br>    <span class="hljs-attribute">background-position</span>:center center;(x,y)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="企业开发技巧：css与js屏蔽后的处理方法"><a href="#企业开发技巧：css与js屏蔽后的处理方法" class="headerlink" title="企业开发技巧：css与js屏蔽后的处理方法"></a>企业开发技巧：css与js屏蔽后的处理方法</h3><p>1、原理：让文字溢出容器，然后隐藏溢出内容</p><p>2、原理：padding不能加文字，把盒子高度设为0，加上padding，再隐藏溢出内容</p><h2 id="九、小的知识点"><a href="#九、小的知识点" class="headerlink" title="九、小的知识点"></a>九、小的知识点</h2><p>1、</p><p><img src="/images/image-20200724151429047.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span>&#123;<br>   <span class="hljs-attribute">height</span>:<span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">120px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、加了position或float会在内部转换成inline-block</p><p>3、一个行级块元素（文本类元素）一旦在里面有了文字，外面的文字会和里面的文字底对齐</p><p>可以调对齐线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">vertical-align</span>:center;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>html+css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】React组件三大属性</title>
    <link href="/2021/05/24/%E3%80%90React%E3%80%91React%E7%BB%84%E4%BB%B6%E4%B8%89%E5%A4%A7%E5%B1%9E%E6%80%A7/"/>
    <url>/2021/05/24/%E3%80%90React%E3%80%91React%E7%BB%84%E4%BB%B6%E4%B8%89%E5%A4%A7%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】React组件三大属性"><a href="#【React】React组件三大属性" class="headerlink" title="【React】React组件三大属性"></a>【React】React组件三大属性</h1><h2 id="一、state"><a href="#一、state" class="headerlink" title="一、state"></a>一、state</h2><h3 id="1、理解"><a href="#1、理解" class="headerlink" title="1、理解"></a>1、理解</h3><blockquote><p>state的值为对象</p><p>通过更新组件state的值来重新渲染组件</p></blockquote><h3 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mycomponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        构造器拓展：</span><br><span class="hljs-comment">        一、两种用途：1.通过给 this.state 赋值对象来初始化内部 state。</span><br><span class="hljs-comment">        2.为事件处理函数绑定实例</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        二、构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span><br><span class="hljs-comment">        */</span><br>        <br>        <span class="hljs-comment">//构造器</span><br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>          <span class="hljs-built_in">super</span>(props);<br>          <span class="hljs-comment">//用途1：初始化state</span><br>          <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">weather</span>: <span class="hljs-literal">true</span> &#125;;<br>          <span class="hljs-comment">//用途2：初始化函数</span><br>          <span class="hljs-built_in">this</span>.demo = <span class="hljs-built_in">this</span>.demo.bind(<span class="hljs-built_in">this</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>          <span class="hljs-keyword">return</span> (<br>            &lt;h2 onClick=&#123;<span class="hljs-built_in">this</span>.demo&#125;&gt;<br>              天气&#123;<span class="hljs-built_in">this</span>.state.weather ? <span class="hljs-string">&quot;炎热&quot;</span> : <span class="hljs-string">&quot;凉爽&quot;</span>&#125;<br>            &lt;/h2&gt;<br>          );<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span> &#123;<br>          <span class="hljs-keyword">let</span> weather = <span class="hljs-built_in">this</span>.state.weather;<br>            <span class="hljs-comment">//不能直接改变state的值</span><br>            <span class="hljs-comment">//在 constructor() 函数中不要调用 setState() 方法。</span><br>          <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">weather</span>: !weather &#125;);<br>        &#125;<br>      &#125;<br>      ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Mycomponent</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>));<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3、简写方法"><a href="#3、简写方法" class="headerlink" title="3、简写方法"></a>3、简写方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//简写方法不用构造器</span><br>&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>        <span class="hljs-comment">//采用追加方式而不是构造器</span><br>state = &#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">false</span>&#125;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">const</span> &#123;isHot,wind&#125; = <span class="hljs-built_in">this</span>.state<br>            <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeWeather&#125;</span>&gt;</span>今天&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>        &#125;<br><br><span class="hljs-comment">//自定义方法————赋值语句+箭头函数</span><br>        changeWeather = <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-keyword">const</span> isHot = <span class="hljs-built_in">this</span>.state.isHot<br>            <span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">isHot</span>:!isHot&#125;)<br>        &#125;<br>&#125;<br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Weather</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="二、props"><a href="#二、props" class="headerlink" title="二、props"></a>二、props</h2><h3 id="1、理解-1"><a href="#1、理解-1" class="headerlink" title="1、理解"></a>1、理解</h3><blockquote><p>组件标签中所有属性都保存在props中</p><p>只读属性</p><p>通过props向组件内部传值（类似于vue中父组件向子组件传值）</p></blockquote><h3 id="2、基本使用-1"><a href="#2、基本使用-1" class="headerlink" title="2、基本使用"></a>2、基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br><span class="hljs-comment">//1.创建组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">// console.log(this);</span><br>            <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-built_in">this</span>.props<br>            <span class="hljs-keyword">return</span> (<br>                &lt;ul&gt;<br>                    &lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;<br>                    &lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;<br>                    &lt;li&gt;年龄：&#123;age+<span class="hljs-number">1</span>&#125;&lt;/li&gt;<br>                &lt;/ul&gt;<br>                )<br>&#125;<br>&#125;<br><span class="hljs-comment">//2.渲染组件到页面</span><br><span class="hljs-comment">//组件1：每个单独写在标签中</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;19&#125;</span>  <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test1&#x27;</span>))<br><br><span class="hljs-comment">//组件2：定义数据对象</span><br><span class="hljs-keyword">const</span> p = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;老刘&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;<br><span class="hljs-comment">//注意这里的&#123;...p&#125;中&#123;&#125;的意思是开始写js的代码，里面的...p是es6扩展运算符，react这里，bable允许在标签中通过此运算符展开对象（其他地方不允许）</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...p</span>&#125;/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test2&#x27;</span>))<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-对props进行限制"><a href="#3-对props进行限制" class="headerlink" title="3.对props进行限制"></a>3.对props进行限制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方式1：（已弃用）</span><br>Person.propTypes = &#123;<br> name: React.PropTypes.string.isRequired,<br> age: React.PropTypes.number<br>&#125;<br><span class="hljs-comment">//方式2：使用prop-types库进限制（需要引入prop-types库）</span><br><br>&lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../js/prop-types.js&quot;</span>&gt;&lt;/script&gt;<br><br>Person.propTypes = &#123;<br>    name:PropTypes.string.isRequired, <span class="hljs-comment">//限制name必传，且为字符串</span><br>    sex:PropTypes.string,<span class="hljs-comment">//限制sex为字符串</span><br>    age:PropTypes.number,<span class="hljs-comment">//限制age为数值</span><br>    speak:PropTypes.func,<span class="hljs-comment">//限制speak为函数</span><br>&#125;<br><span class="hljs-comment">//指定默认标签属性值</span><br>Person.defaultProps = &#123;<br>    sex:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-comment">//sex默认值为男</span><br>    age:<span class="hljs-number">18</span> <span class="hljs-comment">//age默认值为18</span><br>&#125;<br><br><span class="hljs-comment">//方式3（2的简写方式）：在类内部添加，详见下方4中的简写方法</span><br></code></pre></td></tr></table></figure><h3 id="4、简写方法"><a href="#4、简写方法" class="headerlink" title="4、简写方法"></a>4、简写方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>        <span class="hljs-comment">//添加限制，注意static</span><br>        <span class="hljs-keyword">static</span> propTypes = &#123;<br>            name:PropTypes.string.isRequired, <span class="hljs-comment">//限制name必传，且为字符串</span><br>            sex:PropTypes.string,<span class="hljs-comment">//限制sex为字符串</span><br>            age:PropTypes.number,<span class="hljs-comment">//限制age为数值</span><br>        &#125;<br><br>        <span class="hljs-comment">//指定默认值</span><br>        <span class="hljs-keyword">static</span> defaultProps = &#123;<br>            sex:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-comment">//sex默认值为男</span><br>            age:<span class="hljs-number">18</span> <span class="hljs-comment">//age默认值为18</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-built_in">this</span>.props<br>            <span class="hljs-comment">//props是只读的</span><br>            <span class="hljs-comment">//this.props.name = &#x27;jack&#x27; //此行代码会报错，因为props是只读的</span><br>            <span class="hljs-keyword">return</span> (<br>                &lt;ul&gt;<br>                    &lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;<br>                    &lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;<br>                    &lt;li&gt;年龄：&#123;age+<span class="hljs-number">1</span>&#125;&lt;/li&gt;<br>                &lt;/ul&gt;<br>                )<br>        &#125;<br>        &#125;<br><br>    <span class="hljs-comment">//渲染组件到页面</span><br>    ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test1&#x27;</span>))<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="4、函数组件使用props"><a href="#4、函数组件使用props" class="headerlink" title="4、函数组件使用props"></a>4、函数组件使用props</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br><span class="hljs-comment">//传参的方式</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = props<br><span class="hljs-keyword">return</span> (<br>&lt;ul&gt;<br>&lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;<br>&lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;<br>&lt;li&gt;年龄：&#123;age&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>)<br>&#125;<br>        <br>        <span class="hljs-comment">//只能在外部进行限制和默认值设置</span><br>Person.propTypes = &#123;<br>name:PropTypes.string.isRequired, <span class="hljs-comment">//限制name必传，且为字符串</span><br>sex:PropTypes.string,<span class="hljs-comment">//限制sex为字符串</span><br>age:PropTypes.number,<span class="hljs-comment">//限制age为数值</span><br>&#125;<br>Person.defaultProps = &#123;<br>sex:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-comment">//sex默认值为男</span><br>age:<span class="hljs-number">18</span> <span class="hljs-comment">//age默认值为18</span><br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test1&#x27;</span>))<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="三、refs与事件处理"><a href="#三、refs与事件处理" class="headerlink" title="三、refs与事件处理"></a>三、refs与事件处理</h2><h3 id="1、理解-2"><a href="#1、理解-2" class="headerlink" title="1、理解"></a>1、理解</h3><blockquote><p>组件内标签通过ref属性来标识自己（类似于vue中，$refs访问子组件）</p></blockquote><h3 id="2、字符串形式的ref（不推荐）"><a href="#2、字符串形式的ref（不推荐）" class="headerlink" title="2、字符串形式的ref（不推荐）"></a>2、字符串形式的ref（不推荐）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>          <span class="hljs-comment">//字符串形式的ref对效率有影响</span><br>        <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>          <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>              &lt;input ref=<span class="hljs-string">&quot;input1&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span> /&gt;<br>              &amp;nbsp;<br>              &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.showDate&#125;&gt;点击提示左侧数据&lt;/button&gt;&amp;nbsp;<br>              &lt;input<br>                onBlur=&#123;<span class="hljs-built_in">this</span>.showDate2&#125;<br>                ref=<span class="hljs-string">&quot;input2&quot;</span><br>                type=<span class="hljs-string">&quot;text&quot;</span><br>                placeholder=<span class="hljs-string">&quot;失去焦点提示数据&quot;</span><br>              /&gt;<br>            &lt;/div&gt;<br>          );<br>        &#125;<br><br>        showDate = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">//从refs接收</span><br>          <span class="hljs-keyword">const</span> &#123; input1 &#125; = <span class="hljs-built_in">this</span>.refs;<br>          alert(input1.value);<br>        &#125;;<br>        showDate2 = <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> &#123; input2 &#125; = <span class="hljs-built_in">this</span>.refs;<br>          alert(input2.value);<br>        &#125;;<br>      &#125;<br>      ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dome</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>));<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3、对调函数新形式的ref"><a href="#3、对调函数新形式的ref" class="headerlink" title="3、对调函数新形式的ref"></a>3、对调函数新形式的ref</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.内联函数</span><br>&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-comment">//将input1挂载到this身上</span><br>          <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>              &lt;input<br>                ref=&#123;<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> (<span class="hljs-built_in">this</span>.input1 = c)&#125;<br>                type=<span class="hljs-string">&quot;text&quot;</span><br>                placeholder=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span><br>              /&gt;<br>              &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.showDate&#125;&gt;点击提示左侧数据&lt;/button&gt;&amp;nbsp;<br>            &lt;/div&gt;<br>          );<br>        &#125;<br>        showDate = <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-comment">//从this接受</span><br>          <span class="hljs-keyword">const</span> &#123; input1 &#125; = <span class="hljs-built_in">this</span>;<br>          alert(input1.value);<br>        &#125;;<br>      &#125;<br>      ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dome</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>));<br>&lt;/script&gt;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">内联函数的方式会在更新时调用两次，可以用类绑定方式的函数解决</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//2.类绑定函数</span><br>&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-comment">//将input1挂载到this身上</span><br>          <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>              &lt;input<br>                ref=&#123;<span class="hljs-built_in">this</span>.saveInput&#125;<br>                type=<span class="hljs-string">&quot;text&quot;</span><br>                placeholder=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span><br>              /&gt;<br>              &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.showDate&#125;&gt;点击提示左侧数据&lt;/button&gt;&amp;nbsp;<br>            &lt;/div&gt;<br>          );<br>        &#125;<br>        showDate = <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-comment">//从this接受</span><br>          <span class="hljs-keyword">const</span> &#123; input1 &#125; = <span class="hljs-built_in">this</span>;<br>          alert(input1.value);<br>        &#125;;<br><br>saveInput = <span class="hljs-function">(<span class="hljs-params">c</span>)=&gt;</span>&#123;<br>            <span class="hljs-built_in">this</span>.input1 = c;<br>        &#125;;<br>      &#125;<br>      ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dome</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>));<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="4、createRef方式"><a href="#4、createRef方式" class="headerlink" title="4、createRef方式"></a>4、createRef方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;    <span class="hljs-comment">/* React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的*/</span>    myRef1 = React.createRef()myRef2 = React.createRef()    <span class="hljs-comment">//展示左侧输入框的数据    showData = ()=&gt;&#123;        alert(this.myRef1.current.value);    &#125;    //展示右侧输入框的数据    showData2 = ()=&gt;&#123;        alert(this.myRef2.current.value);    &#125;    render()&#123;        return(            &lt;div&gt;            &lt;input ref=&#123;this.myRef1&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;&amp;nbsp;    &lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;    &lt;input onBlur=&#123;this.showData2&#125; ref=&#123;this.myRef2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;&amp;nbsp;    &lt;/div&gt;    )    &#125;&#125;//渲染组件到页面ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot;/&gt;,document.getElementById(&#x27;test&#x27;))&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、事件处理"><a href="#5、事件处理" class="headerlink" title="5、事件处理"></a>5、事件处理</h3><blockquote><ol><li><h3 id="通过onXxx属性指定事件处理函数-注意大小写"><a href="#通过onXxx属性指定事件处理函数-注意大小写" class="headerlink" title="通过onXxx属性指定事件处理函数(注意大小写)"></a>通过onXxx属性指定事件处理函数(注意大小写)</h3></li></ol><ol><li><p>  React使用的是自定义(合成)事件, 而不是使用的原生DOM事件—为了兼容</p></li><li><p>  React中的事件是通过事件委托方式处理的(委托给组件最外层的元素)—为了高效（冒泡）</p></li></ol><ol start="2"><li>通过event.target得到发生事件的DOM元素对象—不要过度使用ref</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>React学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【html+css】清除浮动</title>
    <link href="/2021/05/24/%E3%80%90html-css%E3%80%91%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <url>/2021/05/24/%E3%80%90html-css%E3%80%91%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="【html-css】清除浮动"><a href="#【html-css】清除浮动" class="headerlink" title="【html+css】清除浮动"></a>【html+css】清除浮动</h1><h2 id="一、原因"><a href="#一、原因" class="headerlink" title="一、原因"></a>一、原因</h2><p>父盒子没高度时，子盒子浮动了，影响了下面布局。</p><h2 id="二、本质"><a href="#二、本质" class="headerlink" title="二、本质"></a>二、本质</h2><p>关闭浮动</p><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><h3 id="方法1——额外标签法"><a href="#方法1——额外标签法" class="headerlink" title="方法1——额外标签法"></a>方法1——额外标签法</h3><blockquote><p>在最后一个浮动盒子后面加上一个额外块级标签</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clear</span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    hidden、auto、scroll都可</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法2——overflow"><a href="#方法2——overflow" class="headerlink" title="方法2——overflow"></a>方法2——overflow</h3><p>?给父级元素加上overflow属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法3——after伪元素"><a href="#方法3——after伪元素" class="headerlink" title="方法3——after伪元素"></a>方法3——after伪元素</h3><blockquote><p>给父元素添加下列属性</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:after &#123;<br>    content : <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> &#123;<span class="hljs-comment">/*工E6、7专有*/</span>* <br>    zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法4——双伪元素"><a href="#方法4——双伪元素" class="headerlink" title="方法4——双伪元素"></a>方法4——双伪元素</h3><blockquote><p>给父元素添加下列属性</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span> :before, .clearfix: after &#123;<br>    content : <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>:table;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> :after &#123;<br>    clear :both;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> &#123;<br>    *zoom: <span class="hljs-number">1</span>; <br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>html+css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【html+css】三栏布局</title>
    <link href="/2021/05/24/%E3%80%90html-css%E3%80%91%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    <url>/2021/05/24/%E3%80%90html-css%E3%80%91%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="【html-css】三栏布局"><a href="#【html-css】三栏布局" class="headerlink" title="【html+css】三栏布局"></a>【html+css】三栏布局</h1><h2 id="一、圣杯"><a href="#一、圣杯" class="headerlink" title="一、圣杯"></a>一、圣杯</h2><p>1、设置容器，并用padding空出左右两边的位置（中左右）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>letf<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrap</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913195107515.png"></p><p>2、添加浮动，变成一排</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span>,<span class="hljs-selector-class">.left</span>,<span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">float</span>: left;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913195138856.png"></p><p>3、使左与右分别爬到上排</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913195224319.png"></p><p><img src="/images/image-20200913195259721.png"></p><p>4、使左右分别占据左右边的padding位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">left</span>: -<span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913195332192.png"></p><p>5、对左margin的理解</p><p>①上升：left；</p><p>②到左端尽头：center-left；</p><p>③left+（center-left）=center；</p><p>④center/x=100%;</p><p>x为wrap宽；</p><h2 id="二、双飞翼"><a href="#二、双飞翼" class="headerlink" title="二、双飞翼"></a>二、双飞翼</h2><p>1、设置容器，并将center中的inner留出左右位置(中左右)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">body&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>letf<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrap</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.inner</span>&#123;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: red;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913200206833.png"></p><p>2、添加浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span>,<span class="hljs-selector-class">.left</span>,<span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">float</span>: left;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913200136877.png"></p><p>3、将左右移动到左右两边</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913200350839.png"></p><h2 id="三、float布局"><a href="#三、float布局" class="headerlink" title="三、float布局"></a>三、float布局</h2><p>1、设置盒子（左右中）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913201432459.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">float</span>: right;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913201548066.png"></p><p>3、会发现center被排挤</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-comment">/*background-color: blue;*/</span><br><span class="hljs-attribute">float</span>: left;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913201718208.png"></p><p>4、在center前后加margin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">background-color</span>: red;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913201856742.png"></p><h2 id="四、绝对定位"><a href="#四、绝对定位" class="headerlink" title="四、绝对定位"></a>四、绝对定位</h2><p>1、设置盒子与绝对定位</p><p>左中右位置顺序不重要</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>letf<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">background-color</span>: red;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913202546499.png"></p><p>2、将左右浮动改为绝对</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">position</span>: absolute;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">position</span>: absolute;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913202832139.png"></p><p>3、左边放在左边，右边放在右边</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">left</span>&#123;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913203043676.png"></p><h2 id="五、Flex布局"><a href="#五、Flex布局" class="headerlink" title="五、Flex布局"></a>五、Flex布局</h2><p>1、设置盒子，并将wrap设置为弹性</p><p>(左中右)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>letf<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrap</span>&#123;<br><span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、center设置弹性铺满剩余</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">flex</span>:<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若要实现两端固定中间自适应的效果，可以为两端的加上宽度，中间的不设置宽度，只设置flex:1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 视口标签 --&gt;</span><br>    &lt;meta<br>      name=&quot;viewport&quot;<br>      content=&quot;width=device-width, initial-scale=1.0,user-scalable=no,maximum-scale=1.0,minimum-scale=1.0&quot;<br>    /&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>flex布局<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">      <span class="hljs-selector-tag">section</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blueviolet;</span><br>      &#125;<br><span class="css">      <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br>      &#125;<br><span class="css">      <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: aquamarine;</span><br>      &#125;<br><span class="css">      <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br>      &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20210524161313626.png"></p><h2 id="六、Grid"><a href="#六、Grid" class="headerlink" title="六、Grid"></a>六、Grid</h2><p>1、设置盒子，并将wrap设置为网格布局</p><p>(左中右)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>letf<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>盒子可以不用宽度，直接用grid功能设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrap</span>&#123;<br><span class="hljs-attribute">display</span>: grid;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913205222136.png"></p><p>2、设置三列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrap</span>&#123;<br><span class="hljs-attribute">display</span>: grid;<br>grid-template-<span class="hljs-attribute">columns</span>:<span class="hljs-number">100px</span> auto <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200913205625773.png"></p>]]></content>
    
    
    <categories>
      
      <category>html+css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【html+css】移动端开发</title>
    <link href="/2021/05/24/%E3%80%90html+css%E3%80%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <url>/2021/05/24/%E3%80%90html+css%E3%80%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="移动端开发"><a href="#移动端开发" class="headerlink" title="移动端开发"></a>移动端开发</h1><p>移动端基础</p><ul><li>视口</li><li>二倍图</li><li>移动端开发选择</li><li>移动端技术解决方案</li><li>移动端常见布局</li></ul><h2 id="一、开发选择"><a href="#一、开发选择" class="headerlink" title="一、开发选择"></a>一、开发选择</h2><p>常见的有两种开发模式：<strong>单独制作</strong>移动端页面 和 <strong>响应式页面</strong></p><h2 id="二、移动端技术解决方案"><a href="#二、移动端技术解决方案" class="headerlink" title="二、移动端技术解决方案"></a>二、移动端技术解决方案</h2><h3 id="1、移动端浏览器"><a href="#1、移动端浏览器" class="headerlink" title="1、移动端浏览器"></a>1、移动端浏览器</h3><p>webkit为主，主要考虑它的兼容</p><h3 id="2、CSS样式初始化"><a href="#2、CSS样式初始化" class="headerlink" title="2、CSS样式初始化"></a>2、CSS样式初始化</h3><p>移动端css样式初始化：normalize.css</p><p>官网：<a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><h3 id="3、CSS3盒子模型：box-sizing"><a href="#3、CSS3盒子模型：box-sizing" class="headerlink" title="3、CSS3盒子模型：box-sizing"></a>3、CSS3盒子模型：box-sizing</h3><ul><li><p>传统模式宽度计算:盒子的宽度=CSS中设置的width + border + padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">box-sizing</span>:content-box;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>CSS3盒子模型:盒子的宽度= CSS中设置的宽度width里面包含了border和padding也就是说，我们的CSS3中的盒子模型，padding和border不会撑大盒子了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">box-sizing</span>:border-box;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>移动端可以用CSS3我盒子模型，PC端建议使用传统盒子模型</p><h3 id="4、特殊样式"><a href="#4、特殊样式" class="headerlink" title="4、特殊样式"></a>4、特殊样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*CSS3盒子模型*/</span><br><span class="hljs-attribute">box-sizing</span>: border-box;<br>-webkit-<span class="hljs-attribute">box-sizing</span>: border-box;<br><span class="hljs-comment">/*清除点击高亮*/</span><br>-webkit-tap-highlight-<span class="hljs-attribute">color</span>: txansparent;<br><span class="hljs-comment">/*清除移动端浏览器默认的外观（ios上清除按钮和输入框自定义样式）*/</span><br>-webkit-appearance: none;<br><span class="hljs-comment">/*禁用长按页面时的弹出菜单*/</span><br><span class="hljs-selector-tag">img</span>,<span class="hljs-selector-tag">a</span> &#123; -webkit-touch-callout: none; &#125;<br></code></pre></td></tr></table></figure><h2 id="三、移动端常见布局"><a href="#三、移动端常见布局" class="headerlink" title="三、移动端常见布局"></a>三、移动端常见布局</h2><p>单独制作：</p><ul><li>流式布局（百分比布局）</li><li>flex弹性布局</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式页面兼容移动端</p><ul><li>媒体查询</li><li>bootstrap</li></ul><h3 id="3-1-单独制作"><a href="#3-1-单独制作" class="headerlink" title="3.1 单独制作"></a>3.1 单独制作</h3><h4 id="3-1-1流式布局（百分比布局）"><a href="#3-1-1流式布局（百分比布局）" class="headerlink" title="3.1.1流式布局（百分比布局）"></a>3.1.1流式布局（百分比布局）</h4><ul><li>流式布局，就是百分比布局，也称非固定像素布局。</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li><li>流式布局方式是移动web开发使用的比较常见的布局方式。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 视口标签 --&gt;</span><br>    &lt;meta<br>      name=&quot;viewport&quot;<br>      content=&quot;width=device-width, initial-scale=1.0,user-scalable=no,maximum-scale=1.0,minimum-scale=1.0&quot;<br>    /&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">      <span class="hljs-selector-tag">section</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">980px</span>;</span><br><span class="css">        <span class="hljs-attribute">min-width</span>: <span class="hljs-number">320px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br>      &#125;<br>      .box1 &#123;<br><span class="css">        <span class="hljs-attribute">background-color</span>: aqua;</span><br>      &#125;<br>      .box2 &#123;<br><span class="css">        <span class="hljs-attribute">background-color</span>: violet;</span><br>      &#125;<br><span class="css">      <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br>      &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-flex布局"><a href="#3-1-2-flex布局" class="headerlink" title="3.1.2 flex布局"></a>3.1.2 flex布局</h4><p>与传统布局关闭兼容性较差，但操作简单，移动端应用广泛。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><blockquote><p>就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。</p></blockquote><ul><li>flex（flexible Box），意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器（块级元素、行内元素等）都可以指定为flex布局。</li><li>当我们为父盒子设为flex布局以后，子元素的float、clear和vertical-align属性将失效。</li><li>伸缩布局=弹性布局=伸缩盒布局=弹性盒布局=flex布局</li><li>采用Flex布局的元素，称为Flex容器( flex container )，简称“容器”。它的所有子元素自动成为容器成员，称为Flex项目(flex item)，简称“项目”。</li></ul><h5 id="常见父项属性"><a href="#常见父项属性" class="headerlink" title="常见父项属性"></a>常见父项属性</h5><ul><li><p><strong>flex-direction</strong> :设置主轴的方向</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>从左到右（默认）</td></tr><tr><td>rwo-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table></li><li><p><strong>justify-content</strong> :设置主轴上的子元素排列方式</p><blockquote><p>使用前要先确定主轴是谁</p></blockquote><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从头部开始（默认）</td></tr><tr><td>flex-end</td><td>从尾部开始</td></tr><tr><td>center</td><td>在主轴居中对齐</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先贴两边，再平分剩空间（常用）</td></tr></tbody></table></li><li><p><strong>flex-wrap</strong> :设置子元素是否换行</p><blockquote><p>flex布局中，默认子元素不换行，装不开的时候子元素会缩小</p></blockquote><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>no-wrap</td><td>不换行（默认）</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table></li><li><p><strong>align-content</strong> :设置侧轴上的子元素的排列方式(多行)</p><blockquote><p>多行的意思就是子项出现换行的时候</p></blockquote><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从侧轴头部开始排列（默认）</td></tr><tr><td>flex-end</td><td>从侧轴尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>space-around</td><td>在侧轴平分剩余空间</td></tr><tr><td>space-between</td><td>先分布两头，再平分剩余空间</td></tr><tr><td>strench</td><td>子元素高度为父元素高度</td></tr></tbody></table></li><li><p><strong>align-items</strong> : 设置侧轴上的子元素排列方式(单行)</p><blockquote><p>使用strench时，子盒子不要给高度。</p></blockquote><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中（垂直居中）</td></tr><tr><td>stench</td><td>拉伸（默认）</td></tr></tbody></table></li><li><p><strong>flex-flow</strong> :复合属性，相当于同时设置了flex-direction和flex-wrap</p></li></ul><h5 id="常见子项属性"><a href="#常见子项属性" class="headerlink" title="常见子项属性"></a>常见子项属性</h5><ul><li><p>flex：子项目占的份数</p></li><li><p>align-self：控制子项自己在侧轴的排列方式（单独一个盒子）</p></li><li><p>order：属性定义子项的排列顺序(前后顺序）</p><blockquote><p>数值越小越靠前，注意与z-index区分</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>html+css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JS红宝书】学习六：集合引用类型</title>
    <link href="/2021/05/10/%E3%80%90JS%E7%BA%A2%E5%AE%9D%E4%B9%A6%E3%80%91%E5%AD%A6%E4%B9%A0%E5%85%AD%EF%BC%9A%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/05/10/%E3%80%90JS%E7%BA%A2%E5%AE%9D%E4%B9%A6%E3%80%91%E5%AD%A6%E4%B9%A0%E5%85%AD%EF%BC%9A%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="【JS红宝书】学习六：集合引用类型"><a href="#【JS红宝书】学习六：集合引用类型" class="headerlink" title="【JS红宝书】学习六：集合引用类型"></a>【JS红宝书】学习六：集合引用类型</h1><ul><li>对象</li><li>数组</li><li>定型数组</li><li>Map</li><li>WeakMap</li><li>Set</li><li>WeakSet</li></ul><h2 id="一、对象"><a href="#一、对象" class="headerlink" title="一、对象"></a>一、对象</h2><h3 id="1、显示创建"><a href="#1、显示创建" class="headerlink" title="1、显示创建"></a>1、显示创建</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用new操作符和Object构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.age = <span class="hljs-number">19</span>;<br>obj.name = <span class="hljs-string">&quot;xiaowang&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>使用对象字面量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    age: <span class="hljs-number">19</span>,<br>    naem: <span class="hljs-string">&quot;xiaowang&quot;</span><br>&#125;<br><span class="hljs-comment">//使用对象字面量创建对象不会调用Object构造函数。</span><br></code></pre></td></tr></table></figure><blockquote><p>在这里，左边大括号出现在<strong>表达式上下文</strong>中。</p><p><strong>表达式上下文：</strong>期待返回值的上下文。</p><p><strong>语句上下文：</strong>如if语句的条件后面，表示语句块的开始。</p></blockquote><p>对象字面量的一个使用场景：<strong>给函数传递大量可选参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">args</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> args.name == <span class="hljs-string">&quot;string&quot;</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(args.name);<br>    &#125;<br>    <span class="hljs-keyword">if</span>()....<br>&#125;<br>    foo(&#123;<br>        name:<span class="hljs-string">&quot;xiaowang&quot;</span>,<br>        age:<span class="hljs-number">19</span><br>    &#125;);<br><span class="hljs-comment">//可以对必选参数使用命名参数，对可选参数使用对象字面来封装</span><br></code></pre></td></tr></table></figure><h3 id="2、属性存取"><a href="#2、属性存取" class="headerlink" title="2、属性存取"></a>2、属性存取</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><p>点语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    age: <span class="hljs-number">19</span>,<br>    name: <span class="hljs-string">&quot;xiaowang&quot;</span><br>&#125;;<br><span class="hljs-comment">//访问</span><br><span class="hljs-built_in">console</span>.log(obj.age);<br></code></pre></td></tr></table></figure><h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><p>中括号</p>]]></content>
    
    
    <categories>
      
      <category>JS红宝书学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【报错信息】JAVA：无效的源发行版：14</title>
    <link href="/2021/05/09/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91JAVA%EF%BC%9A%E6%97%A0%E6%95%88%E7%9A%84%E6%BA%90%E5%8F%91%E8%A1%8C%E7%89%88%EF%BC%9A14/"/>
    <url>/2021/05/09/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91JAVA%EF%BC%9A%E6%97%A0%E6%95%88%E7%9A%84%E6%BA%90%E5%8F%91%E8%A1%8C%E7%89%88%EF%BC%9A14/</url>
    
    <content type="html"><![CDATA[<h1 id="【报错信息】JAVA：无效的源发行版：14"><a href="#【报错信息】JAVA：无效的源发行版：14" class="headerlink" title="【报错信息】JAVA：无效的源发行版：14"></a>【报错信息】JAVA：无效的源发行版：14</h1><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>进行单元测试时发现此错误：</p><p>Java：无效的源发行版：14</p><p><img src="/images/image-20210509085340445.png"></p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>1、查看本机的jdk版本：输入java -version</p><p><img src="/images/image-20210509085520831.png"></p><p>2、修改项目的设置</p><p>File-&gt;Project Structure</p><p><img src="/images/image-20210509085751944.png"></p><p>Project Structure中：</p><p><img src="/images/image-20210509095306288.png"></p><p><img src="/images/image-20210509095400655.png"></p><p><img src="/images/image-20210509095414746.png"></p><p><img src="/images/image-20210509095430908.png"></p><p>File-&gt;Setting</p><p><img src="/images/image-20210509095745803.png"></p><p><img src="/images/image-20210509095759676.png"></p><p><img src="/images/image-20210509095820113.png"></p><p><img src="/images/image-20210509095842450.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>报错信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JAVAEE】学习八：数据库连接池</title>
    <link href="/2021/04/27/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E5%85%AB%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <url>/2021/04/27/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E5%85%AB%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="【JAVAEE】学习八：数据库连接池"><a href="#【JAVAEE】学习八：数据库连接池" class="headerlink" title="【JAVAEE】学习八：数据库连接池"></a>【JAVAEE】学习八：数据库连接池</h1><h2 id="一、数据库连接池介绍"><a href="#一、数据库连接池介绍" class="headerlink" title="一、数据库连接池介绍"></a>一、数据库连接池介绍</h2><blockquote><p>[数据库连接池](<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1518538?fr=aladdin">数据库连接池_百度百科 (baidu.com)</a>)负责分配、管理和释放数据库连接。允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。</p><p>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。</p></blockquote><p><img src="/images/image-20210427185126835.png"></p><p>数据库连接对象Connection是通过DriverManager获取的，每次获取都需要向数据库申请连接，验证用户名和密码。执行完SQL语句后断开连接，这样会造成资源的浪费，使用数据库连接池来解决。</p><p>基本思想：为数据库建立一个缓冲池，在池中预先放入一定的连接对象，获取连接时，直接从池中拿出使用，结束后再放回去后。</p><p>当数据库连接池中没有空闲连接时，请求会进入等待队列，等待空闲连接。</p><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><blockquote><p>JDBC数据库连接池通过javax.sql.DataSource接口实现，由java官方提供，可以使用第三方工具，这里使用C3P0。</p></blockquote><h3 id="1-导入jar包"><a href="#1-导入jar包" class="headerlink" title="1.导入jar包"></a>1.导入jar包</h3><p><img src="/images/image-20210427195643274.png"></p><p>步骤跟以前导入jar包一样</p><p>注意，需要添加mchange-commons-java-0.2.19.jar包，不然会报错：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java.lang.NoClassDefFoundError: com<span class="hljs-regexp">/mchange/</span>v2<span class="hljs-regexp">/ser/</span>Indirector<br></code></pre></td></tr></table></figure><h3 id="2-代码部分"><a href="#2-代码部分" class="headerlink" title="2.代码部分"></a>2.代码部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pool.zll.test;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ConnectionPool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> PropertyVetoException, SQLException </span>&#123;<br>        <span class="hljs-comment">//1.创建C3P0</span><br>        ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        <span class="hljs-comment">//2.连接池连接数据库</span><br>        dataSource.setDriverClass(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding-UTF-8&quot;</span>);<br>        dataSource.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">//设置初始化连接对象个数</span><br>        dataSource.setInitialPoolSize(<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//连接对象不足时，再次申请个数</span><br>        dataSource.setAcquireIncrement(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//设置池中最多个数</span><br>        dataSource.setMaxPoolSize(<span class="hljs-number">40</span>);<br>        <span class="hljs-comment">//设置最小连接数,申请的临界值</span><br>        dataSource.setMinPoolSize(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//3.从池中获取连接对象</span><br>        Connection connection = dataSource.getConnection();<br>        System.out.println((connection));<br>        <span class="hljs-comment">//4.执行SQL语句</span><br>        String sql = <span class="hljs-string">&quot;select * from t_user&quot;</span>;<br>        Statement statement = connection.createStatement();<br>        <span class="hljs-comment">//5.创建ResultSet对象</span><br>        ResultSet resultSet = statement.executeQuery(sql);<br>        <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>            <span class="hljs-keyword">int</span> id = resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            String name = resultSet.getString(<span class="hljs-string">&quot;username&quot;</span>);<br>            String pwd = resultSet.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>            System.out.println(id+<span class="hljs-string">&quot;-&quot;</span>+name+<span class="hljs-string">&quot;-&quot;</span>+pwd);<br>        &#125;<br>        <span class="hljs-comment">//6.还回连接对象</span><br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传统方式拿到的Connection</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">com</span>.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">4</span>bb<span class="hljs-number">4</span>de<span class="hljs-number">6</span>a<br></code></pre></td></tr></table></figure><p><img src="/images/image-20210427200848602.png"></p><p>C3P0拿到的Connection</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">com</span>.mchange.v<span class="hljs-number">2</span>.c<span class="hljs-number">3</span>p<span class="hljs-number">0</span>.impl.NewProxyConnection@<span class="hljs-number">5</span>e<span class="hljs-number">025</span>e<span class="hljs-number">70</span><span class="hljs-meta"> [wrapping: com.mysql.cj.jdbc.ConnectionImpl@1fbc7afb]</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20210427200745062.png"></p><h2 id="三、配置文件"><a href="#三、配置文件" class="headerlink" title="三、配置文件"></a>三、配置文件</h2><p>一般我们不会直接带代码中写，而是放到一个配置文件中，这样在修改的时候直接修改xml文件，可以避免修改java代码导致的重新编译。</p><h3 id="1-创建文件"><a href="#1-创建文件" class="headerlink" title="1.创建文件"></a>1.创建文件</h3><p><img src="/images/image-20210427202805173.png"></p><p>文件名为    c3p0-congif.xml</p><p><img src="/images/image-20210427202904321.png"></p><h3 id="2-配置内容"><a href="#2-配置内容" class="headerlink" title="2.配置内容"></a>2.配置内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">named-config</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myc3p0&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定连接数据源的基本属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding-UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 池中连接数不足时，再次申请的个数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 初始化连接对象个数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置最小连接数,申请的临界值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置池中最多个数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>40<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">named-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：&amp;在xml文件中是特殊字符，需要转义：&amp;amp;</p><h3 id="3-java代码"><a href="#3-java代码" class="headerlink" title="3.java代码"></a>3.java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pool.zll.test;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XmlConnectionPool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> PropertyVetoException, SQLException </span>&#123;<br>        <span class="hljs-comment">//1.通过配置文件创建C3P0</span><br>        <span class="hljs-comment">//传的参数是配置文件named-config的name</span><br>        ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource(<span class="hljs-string">&quot;myc3p0&quot;</span>);<br>        <span class="hljs-comment">//2.从池中获取连接对象</span><br>        Connection connection = dataSource.getConnection();<br>        System.out.println((connection));<br>        <span class="hljs-comment">//4.执行SQL语句</span><br>        String sql = <span class="hljs-string">&quot;select * from t_user&quot;</span>;<br>        Statement statement = connection.createStatement();<br>        <span class="hljs-comment">//5.创建ResultSet对象</span><br>        ResultSet resultSet = statement.executeQuery(sql);<br>        <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>            <span class="hljs-keyword">int</span> id = resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            String name = resultSet.getString(<span class="hljs-string">&quot;username&quot;</span>);<br>            String pwd = resultSet.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>            System.out.println(id+<span class="hljs-string">&quot;-&quot;</span>+name+<span class="hljs-string">&quot;-&quot;</span>+pwd);<br>        &#125;<br>        <span class="hljs-comment">//6.将连接对象还回连接池</span><br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JAVAEE】学习七：JDBC</title>
    <link href="/2021/04/26/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%B8%83%EF%BC%9AJDBC/"/>
    <url>/2021/04/26/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%B8%83%EF%BC%9AJDBC/</url>
    
    <content type="html"><![CDATA[<h1 id="【JAVAEE】学习七：JDBC"><a href="#【JAVAEE】学习七：JDBC" class="headerlink" title="【JAVAEE】学习七：JDBC"></a>【JAVAEE】学习七：JDBC</h1><h3 id="一、JDBC简介"><a href="#一、JDBC简介" class="headerlink" title="一、JDBC简介"></a>一、JDBC简介</h3><blockquote><p>Java数据库连接（Java Database Connectivity），是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。</p><p>JDBC是面向关系型数据库的。</p></blockquote><p><img src="/images/image-20210425201755524.png"></p><h3 id="1、JDBC-API"><a href="#1、JDBC-API" class="headerlink" title="1、JDBC API"></a>1、JDBC API</h3><p>由java官方提供给开发者调用的接口，在Java.sql和javax.sql中，有如下类和接口：</p><ul><li>DriverManager类</li><li>Connection接口</li><li>Statement接口</li><li>ResultSet接口</li></ul><h3 id="2、Driver-Manager"><a href="#2、Driver-Manager" class="headerlink" title="2、Driver Manager"></a>2、Driver Manager</h3><p>由java官方提供给数据库厂商的API，用于管理不同的JDBC驱动。</p><h3 id="3、JDBC驱动"><a href="#3、JDBC驱动" class="headerlink" title="3、JDBC驱动"></a>3、JDBC驱动</h3><p>由数据库厂商提供，用于连接不同数据库。</p><h2 id="二、JDBC基本使用"><a href="#二、JDBC基本使用" class="headerlink" title="二、JDBC基本使用"></a>二、JDBC基本使用</h2><h3 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1.使用步骤"></a>1.使用步骤</h3><p>1、加载数据库驱动，建立java程序与数据库的桥梁。</p><p>2、获取Connection，建立java程序与数据库的连接。</p><p>3、创建Statement对象，由Connection产生，执行SQL语句。</p><p>4、若需要返回值，则创建ResultSet对象，保存Statement执行后查询到的结果。</p><h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h3><h4 id="（1）首先导入jar包"><a href="#（1）首先导入jar包" class="headerlink" title="（1）首先导入jar包"></a>（1）首先导入jar包</h4><p><img src="/images/image-20210427190643813.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zll.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//1.加载驱动</span><br>        <span class="hljs-comment">//反射机制</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.获取连接</span><br>        String url = <span class="hljs-string">&quot;jdbc:mysql://&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）添加数据库，获取驱动"><a href="#（2）添加数据库，获取驱动" class="headerlink" title="（2）添加数据库，获取驱动"></a>（2）添加数据库，获取驱动</h4><p>点击Database</p><p><img src="/images/image-20210426203211315.png"></p><p>点击+号</p><p><img src="/images/image-20210426203259031.png">点击DataSource并选择你需要的数据库</p><p><img src="/images/image-20210426203326669.png"></p><p><img src="/images/image-20210426203520425.png"></p><p>上述操作用代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zll.test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">//1.加载驱动</span><br>        <span class="hljs-comment">//反射机制</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.获取连接</span><br>        String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding-UTF-8&quot;</span>;<br>        String user = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;123456&quot;</span>;<br>        Connection connection = DriverManager.getConnection(url,user,password);<br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3.具体实现"></a>3.具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zll.test;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">//1.加载驱动</span><br>        <span class="hljs-comment">//反射机制</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.获取连接</span><br>        String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding-UTF-8&quot;</span>;<br>        String user = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;123456&quot;</span>;<br>        Connection connection = DriverManager.getConnection(url,user,password);<br>        <span class="hljs-comment">//3.创建Statement对象</span><br><span class="hljs-comment">//        String sql = &quot;insert into user(id,username,password) values(4,&#x27;chenliu&#x27;,123456)&quot;;</span><br>        String sql = <span class="hljs-string">&quot;select * from t_user&quot;</span>;<br>        Statement statement = connection.createStatement();<br>        <span class="hljs-comment">//4.创建ResultSet对象</span><br>        ResultSet resultSet = statement.executeQuery(sql);<br>        <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>            <span class="hljs-keyword">int</span> id = resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            String name = resultSet.getString(<span class="hljs-string">&quot;username&quot;</span>);<br>            String pwd = resultSet.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>            System.out.println(id+<span class="hljs-string">&quot;-&quot;</span>+name+<span class="hljs-string">&quot;-&quot;</span>+pwd);<br>        &#125;<br><span class="hljs-comment">//        int result = statement.executeUpdate(sql);</span><br><span class="hljs-comment">//        System.out.println(result);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20210426212313592.png"></p><h2 id="三、使用preparedStatement"><a href="#三、使用preparedStatement" class="headerlink" title="三、使用preparedStatement"></a>三、使用preparedStatement</h2><blockquote><p>preparedStatement是Statement的子类</p></blockquote><h3 id="1-Statement缺点"><a href="#1-Statement缺点" class="headerlink" title="1.Statement缺点"></a>1.Statement缺点</h3><p>使用Statement进行开发会遇到两类问题：</p><ol><li><p>需要频繁拼接字符串，容易出错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String username = <span class="hljs-string">&quot;lisi&quot;</span>;<br>String mypwd = <span class="hljs-string">&quot;123456&quot;</span>;<br>String sql = <span class="hljs-string">&quot;select * from t_user where username=&#x27;&quot;</span>+username+<span class="hljs-string">&quot; &#x27;and password=&#x27;&quot;</span>+mypwd+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>SQl注入：SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句)，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。<a href="https://baike.baidu.com/item/sql%E6%B3%A8%E5%85%A5/150289?fr=aladdin">sql注入_百度百科 </a></p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String username = <span class="hljs-string">&quot;lisi&quot;</span> or <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br>String mypwd = <span class="hljs-string">&quot;123456&quot;</span> or <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br>String sql = <span class="hljs-string">&quot;select * from t_user where username=&#x27;&quot;</span>+username+<span class="hljs-string">&quot; &#x27;and password=&#x27;&quot;</span>+mypwd+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-comment">//这里会永远登录成功！</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-preparedStatement使用"><a href="#2-preparedStatement使用" class="headerlink" title="2.preparedStatement使用"></a>2.preparedStatement使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zll.test;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Login</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding-UTF-8&quot;</span>;<br>        String user = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;123456&quot;</span>;<br>        Connection connection = DriverManager.getConnection(url,user,password);<br>        String username = <span class="hljs-string">&quot;lisi&quot;</span>;<br>        String mypwd = <span class="hljs-string">&quot;123456&quot;</span>;<br>        String sql = <span class="hljs-string">&quot;select * from t_user where username = ? and password = ?&quot;</span>;<br>        <span class="hljs-comment">//创建Statement对象</span><br>        <span class="hljs-comment">//与Statement比较，这里是创建时就传入sql</span><br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>        <span class="hljs-comment">//替换？</span><br>        preparedStatement.setString(<span class="hljs-number">1</span>,username);<br>        preparedStatement.setString(<span class="hljs-number">2</span>,mypwd);<br>        <span class="hljs-comment">//创建ResultSet对象，这里就不用传入sql了</span><br>        ResultSet resultSet = preparedStatement.executeQuery();<br>        <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JAVAEE】学习六：文件上传与下载</title>
    <link href="/2021/04/20/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E5%85%AD%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
    <url>/2021/04/20/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E5%85%AD%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="【JAVAEE】学习六：文件上传与下载"><a href="#【JAVAEE】学习六：文件上传与下载" class="headerlink" title="【JAVAEE】学习六：文件上传与下载"></a>【JAVAEE】学习六：文件上传与下载</h1><h2 id="一、文件上传"><a href="#一、文件上传" class="headerlink" title="一、文件上传"></a>一、文件上传</h2><h3 id="1、JSP部分"><a href="#1、JSP部分" class="headerlink" title="1、JSP部分"></a>1、JSP部分</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--<span class="hljs-number">1</span>、input的type设置为file--&gt;<br>&lt;!--<span class="hljs-number">2</span>、提交方法为post，若为get会将文件名传给服务器--&gt;<br>&lt;!--<span class="hljs-number">3</span>、enctype设置为<span class="hljs-string">&quot;multipart/form-data&quot;</span>--&gt;<br>&lt;form action=<span class="hljs-string">&quot;/upload&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> value=<span class="hljs-string">&quot;img&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;点击提交&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><h3 id="2、servlet部分"><a href="#2、servlet部分" class="headerlink" title="2、servlet部分"></a>2、servlet部分</h3><h4 id="2-1-输入输出流处理"><a href="#2-1-输入输出流处理" class="headerlink" title="2.1 输入输出流处理"></a>2.1 输入输出流处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> upload.doc.zll;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-meta">@WebServlet(&quot;/upload&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">upload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1、取出文件，使用输入流</span><br>        InputStream inputStream =  req.getInputStream();<br>        Reader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span>            BufferedReader(reader);<br>        <span class="hljs-comment">//2、存储文件，使用输出流</span><br>        <span class="hljs-comment">//获取文件绝对路径</span><br>        String path = req.getServletContext().getRealPath(<span class="hljs-string">&quot;file/copy.txt&quot;</span>);<br>        <span class="hljs-comment">//3、输出</span><br>        System.out.println(path);<br>        OutputStream outputStream = <span class="hljs-keyword">new</span> FileOutputStream(path);<br>        Writer writer = <span class="hljs-keyword">new</span> OutputStreamWriter(outputStream);<br>        BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(writer);<br>        String str = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> ((str = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//浏览器会在开头结尾自带一些信息</span><br>            bufferedWriter.write(str);<br>        &#125;<br>        <span class="hljs-comment">//4、关闭输入输出流</span><br>        <span class="hljs-comment">//在关闭FileOutputStream之前先关闭BufferedWriter</span><br>        bufferedWriter.close();<br>        writer.close();<br>        inputStream.close();<br>        reader.close();<br>        bufferedReader.close();<br>        outputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在tomcat项目运行的目录下新建file文件夹，要在项目启动后新建，否则file文件夹会删除。</p><p><img src="/images/image-20210420113827147.png" alt="image-20210420113827147"></p><p><img src="/images/image-20210420114426272.png" alt="image-20210420114426272"></p><p><img src="/images/image-20210420114435538.png" alt="image-20210420114435538"></p><h4 id="2-2-使用fileuploade组件处理"><a href="#2-2-使用fileuploade组件处理" class="headerlink" title="2.2 使用fileuploade组件处理"></a>2.2 使用fileuploade组件处理</h4><blockquote><p>可处理浏览器自带信息</p><p>fileupload组件可以将请求信息都解析成FileItem对象，通过此对象完成上传。</p></blockquote><p>1、导入jar包<a href="http://commons.apache.org/proper/commons-fileupload/">http://commons.apache.org/proper/commons-fileupload/</a></p><p><img src="/images/image-20210420115145026.png" alt="image-20210420115145026"></p><p>2、代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> upload.doc.zll;<br><br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@WebServlet(&quot;/upload&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">upload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            DiskFileItemFactory fileItemFactory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<br>            ServletFileUpload servletFileUpload = <span class="hljs-keyword">new</span> ServletFileUpload(fileItemFactory);<br>            List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);<br>            <span class="hljs-keyword">for</span>(FileItem fileItem : list)&#123;<br>                <span class="hljs-comment">//是否是输入框</span><br>                <span class="hljs-keyword">if</span>(fileItem.isFormField())&#123;<br>                    <span class="hljs-comment">//getFieldName()：input的name值</span><br>                    String name = fileItem.getFieldName();<br>                    String value = fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                    System.out.println(name+<span class="hljs-string">&quot;:&quot;</span>+value);<br>                &#125;<br>                <span class="hljs-comment">//是文件</span><br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//getName()：文件名</span><br>                    String fileName = fileItem.getName();<br>                    <span class="hljs-keyword">long</span> size = fileItem.getSize();<br>                 System.out.println(fileName+<span class="hljs-string">&quot;:&quot;</span>+size+<span class="hljs-string">&quot;Byte&quot;</span>);<br>                    <span class="hljs-comment">//用字节读取，否则1、图片会被破坏 2、文本换行读不到</span><br>                    InputStream inputStream =  fileItem.getInputStream();<br>                    String path = req.getServletContext().getRealPath(<span class="hljs-string">&quot;file/&quot;</span>+fileName);<br>                    OutputStream outputStream = <span class="hljs-keyword">new</span> FileOutputStream((path));<br>                    <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> ((temp = inputStream.read())!=-<span class="hljs-number">1</span>)&#123;<br>                        outputStream.write(temp);<br>                    &#125;<br>                    outputStream.close();<br>                    inputStream.close();<br>                    System.out.println(<span class="hljs-string">&quot;上传成功！&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileUploadException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20210420122816742.png" alt="image-20210420122816742"></p><p><img src="/images/image-20210420122826288.png" alt="image-20210420122826288"></p><p><img src="/images/image-20210420122842800.png" alt="image-20210420122842800"></p><h2 id="二、文件下载"><a href="#二、文件下载" class="headerlink" title="二、文件下载"></a>二、文件下载</h2><h3 id="1、JSP部分-1"><a href="#1、JSP部分-1" class="headerlink" title="1、JSP部分"></a>1、JSP部分</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">10618</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">4</span>/<span class="hljs-number">20</span><br>  Time: <span class="hljs-number">12</span>:<span class="hljs-number">38</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;下载&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;a href=&quot;/download&quot;&gt;下载&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="2、Servlet部分"><a href="#2、Servlet部分" class="headerlink" title="2、Servlet部分"></a>2、Servlet部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> upload.doc.zll;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-meta">@WebServlet(&quot;/download&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">download</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>       <span class="hljs-comment">//设置响应方式</span><br>        resp.setContentType(<span class="hljs-string">&quot;application/x-msdownload&quot;</span>);<br>        String fileName = <span class="hljs-string">&quot;1.png&quot;</span>;<br>        <span class="hljs-comment">//设置下载后的文件名</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename&quot;</span>+fileName);<br>        <span class="hljs-comment">//获取输出流</span><br>        OutputStream outputStream = resp.getOutputStream();<br>        String path = req.getServletContext().getRealPath(<span class="hljs-string">&quot;file/1.png&quot;</span>);<br>        InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(path);<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((temp=inputStream.read())!=<span class="hljs-number">0</span>)&#123;<br>            outputStream.write(temp);<br>        &#125;<br>        inputStream.close();<br>        outputStream.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/images/image-20210420125731298.png" alt="image-20210420125731298"></p><p><img src="/images/image-20210420125645896.png" alt="image-20210420125645896"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaEE】第四次上机小结</title>
    <link href="/2021/04/12/%E3%80%90JavaEE%E3%80%91%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/04/12/%E3%80%90JavaEE%E3%80%91%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaEE】第四次上机小结"><a href="#【JavaEE】第四次上机小结" class="headerlink" title="【JavaEE】第四次上机小结"></a>【JavaEE】第四次上机小结</h1><h2 id="一、参考老师的war包建立项目并回答问题"><a href="#一、参考老师的war包建立项目并回答问题" class="headerlink" title="一、参考老师的war包建立项目并回答问题"></a>一、参考老师的war包建立项目并回答问题</h2><h3 id="Lab18"><a href="#Lab18" class="headerlink" title="Lab18"></a>Lab18</h3><h4 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h4><h5 id="1、查看web-xml文件"><a href="#1、查看web-xml文件" class="headerlink" title="1、查看web.xml文件"></a>1、查看web.xml文件</h5><p><img src="/images/java41.png"></p><p>发现没有配置已有的jsp，项目启动时需要手动输入地址访问</p><h5 id="2、运行分析"><a href="#2、运行分析" class="headerlink" title="2、运行分析"></a>2、运行分析</h5><h5 id="3、观察toLocalString-方法："><a href="#3、观察toLocalString-方法：" class="headerlink" title="3、观察toLocalString()方法："></a>3、观察toLocalString()方法：</h5><p><img src="/images/java42.png"></p><p><img src="/images/java43.png"></p><h5 id="4、观察hello-jsp页面乱码，更改为UTF-8"><a href="#4、观察hello-jsp页面乱码，更改为UTF-8" class="headerlink" title="4、观察hello.jsp页面乱码，更改为UTF-8"></a>4、观察hello.jsp页面乱码，更改为UTF-8</h5><p><img src="/images/java44.png"></p><p><img src="/images/java45.png"></p><h5 id="5、jsp-forward标签"><a href="#5、jsp-forward标签" class="headerlink" title="5、jsp:forward标签"></a>5、jsp:forward标签</h5><p><img src="/images/java46.png"></p><p>等同于转发，不是重定向</p><h5 id="6、jsp-include标签"><a href="#6、jsp-include标签" class="headerlink" title="6、jsp:include标签"></a>6、jsp:include标签</h5><p><img src="/images/java47.png"></p><p>date.jsp作为include.jsp部分输出</p><h5 id="7、不同输出方式"><a href="#7、不同输出方式" class="headerlink" title="7、不同输出方式"></a>7、不同输出方式</h5><p>jsp内置对象输出与servlet方式输出</p><p><img src="/images/java48.png"></p><h5 id="8、出错页面"><a href="#8、出错页面" class="headerlink" title="8、出错页面"></a>8、出错页面</h5><p><img src="/images/java49.png"></p><p>出错显示源代码</p><h4 id="回答问题"><a href="#回答问题" class="headerlink" title="回答问题"></a>回答问题</h4><h5 id="1、思考，JSP中的中文乱码是如何产生的，应该如何避免这类问题？"><a href="#1、思考，JSP中的中文乱码是如何产生的，应该如何避免这类问题？" class="headerlink" title="1、思考，JSP中的中文乱码是如何产生的，应该如何避免这类问题？"></a>1、思考，JSP中的中文乱码是如何产生的，应该如何避免这类问题？</h5><p>答：JSP页面乱码一般是页面编码不一致导致的,指定使用字符集编码就可以避免。</p><h5 id="2、在JSP页中，如何使用javabean"><a href="#2、在JSP页中，如何使用javabean" class="headerlink" title="2、在JSP页中，如何使用javabean?"></a>2、在JSP页中，如何使用javabean?</h5><p>答：涉及以下动作：<a href="jsp:useBean">jsp:useBean</a>,<a href="jsp:setProperty">jsp:setProperty</a>和<a href="jsp:getProperty">jsp:getProperty</a></p><p>（1）实例化Javabean：</p><blockquote><p>j<a href="jsp:useBean">jsp:useBean</a>用于在jsp页面中实例化一个Javabean组件，这个实例化Javabean组件对象可以在这个jsp页面的其他地方被调用。</p></blockquote><p><a href="jsp:useBean">jsp:useBean</a>的基本语法如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:useBean id=<span class="hljs-string">&quot;name&quot;</span> scope=<span class="hljs-string">&quot;page|request|session|application&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;className&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>id：设定Javabean名称。</li><li>class：指定jsp引擎查找Javabean字节码的路径。一般是这Javabean类名。如：com.zll。</li><li>scope：指定Javabean实例对象的生命周期，也是Javabean的有效作用范围，可以是page，request，session和application。</li></ul><p>（2）存取Javabean的属性：</p><blockquote><p>使用动作元素<a href="jsp:setProperty">jsp:setProperty</a>和<a href="jsp:getProperty">jsp:getProperty</a></p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:setProperty property=<span class="hljs-string">&quot;propertyName&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span> value=“string”/&gt;<br>&lt;jsp:getProperty property=<span class="hljs-string">&quot;propertyName&quot;</span> name=<span class="hljs-string">&quot;BeanName&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h5 id="3、在JSP页中，如何实现类似于servlet中的转发和包含？"><a href="#3、在JSP页中，如何实现类似于servlet中的转发和包含？" class="headerlink" title="3、在JSP页中，如何实现类似于servlet中的转发和包含？"></a>3、在JSP页中，如何实现类似于servlet中的转发和包含？</h5><p>答：转发：使用jsp:forward标签；包含：使用include</p><p><strong>转发</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:forward page=&quot;b.jsp&quot;&gt;&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%request.getRequestDispatcher(<span class="hljs-string">&quot;b.jsp&quot;</span>).forward(request,response);<br>%&gt;<br></code></pre></td></tr></table></figure><p>可以携带参数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:forward page=<span class="hljs-string">&quot;b.jsp&quot;</span>&gt;<br>    &lt;jsp:param value=<span class="hljs-string">&quot;abcd&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>    &lt;/jsp&gt;<br><br>&lt;!--在b中可以获取--&gt;<br>&lt;%<br>String name = request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>out.print(name);<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a><strong>包含</strong></h3><p><strong>一、两种用法</strong></p><p>1、include指令</p><blockquote><p>通过file属性来指定被包含的页面</p><p>当JSP转换成Servlet时引入指定文件</p><p>一般不需要写头</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ pagecontentType=<span class="hljs-string">&quot;text/html;charset=GB2312&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span>errorPage=<span class="hljs-string">&quot;&quot;</span>%&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;head.jsp&quot;</span>%&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;body.jsp&quot;</span>%&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;tail.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><p>2、<a href="jsp:include">jsp:include</a>动作元素</p><blockquote><p>通过page属性来指定被包含的页面</p><p>当JSP页面被请求时引入指定文件</p><p>需要写头</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=GB2312&quot;</span>language=<span class="hljs-string">&quot;java&quot;</span> errorPage=<span class="hljs-string">&quot;&quot;</span>%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;head.jsp&quot;</span>/&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;body.jsp&quot;</span>/&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;tail.jsp&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>注意：<a href="jsp:include">jsp:include</a>动作通常是包含那些经常改动的文件，因为被包含的文件改动不会影响到包含文件，因此不需要对包含文件进行重新编译</p><p><strong>二、用法区别</strong></p><p>include指令：（静态包含）被包含的文件被原封不动的插入到包含页面中使用该指令的位置，然后JSP编译器再对这个合成的文件进行编译，最终编译后的文件只有一个。  是在翻译阶段执行</p><p><a href="jsp:include">jsp:include</a> ：（动态包含）包含文件时，当该动作标识执行后，JSP程序会将请求转发到（注意不是重定向）被包含页面，并将执行结果输出到浏览器中，然后返回页面继续执行后面的代码，以为web容器执行的两个文件，所以JSP编译器会分别对这两个文件进行编译。  在请求处理阶段执行.</p><p><strong>三、如何使include页面携带入参</strong></p><p><a href="jsp:include">jsp:include</a>动作元素可以很方便的用<a href="jsp:param">jsp:param</a>来向所包含页传递参数，方法如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=GB2312&quot;</span>language=<span class="hljs-string">&quot;java&quot;</span> errorPage=<span class="hljs-string">&quot;&quot;</span>%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;head.jsp&quot;</span>/&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;body.jsp&quot;</span>&gt;<br>&lt;jsp:param name=<span class="hljs-string">&quot;[uid](https://www.baidu.com/s?wd=uid&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)&quot;</span>value=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>&lt;jsp:param name=<span class="hljs-string">&quot;pwd&quot;</span>value=<span class="hljs-string">&quot;password&quot;</span>/&gt;<br>&lt;/jsp:include&gt;<br>&lt;jsp:includepage=<span class="hljs-string">&quot;tail.jsp&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h5 id="4、在JSP页中，向用户显示结果时，如何实现换行操作？"><a href="#4、在JSP页中，向用户显示结果时，如何实现换行操作？" class="headerlink" title="4、在JSP页中，向用户显示结果时，如何实现换行操作？"></a>4、在JSP页中，向用户显示结果时，如何实现换行操作？</h5><p>答：JSP换行的实现，是通过 html换行标签<br/>来实现的。</p><h5 id="5、在JSP页中，pageContext对象有哪些作用域可供操作？"><a href="#5、在JSP页中，pageContext对象有哪些作用域可供操作？" class="headerlink" title="5、在JSP页中，pageContext对象有哪些作用域可供操作？"></a>5、在JSP页中，pageContext对象有哪些作用域可供操作？</h5><p>答：页面作用域，作用于当前页面</p><h5 id="6、使用Date对象时，需要注意什么？"><a href="#6、使用Date对象时，需要注意什么？" class="headerlink" title="6、使用Date对象时，需要注意什么？"></a>6、使用Date对象时，需要注意什么？</h5><p>答：注意静态Date对象和Date对象实例的差别，后者包含一个实际的日期值。还需要注意Date的格式化方法。</p><h3 id="Lab19"><a href="#Lab19" class="headerlink" title="Lab19"></a>Lab19</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="1、查看web-xml"><a href="#1、查看web-xml" class="headerlink" title="1、查看web.xml"></a>1、查看web.xml</h5><p><img src="/images/java410.png"></p><p>没有配置有效url</p><h5 id="2、运行firstTest-jsp"><a href="#2、运行firstTest-jsp" class="headerlink" title="2、运行firstTest.jsp"></a>2、运行firstTest.jsp</h5><p><img src="/images/image-20210411105739690.png"></p><p>分析代码</p><p><img src="/images/image-20210411105816194.png"></p><p>用include实现头部、尾部独立的jsp</p><h5 id="3、运行register"><a href="#3、运行register" class="headerlink" title="3、运行register"></a>3、运行register</h5><p><img src="/images/image-20210411110035422.png"></p><p><img src="/images/image-20210411110025166.png"></p><p>注册后登录</p><p><img src="/images/image-20210411110444313.png"></p><p>修改为jsp</p><p><img src="/images/image-20210411110457695.png"></p><h5 id="4、运行email"><a href="#4、运行email" class="headerlink" title="4、运行email"></a>4、运行email</h5><p><img src="/images/image-20210411110558165.png"></p><p><img src="/images/image-20210411110608539.png"></p><h5 id="5、运行productManage目录"><a href="#5、运行productManage目录" class="headerlink" title="5、运行productManage目录"></a>5、运行productManage目录</h5><p><img src="/images/image-20210411110709678.png"></p><p>添加商品</p><p><img src="/images/image-20210411110746070.png"></p><p><img src="/images/image-20210411110753667.png"></p><p>提交表单到list.jsp，用脚本封装数据到product类中并存入request域。然后页面输出商品信息。</p><p>删除：<img src="/images/image-20210411110834255.png"></p><p>List.jsp执行remove方法删除request域数据（request.removeAttribute(“phone”)）</p><h4 id="回答问题-1"><a href="#回答问题-1" class="headerlink" title="回答问题"></a>回答问题</h4><h5 id="1、再次思考，如何组织javabean"><a href="#1、再次思考，如何组织javabean" class="headerlink" title="1、再次思考，如何组织javabean?"></a>1、再次思考，如何组织javabean?</h5><p>答：javabean 的两种使用方式：（嵌入 java 代码方式和使用 jsp 标记符方式）</p><p>a、 jsp 中使用 <a href="jsp:useBean">jsp:useBean</a> 标记符访问 javabean ：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:useBean id=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;test.TestBean&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>b、 jsp 中嵌入 java 代码方式访问 javabean ：</p><p>首行导入 javabean ：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.javaBean.TestBean&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p>下边就可以像在 java 语言中那样用了：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;% TestBean testBean=<span class="hljs-keyword">new</span> TestBean(); %&gt;<br></code></pre></td></tr></table></figure><h5 id="2、一般情况下，javabean有哪些具体的规范？"><a href="#2、一般情况下，javabean有哪些具体的规范？" class="headerlink" title="2、一般情况下，javabean有哪些具体的规范？"></a>2、一般情况下，javabean有哪些具体的规范？</h5><p>答：</p><ul><li>必须要有一个公共无参构造(写了带参构造必须添加一个，都不写则有默认)</li><li>Javabean类不应有公共属性，属性都应该是private.</li><li>为私有( private声明)属性提供符合命名规范的get/set方法</li><li>应该要实现serializeable接口</li></ul><h5 id="3、在jsp页中，如何引用bean，如何自动完成bean的属性域的操作？"><a href="#3、在jsp页中，如何引用bean，如何自动完成bean的属性域的操作？" class="headerlink" title="3、在jsp页中，如何引用bean，如何自动完成bean的属性域的操作？"></a>3、在jsp页中，如何引用bean，如何自动完成bean的属性域的操作？</h5><p>答：可以使用脚本写Java代码，也可使用&lt;jsp:useBean id=”” class=”” scope=””/&gt;操作；</p><p>根据表单自动匹配所有的属性：&lt;jsp:setProperty name=”” property=””/&gt;。</p><h5 id="4、在jsp页中，如何实现对它页的引入-or-嵌入？"><a href="#4、在jsp页中，如何实现对它页的引入-or-嵌入？" class="headerlink" title="4、在jsp页中，如何实现对它页的引入 or 嵌入？"></a>4、在jsp页中，如何实现对它页的引入 or 嵌入？</h5><p>答：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@include file=&quot;***.jsp&quot; %&gt; 或 &lt;jsp:include page=&quot;***.jsp&quot;&gt;&lt;/jsp:include&gt;<br></code></pre></td></tr></table></figure><p>使用include指令包含的页面将会直接插入包含该页面中该指令的位置，然后jsp编译器再对合成的文件进行编译，最终编译的页面只有一个。</p><p>使用jsp:include动作包含时，当该动作标识执行后，jsp程序将会将请求forward到被包含页面，并将执行结果放入输出至浏览器中，并返回页面继续执行后面的代码。包含文件和被包含文件将会分别编译.</p><h5 id="5、访问-register-index-jsp，思考如何把界面上的内容换成自己的内容？"><a href="#5、访问-register-index-jsp，思考如何把界面上的内容换成自己的内容？" class="headerlink" title="5、访问/register/index.jsp，思考如何把界面上的内容换成自己的内容？"></a>5、访问/register/index.jsp，思考如何把界面上的内容换成自己的内容？</h5><p>答：修改include进来的jsp代码。</p><h5 id="6、JAVA代码和HTML代码混编出来的jsp页面，给你的最深刻的印象是什么？"><a href="#6、JAVA代码和HTML代码混编出来的jsp页面，给你的最深刻的印象是什么？" class="headerlink" title="6、JAVA代码和HTML代码混编出来的jsp页面，给你的最深刻的印象是什么？"></a>6、JAVA代码和HTML代码混编出来的jsp页面，给你的最深刻的印象是什么？</h5><p>答：数据传递很方便，在一个项目中不用跨域。</p><h5 id="7、JSP页面如何使用CSS样式？"><a href="#7、JSP页面如何使用CSS样式？" class="headerlink" title="7、JSP页面如何使用CSS样式？"></a>7、JSP页面如何使用CSS样式？</h5><p>答：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;link href=<span class="hljs-string">&quot;***.css&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h5 id="8、JSP页面如何使用javascript脚本？"><a href="#8、JSP页面如何使用javascript脚本？" class="headerlink" title="8、JSP页面如何使用javascript脚本？"></a>8、JSP页面如何使用javascript脚本？</h5><p>答：两种方法：</p><p>1直接写 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script type=&quot;text/javascript&quot;&gt;  alert(1); &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2 写在js文件中，然后再页面中引入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script type=&quot;text/javascript&quot; src=&quot;json.js&quot; &gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="9、在email目录下，邮箱的检测使用的后台javabean功能增强的方式来完成，如何解耦成独立的工具类来检测？"><a href="#9、在email目录下，邮箱的检测使用的后台javabean功能增强的方式来完成，如何解耦成独立的工具类来检测？" class="headerlink" title="9、在email目录下，邮箱的检测使用的后台javabean功能增强的方式来完成，如何解耦成独立的工具类来检测？"></a>9、在email目录下，邮箱的检测使用的后台javabean功能增强的方式来完成，如何解耦成独立的工具类来检测？</h5><p>​    10.1 思考，如何在前台直接用javascript脚本来完成检测？<br>​    10.2置于前台检测和置于后台检测，有何差别？</p><h5 id="10、int类型和Integer类型有何差别？"><a href="#10、int类型和Integer类型有何差别？" class="headerlink" title="10、int类型和Integer类型有何差别？"></a>10、int类型和Integer类型有何差别？</h5><p>答：(1)Integer 是 int 包装类，int 是八大基本数据类型之一（byte,char,short,int,long,float,double,boolean）</p><p>(2)Integer 是类，默认值为null，int是基本数据类型，默认值为0；</p><p>(3)Integer 表示的是对象，用一个引用指向这个对象，而int是基本数据类型，直接存储数值。</p><p>(4)Integer能容纳null值，而int不行。</p><h5 id="11、boolean类型的属性，getter和setter有何变化？"><a href="#11、boolean类型的属性，getter和setter有何变化？" class="headerlink" title="11、boolean类型的属性，getter和setter有何变化？"></a>11、boolean类型的属性，getter和setter有何变化？</h5><p>答：对于类型为 boolean的属性(不是Boolean)，getter方法还可以写为isProperty（getProperty仍然可用）。 </p><p>对于上述的变化，你有何思考？</p><p>答：POJO类中布尔类型的变量，都不要加is。</p><h3 id="Lab20"><a href="#Lab20" class="headerlink" title="Lab20"></a>Lab20</h3><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><h5 id="1、查看web-xml-1"><a href="#1、查看web-xml-1" class="headerlink" title="1、查看web.xml"></a>1、查看web.xml</h5><p><img src="/images/image-20210411232244910.png"></p><p>配置了一个/employee，没有有效的默认界面</p><h5 id="2、访问employee-jsp"><a href="#2、访问employee-jsp" class="headerlink" title="2、访问employee.jsp"></a>2、访问employee.jsp</h5><p><img src="/images/image-20210411224804146.png"></p><p>在各个数据域中找不到同名变量值，所以EL表达式没有输出。</p><h5 id="3、访问EmployeeServlet"><a href="#3、访问EmployeeServlet" class="headerlink" title="3、访问EmployeeServlet"></a>3、访问EmployeeServlet</h5><p><img src="/images/image-20210411224957302.png">在EmployeeServlet中，完成了相关数据的封装，储存，和向employee.jsp转发，使其能从request域中接收到数据并显示。</p><h4 id="回答问题-2"><a href="#回答问题-2" class="headerlink" title="回答问题"></a>回答问题</h4><h5 id="1、数据的封装是用什么来实现的"><a href="#1、数据的封装是用什么来实现的" class="headerlink" title="1、数据的封装是用什么来实现的"></a>1、数据的封装是用什么来实现的</h5><p>答：javabean</p><h5 id="2、从控制器过来就有数据，而直接访问employee-jsp就没有数据，为啥？"><a href="#2、从控制器过来就有数据，而直接访问employee-jsp就没有数据，为啥？" class="headerlink" title="2、从控制器过来就有数据，而直接访问employee.jsp就没有数据，为啥？"></a>2、从控制器过来就有数据，而直接访问employee.jsp就没有数据，为啥？</h5><p>答：employee.jsp从request域取数据，而数据是在控制器里储存的，先运行控制器才能读取数据。</p><h5 id="3、在有数据和没有数据的情况下，el表达式的表现如何？"><a href="#3、在有数据和没有数据的情况下，el表达式的表现如何？" class="headerlink" title="3、在有数据和没有数据的情况下，el表达式的表现如何？"></a>3、在有数据和没有数据的情况下，el表达式的表现如何？</h5><p>答：有数据时直接在表达式位置输出，没有数据时不输出也不报错，直接跳过输出后面的内容。</p><h5 id="4、使用el表达式时，有哪两种方式来获取相应的值？"><a href="#4、使用el表达式时，有哪两种方式来获取相应的值？" class="headerlink" title="4、使用el表达式时，有哪两种方式来获取相应的值？"></a>4、使用el表达式时，有哪两种方式来获取相应的值？</h5><p>答：第一种：${对象实例.属性名} </p><p>第二种：${对象实例[‘属性名’]}</p><h5 id="5、在el表达式中的值，是一个对象吗？"><a href="#5、在el表达式中的值，是一个对象吗？" class="headerlink" title="5、在el表达式中的值，是一个对象吗？"></a>5、在el表达式中的值，是一个对象吗？</h5><p>答：可以是对象，也可是属性或基本数据类型值。</p><h5 id="6、如何直接用el表达式显示浏览器请求的头信息里的键值？"><a href="#6、如何直接用el表达式显示浏览器请求的头信息里的键值？" class="headerlink" title="6、如何直接用el表达式显示浏览器请求的头信息里的键值？"></a>6、如何直接用el表达式显示浏览器请求的头信息里的键值？</h5><p>答：${header[‘键名’]}</p><h3 id="Lab21"><a href="#Lab21" class="headerlink" title="Lab21"></a>Lab21</h3><h4 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h4><h5 id="1、查看web-xml文件-1"><a href="#1、查看web-xml文件-1" class="headerlink" title="1、查看web.xml文件"></a>1、查看web.xml文件</h5><p><img src="/images/image-20210411232325143.png"></p><p>index.jsp为默认界面</p><h5 id="2、访问并提交表单信息"><a href="#2、访问并提交表单信息" class="headerlink" title="2、访问并提交表单信息"></a>2、访问并提交表单信息</h5><p><img src="/images/image-20210411225830333.png"></p><p><img src="/images/image-20210411225837465.png"></p><p>使用了JavaBean并自动填装：</p><p><img src="/images/image-20210411230134469.png"></p><p>设置样式后通过EL表达式输出</p><h4 id="回答问题-3"><a href="#回答问题-3" class="headerlink" title="回答问题"></a>回答问题</h4><h5 id="1、思考，javabean的规范是什么？"><a href="#1、思考，javabean的规范是什么？" class="headerlink" title="1、思考，javabean的规范是什么？"></a>1、思考，javabean的规范是什么？</h5><p>答：必须要有一个公共无参构造(写了带参构造必须添加一个，都不写则有默认)Javabean类不应有公共属性，属性都应该是private.为私有( private声明)属性提供符合命名规范的get/set方法应该要实现serializeable接口。</p><h5 id="2、思考，javabean成员的访问操作是如何做到一致性的？"><a href="#2、思考，javabean成员的访问操作是如何做到一致性的？" class="headerlink" title="2、思考，javabean成员的访问操作是如何做到一致性的？"></a>2、思考，javabean成员的访问操作是如何做到一致性的？</h5><p>答：规范命名，且规范定义setter、getter方法。</p><h5 id="3、在jsp页里，如何获取基路径，它是什么？"><a href="#3、在jsp页里，如何获取基路径，它是什么？" class="headerlink" title="3、在jsp页里，如何获取基路径，它是什么？"></a>3、在jsp页里，如何获取基路径，它是什么？</h5><p>答：<img src="/images/image-20210411230559550.png"></p><h5 id="4、在jsp页里，使用绝对路径有什么好处？"><a href="#4、在jsp页里，使用绝对路径有什么好处？" class="headerlink" title="4、在jsp页里，使用绝对路径有什么好处？"></a>4、在jsp页里，使用绝对路径有什么好处？</h5><p>答：可以避免相对于请求的url路径在点击链接时，出现的访问地址错误。</p><h5 id="5、结合之前的servlet里的内容，思考，用servlet来做控制器处理请求和这里直接用jsp页来处理请求，有何异同？"><a href="#5、结合之前的servlet里的内容，思考，用servlet来做控制器处理请求和这里直接用jsp页来处理请求，有何异同？" class="headerlink" title="5、结合之前的servlet里的内容，思考，用servlet来做控制器处理请求和这里直接用jsp页来处理请求，有何异同？"></a>5、结合之前的servlet里的内容，思考，用servlet来做控制器处理请求和这里直接用jsp页来处理请求，有何异同？</h5><p>答：都可以处理用户请求。不同的是jsp页面还需要负责相应用户的展示，而servlet相对来说较为单纯，主需要处理请求。</p><h5 id="6、思考jsp页的优势是什么？但不便之处在哪里？"><a href="#6、思考jsp页的优势是什么？但不便之处在哪里？" class="headerlink" title="6、思考jsp页的优势是什么？但不便之处在哪里？"></a>6、思考jsp页的优势是什么？但不便之处在哪里？</h5><p>答：优势：界面展示就在Web服务器中，速度快，易部署。</p><p>缺点：代码复杂性增加，占用内存资源大，调试困难。</p><h5 id="7、页面中的css样式如何操作？"><a href="#7、页面中的css样式如何操作？" class="headerlink" title="7、页面中的css样式如何操作？"></a>7、页面中的css样式如何操作？</h5><p>答：直接在页面中写或者在外部写后引入</p><h5 id="8、页面中的数据怎么来？"><a href="#8、页面中的数据怎么来？" class="headerlink" title="8、页面中的数据怎么来？"></a>8、页面中的数据怎么来？</h5><p>答：表单提交的，之后通过EL表达式展示出来的</p><h5 id="9、页面的渲染【对最终用户呈现完整的面页】包括哪些动作？"><a href="#9、页面的渲染【对最终用户呈现完整的面页】包括哪些动作？" class="headerlink" title="9、页面的渲染【对最终用户呈现完整的面页】包括哪些动作？"></a>9、页面的渲染【对最终用户呈现完整的面页】包括哪些动作？</h5><p>答：解析html源码后创建DOM树，再解析css源码计算样式后产生渲染树，最后绘制呈现给用户。</p><h5 id="10、在jsp中，使用javabean时，是如何实现自动装配的？它的先决条件是什么？"><a href="#10、在jsp中，使用javabean时，是如何实现自动装配的？它的先决条件是什么？" class="headerlink" title="10、在jsp中，使用javabean时，是如何实现自动装配的？它的先决条件是什么？"></a>10、在jsp中，使用javabean时，是如何实现自动装配的？它的先决条件是什么？</h5><p>答：&lt;jsp:setProperty property=”*” name=”user”/&gt;，先决条件表单属性名是与JavaBean的属性名完全一致。</p><h5 id="11、"><a href="#11、" class="headerlink" title="11、"></a>11、</h5><p><img src="/images/image-20210411230033792.png"></p><h3 id="Lab22"><a href="#Lab22" class="headerlink" title="Lab22"></a>Lab22</h3><h4 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h4><h5 id="1、查看web-xml文件-2"><a href="#1、查看web-xml文件-2" class="headerlink" title="1、查看web.xml文件"></a>1、查看web.xml文件</h5><p><img src="/images/image-20210411232416878.png"></p><p>没有有效的默认配置</p><h5 id="2、访问EL-jsp"><a href="#2、访问EL-jsp" class="headerlink" title="2、访问EL.jsp"></a>2、访问EL.jsp</h5><p><img src="/images/image-20210411232514518.png"></p><p>分析：第一个运算符为空格运算符，不算空，所以为false</p><h5 id="3、访问jstl01-jsp"><a href="#3、访问jstl01-jsp" class="headerlink" title="3、访问jstl01.jsp"></a>3、访问jstl01.jsp</h5><p><img src="/images/image-20210411232710825.png"></p><h5 id="4、访问jstlCcatch01-jsp"><a href="#4、访问jstlCcatch01-jsp" class="headerlink" title="4、访问jstlCcatch01.jsp"></a>4、访问jstlCcatch01.jsp</h5><p><img src="/images/image-20210411232830687.png"></p><p><img src="/images/image-20210411232856640.png"></p><h5 id="5、访问jstlCout01-jsp"><a href="#5、访问jstlCout01-jsp" class="headerlink" title="5、访问jstlCout01.jsp"></a>5、访问jstlCout01.jsp</h5><p><img src="/images/image-20210411232940260.png"></p><p><img src="/images/image-20210411233048123.png"></p><h4 id="回答问题-4"><a href="#回答问题-4" class="headerlink" title="回答问题"></a>回答问题</h4><h5 id="1、请问el是如何判空的"><a href="#1、请问el是如何判空的" class="headerlink" title="1、请问el是如何判空的"></a>1、请问el是如何判空的</h5><p>答：${empty 值} ，返回true ,表示为空字符串。</p><h5 id="2、那么jstl的引入指令是什么？"><a href="#2、那么jstl的引入指令是什么？" class="headerlink" title="2、那么jstl的引入指令是什么？"></a>2、那么jstl的引入指令是什么？</h5><p>答：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; <br></code></pre></td></tr></table></figure><h5 id="3、比较el和jstl标签的差别"><a href="#3、比较el和jstl标签的差别" class="headerlink" title="3、比较el和jstl标签的差别"></a>3、比较el和jstl标签的差别</h5><p>答：jstl标签是jsp封装通用的核心功能,一般用于遍历判断。而el一般是用来取单个值的。JSTL侧重逻辑处理，EL侧重展示数据</p><h5 id="4、使用jstl需要额外引入的包是什么？"><a href="#4、使用jstl需要额外引入的包是什么？" class="headerlink" title="4、使用jstl需要额外引入的包是什么？"></a>4、使用jstl需要额外引入的包是什么？</h5><p>答：</p><p><img src="/images/image-20210411233441752.png"></p><h5 id="5、使用jstl可以在界面上实现哪些逻辑，思考，如果是在html中，这些逻辑控制由什么来完成？"><a href="#5、使用jstl可以在界面上实现哪些逻辑，思考，如果是在html中，这些逻辑控制由什么来完成？" class="headerlink" title="5、使用jstl可以在界面上实现哪些逻辑，思考，如果是在html中，这些逻辑控制由什么来完成？"></a>5、使用jstl可以在界面上实现哪些逻辑，思考，如果是在html中，这些逻辑控制由什么来完成？</h5><p>答：可以用在向域对象添加数据，输出域对象数据，捕获异常，条件判断，遍历等地方，还可以进行格式化。html中可以由js代码完成。</p><h5 id="6、动态java-web-project额外导入jar包的方法是什么？在哪里获取这些需要的jar包？"><a href="#6、动态java-web-project额外导入jar包的方法是什么？在哪里获取这些需要的jar包？" class="headerlink" title="6、动态java web project额外导入jar包的方法是什么？在哪里获取这些需要的jar包？"></a>6、动态java web project额外导入jar包的方法是什么？在哪里获取这些需要的jar包？</h5><p>答：在lib中导入jar包，右键-&gt;Build Path-&gt;Add to Build Path。可以在网上找到并下载下来。</p><h3 id="Lab23"><a href="#Lab23" class="headerlink" title="Lab23"></a>Lab23</h3><h4 id="操作-4"><a href="#操作-4" class="headerlink" title="操作"></a>操作</h4><h5 id="1、查看web-xml文件-3"><a href="#1、查看web-xml文件-3" class="headerlink" title="1、查看web.xml文件"></a>1、查看web.xml文件</h5><p><img src="/images/image-20210411234251549.png"></p><p>index.jsp为默认界面</p><h5 id="2、运行"><a href="#2、运行" class="headerlink" title="2、运行"></a>2、运行</h5><p><img src="/images/image-20210411234544053.png"></p><p><img src="/images/image-20210411234552372.png"></p><h5 id="3、访问jstl"><a href="#3、访问jstl" class="headerlink" title="3、访问jstl"></a>3、访问jstl</h5><p><img src="/images/image-20210411234706123.png"></p><p><strong>访问jstl/param.jsp</strong>:</p><p><img src="/images/image-20210411234744092.png"></p><p><img src="/images/image-20210411234855218.png"></p><p>注意修改，添加加一层jstl/</p><p><img src="/images/image-20210411235012522.png"></p><p><strong>访问redirect.jsp页面：</strong></p><p>会被重定向到index界面，携带表单参数。</p><p><img src="/images/image-20210411235200739.png"></p><p><strong>访问remove.jsp:</strong></p><p><img src="/images/image-20210411235240853.png"></p><p><strong>访问score.jsp,输入100：</strong></p><p><img src="/images/image-20210411235331867.png"></p><p>代码通过多重逻辑判断实现功能</p><p><strong>访问url.jsp:</strong></p><p><img src="/images/image-20210411235501538.png"></p><p>使用了标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:url&gt;&lt;/c:url&gt;<br></code></pre></td></tr></table></figure><p><strong>访问set.jsp:</strong></p><p><img src="/images/image-20210411235716315.png"></p><p>分别从session和Bean中取值</p><p><strong>访问import.jsp:</strong></p><p><img src="/images/image-20210411235854974.png"></p><p>起到了类似include指令或jsp动作。</p><p><strong>访问foreach1.jsp:</strong></p><p><img src="/images/image-20210411235952708.png"></p><p><strong>访问foreach2.jsp:</strong></p><p><img src="/images/image-20210412000015576.png"></p><p><strong>访问forTokens.jsp:</strong></p><p><img src="/images/image-20210412000054880.png"></p><p>实现循环逻辑控制和字符串分割</p><h4 id="回答问题-5"><a href="#回答问题-5" class="headerlink" title="回答问题"></a>回答问题</h4><h5 id="1、请问jstl标签是如何引入的？基本的使用步骤是什么？"><a href="#1、请问jstl标签是如何引入的？基本的使用步骤是什么？" class="headerlink" title="1、请问jstl标签是如何引入的？基本的使用步骤是什么？"></a>1、请问jstl标签是如何引入的？基本的使用步骤是什么？</h5><p>答：导入jar包，引入标签，再使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jas">&lt;%@ taglib prefix&#x3D;&quot;c&quot; url&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;<br></code></pre></td></tr></table></figure><h5 id="2、复习，在jsp页中，基路径如何提取？"><a href="#2、复习，在jsp页中，基路径如何提取？" class="headerlink" title="2、复习，在jsp页中，基路径如何提取？"></a>2、复习，在jsp页中，基路径如何提取？</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>String path = request.getContextPath();<br>String basePath = request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br></code></pre></td></tr></table></figure><h5 id="3、在jstl里的choose…when…otherwise标签一般什么场合下用？"><a href="#3、在jstl里的choose…when…otherwise标签一般什么场合下用？" class="headerlink" title="3、在jstl里的choose…when…otherwise标签一般什么场合下用？"></a>3、在jstl里的choose…when…otherwise标签一般什么场合下用？</h5><p>答：实现条件判断时，等价于if-else。</p><h5 id="4、用户退出，一般如何在技术处理？"><a href="#4、用户退出，一般如何在技术处理？" class="headerlink" title="4、用户退出，一般如何在技术处理？"></a>4、用户退出，一般如何在技术处理？</h5><p>答：清除session；&lt;% session.invalidate(); %&gt;</p><h5 id="5、在jstl里，如何迭代处理列表或是数组里的数据？"><a href="#5、在jstl里，如何迭代处理列表或是数组里的数据？" class="headerlink" title="5、在jstl里，如何迭代处理列表或是数组里的数据？"></a>5、在jstl里，如何迭代处理列表或是数组里的数据？</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--遍历数组: --&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;age&quot;</span> items=<span class="hljs-string">&quot;&lt;%= ages %&gt;&quot;</span>&gt;<br>&lt;c:out value=<span class="hljs-string">&quot;$&#123;age&#125;&quot;</span> /&gt;<br>&lt;/c:forEach&gt;<br>&lt;br /&gt;<br>&lt;!--遍历List: --&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;name&quot;</span> items=<span class="hljs-string">&quot;&lt;%= names %&gt;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span> /&gt;<br>&lt;/c:forEach&gt;<br>&lt;br /&gt;<br><br>&lt;!--遍历Set: --&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;entry&quot;</span> items=<span class="hljs-string">&quot;&lt;%= set %&gt;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;entry&#125;&quot;</span> /&gt;<br>&lt;/c:forEach&gt;<br>&lt;br /&gt;<br><br>&lt;!--遍历Map: --&gt;<br>&lt;table&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;Key&lt;/th&gt;<br>        &lt;th&gt;Value&lt;/th&gt;<br>    &lt;/tr&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;entry&quot;</span> items=<span class="hljs-string">&quot;&lt;%= map %&gt;&quot;</span>&gt;<br>&lt;tr&gt;<br>&lt;td&gt;&lt;c:out value=&quot;$&#123;entry.key&#125;&quot;/&gt;&lt;/td&gt;<br>&lt;td&gt;&lt;c:out value=&quot;$&#123;entry.value&#125;&quot;/&gt;&lt;/td&gt;<br>&lt;/tr&gt;<br>&lt;/c:forEach&gt;<br>&lt;/table&gt;<br>&lt;br /&gt;<br></code></pre></td></tr></table></figure><h5 id="6、在jstl里，forEach签和forTokens签的异同有哪些？"><a href="#6、在jstl里，forEach签和forTokens签的异同有哪些？" class="headerlink" title="6、在jstl里，forEach签和forTokens签的异同有哪些？"></a>6、在jstl里，forEach签和forTokens签的异同有哪些？</h5><p>答：forEach每次直接获取单个元素进行处理，forTokens是将整体的字符串分割后单独处理。</p><h5 id="7、在jstl里，if签适合什么场合下使用？‘"><a href="#7、在jstl里，if签适合什么场合下使用？‘" class="headerlink" title="7、在jstl里，if签适合什么场合下使用？‘"></a>7、在jstl里，if签适合什么场合下使用？‘</h5><p>答：判断时使用。</p><h5 id="8、使用import可以包含jsp文件的哪些内容？"><a href="#8、使用import可以包含jsp文件的哪些内容？" class="headerlink" title="8、使用import可以包含jsp文件的哪些内容？"></a>8、使用import可以包含jsp文件的哪些内容？</h5><p>答：可以将其他jsp页面导入进来。</p><h5 id="9、使用jstl里的out签和使用el输出上，有何差别？"><a href="#9、使用jstl里的out签和使用el输出上，有何差别？" class="headerlink" title="9、使用jstl里的out签和使用el输出上，有何差别？"></a>9、使用jstl里的out签和使用el输出上，有何差别？</h5><p>答：jstl里的out签可以选择忽略其他标签的作用。</p><h5 id="10、在jsp里如何实现重定向跳转，跳转时如何带上参数？"><a href="#10、在jsp里如何实现重定向跳转，跳转时如何带上参数？" class="headerlink" title="10、在jsp里如何实现重定向跳转，跳转时如何带上参数？"></a>10、在jsp里如何实现重定向跳转，跳转时如何带上参数？</h5><p>答：使用&lt;c:param name=”***” value=”***”&gt;</c:param>标签带上参数。</p><h5 id="11、在jstl里，set签设置的值的作用域是如何指定的？"><a href="#11、在jstl里，set签设置的值的作用域是如何指定的？" class="headerlink" title="11、在jstl里，set签设置的值的作用域是如何指定的？"></a>11、在jstl里，set签设置的值的作用域是如何指定的？</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set var=&quot;num&quot; value=&quot;12&quot; scope=&quot;page&quot;&gt;&lt;/c:set&gt;<br>&lt;!--不指定scope，顺序为pageScope-&gt;requestScope-&gt;sessionScope-&gt;applicationScope --&gt;<br></code></pre></td></tr></table></figure><h3 id="Lab24"><a href="#Lab24" class="headerlink" title="Lab24"></a>Lab24</h3><h4 id="操作-5"><a href="#操作-5" class="headerlink" title="操作"></a>操作</h4><h5 id="1、运行"><a href="#1、运行" class="headerlink" title="1、运行"></a>1、运行</h5><p><strong>computer</strong></p><p>showResult.jsp需要修改</p><p><img src="/images/image-20210412002739470.png"></p><p>否则会404</p><p><img src="/images/image-20210412002838355.png"></p><p><img src="/images/image-20210412002849727.png"></p><p><img src="/images/image-20210412002959649.png"></p><p>运算后结果变小数，因为javabean中封装的是double</p><p><strong>files</strong></p><p><img src="/images/image-20210412003200166.png"></p><p>准备好后读取</p><p><img src="/images/image-20210412003333746.png"></p><p><strong>showFile.jsp</strong></p><p><img src="/images/image-20210412003438794.png"></p><p><strong>triangle</strong></p><p><img src="/images/image-20210412003548645.png"></p><p><img src="/images/image-20210412003556335.png"></p><p>代码：</p><p><img src="/images/image-20210412003613699.png"></p><h4 id="回答问题-6"><a href="#回答问题-6" class="headerlink" title="回答问题"></a>回答问题</h4><h4 id="jsp与html的使用："><a href="#jsp与html的使用：" class="headerlink" title="jsp与html的使用："></a>jsp与html的使用：</h4><p>HTML页面是静态页面，也就是事先由用户写好放在服务器上，固定内容，不会变，由web服务器向客户端发送的，所以一般固定的页面就会使用HTML；JSP页面是有JSP容器执行该页面的Java代码部分然后实时生成动态页面，可动态更新页面上的内容。所以要更新数据的动态页面使用jsp。</p><h2 id="二、上传至相应目录"><a href="#二、上传至相应目录" class="headerlink" title="二、上传至相应目录"></a>二、上传至相应目录</h2><p><img src="/images/image-20210412005632922.png"></p><h2 id="三、遇到的问题"><a href="#三、遇到的问题" class="headerlink" title="三、遇到的问题"></a>三、遇到的问题</h2><p>错误：在计算加减法功能中出现404</p><p>解决：查看提交路径，发现没有在本级目录，删掉后即可正常使用。</p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>对EL表达式和JSTL做了一下总结</p><h3 id="1、EL表达式"><a href="#1、EL表达式" class="headerlink" title="1、EL表达式"></a>1、EL表达式</h3><blockquote><p>Expression Language表达式语言</p><p>代替jsp的数据访问（pageContext，request，session，application）</p><p>前提：有setAttribute；EL相当于简化getAttribute</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br>%&gt;<br>$&#123;name&#125;<br></code></pre></td></tr></table></figure><h4 id="（1）查找顺序"><a href="#（1）查找顺序" class="headerlink" title="（1）查找顺序"></a>（1）查找顺序</h4><p>pageContext–&gt;request–&gt;session–&gt;application–&gt;null</p><h4 id="（2）指定查找"><a href="#（2）指定查找" class="headerlink" title="（2）指定查找"></a>（2）指定查找</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$(pageScope.name)<br>$(requestScope.name)<br>$(sessionScope.name)<br>$(applicationScope.name)<br></code></pre></td></tr></table></figure><h4 id="（3）数据级联"><a href="#（3）数据级联" class="headerlink" title="（3）数据级联"></a>（3）数据级联</h4><blockquote><p>若存入的是一个对象，在使用$(object.variable)时，取出来的不是object里面的variable变量，而是自动调用getVariable()方法，取返回值，所以类中需要写get方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<br>User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">19</span>);<br>session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>%&gt;<br>&lt;!-- <span class="hljs-number">100</span> --&gt;<br>$(user.age);<br>Copy<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>    User(String name,Integer age)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">setIName</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）EL执行表达式"><a href="#（4）EL执行表达式" class="headerlink" title="（4）EL执行表达式"></a>（4）EL执行表达式</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&amp;&amp; and<br>|| or<br>! not<br><span class="hljs-section">== eq</span><br>!= ne<br>&lt; &amp;lt<br>&gt; &amp;gt<br>&lt;= le<br>&gt;= ge<br>empty 变量为null，length为0的String，size为0的集合<br></code></pre></td></tr></table></figure><h3 id="2、JSTL"><a href="#2、JSTL" class="headerlink" title="2、JSTL"></a>2、JSTL</h3><blockquote><p>JSP Standard Tag Library JSP标准标签库，是JSP为开发者提供的一系列标签</p><p>可以完成循环遍历集合，让代码简洁，不出现JSP脚本穿插情况</p><p>JSTL侧重逻辑处理，EL侧重展示数据</p></blockquote><h4 id="（1-使用"><a href="#（1-使用" class="headerlink" title="（1)使用"></a>（1)使用</h4><p>需要先导入jar包（jstl.jar和standard.jar）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.zll.User&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">10618</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">17</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">35</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;!--（<span class="hljs-number">2</span>）jsp页面导入--&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">19</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">18</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">21</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;赵六&quot;</span>,<span class="hljs-number">20</span>));<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br>%&gt;<br>&lt;table&gt;<br>    &lt;thead&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;姓名&lt;/th&gt;<br>        &lt;th&gt;年龄&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>        &lt;!--(<span class="hljs-number">3</span>)使用--&gt;<br>    &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/c:forEach&gt;<br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="（2）优点"><a href="#（2）优点" class="headerlink" title="（2）优点"></a>（2）优点</h4><blockquote><p>提供了统一的标签</p><p>可用于编写各种动态功能</p></blockquote><h4 id="（3）核心标签库常用标签"><a href="#（3）核心标签库常用标签" class="headerlink" title="（3）核心标签库常用标签"></a>（3）核心标签库常用标签</h4><ol><li><p>set：向域对象中添加数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set var=&quot;num&quot; value=&quot;12&quot; scope=&quot;page&quot;&gt;&lt;/c:set&gt;<br>&lt;!--不指定scope，顺序为pageScope-&gt;requestScope-&gt;sessionScope-&gt;applicationScope --&gt;<br></code></pre></td></tr></table></figure><blockquote><p>不能存对象，只能是字符串，但是可以修改已存入的对象</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set target=&quot;$&#123;user&#125;&quot; property=&quot;name&quot; value=&quot;嘿嘿&quot;&gt;&lt;/c:set&gt;<br>$&#123;user.name&#125;<br></code></pre></td></tr></table></figure></li><li><p>out：输出域对象中的数据</p><blockquote><p>与${}不同，当没有找到要输出的值时，可以设定默认值。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:out value=&quot;$&#123;name&#125;&quot; default=&quot;what&quot;&gt;&lt;/c:out&gt;<br></code></pre></td></tr></table></figure></li><li><p>catch：捕获异常</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">catch</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;err&quot;</span>&gt;<br>    &lt;%<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>    %&gt;<br>&lt;/c:catch&gt;<br></code></pre></td></tr></table></figure></li><li><p>条件判断</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set var=&quot;a1&quot; value=&quot;1&quot;&gt;&lt;/c:set&gt;<br>&lt;c:set var=&quot;a2&quot; value=&quot;2&quot;&gt;&lt;/c:set&gt;<br>&lt;!-- <span class="hljs-keyword">if</span> --&gt;<br>&lt;c:if test=&quot;$&#123;a1&lt;a2&#125;&quot;&gt;ok&lt;/c:if&gt;<br>&lt;c:if test=&quot;$&#123;a1&gt;a2&#125;&quot;&gt;no&lt;/c:if&gt;<br>&lt;!-- <span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> --&gt;<br>&lt;c:choose&gt;<br>    &lt;c:when test=&quot;$&#123;a1&lt;a2&#125;&quot;&gt;ok&lt;/c:when&gt;<br>    &lt;c:otherwise&gt;no&lt;/c:otherwise&gt;<br>&lt;/c:choose&gt;<br></code></pre></td></tr></table></figure></li><li><p>遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--还有一些其他属性，比如begin、step什么的,不常用--&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;<br>    &lt;!--count从<span class="hljs-number">1</span>开始，index从<span class="hljs-number">0</span>开始--&gt;<br>$&#123;user.count&#125;-$&#123;user.name&#125;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure></li></ol><h4 id="（4）格式化标签库常用标签"><a href="#（4）格式化标签库常用标签" class="headerlink" title="（4）格式化标签库常用标签"></a>（4）格式化标签库常用标签</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--引入--&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/fml&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><ol><li><p>formatDate：格式化时间</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;c:formatDate <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;date&#125;</span>&quot;</span> <span class="hljs-attribute">pattern</span>=<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>&gt;&lt;/c:formatDate&gt;<br>Copy<br></code></pre></td></tr></table></figure></li><li><p>formatNumber：格式化数值</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;c:formatNumber <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;1234.79066&quot;</span> <span class="hljs-attribute">maxIntegerDigits</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attribute">maxFractionDigits</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;&lt;/c:formatNumber&gt;<br>Copy<br></code></pre></td></tr></table></figure></li></ol><h4 id="（5）函数标签库常用标签"><a href="#（5）函数标签库常用标签" class="headerlink" title="（5）函数标签库常用标签"></a>（5）函数标签库常用标签</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;<br>Copy<br>&lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;Java,C&quot;</span>);<br>%&gt;<br>$&#123;c:contains(info,<span class="hljs-string">&quot;Python&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:startsWith(info,<span class="hljs-string">&quot;Java&quot;</span> )&#125;&lt;br/&gt;<br>$&#123;c:endsWith(info, <span class="hljs-string">&quot;C&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:indexOf(info, <span class="hljs-string">&quot;va&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:replace(info, <span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span> )&#125;&lt;br/&gt;<br>$&#123;c:substring(info, <span class="hljs-number">2</span>,<span class="hljs-number">3</span> )&#125;&lt;br/&gt;<br>$&#123;c:split(info, <span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>]&#125;-$&#123;c:split(info, <span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">2</span>]&#125;&lt;br/&gt;<br><br>&lt;!--<br>    <span class="hljs-keyword">false</span><br>    <span class="hljs-keyword">true</span><br>    <span class="hljs-keyword">true</span><br>    <span class="hljs-number">2</span><br>    Java,Python<br>    v<br>    C-<br>--&gt;<br></code></pre></td></tr></table></figure><p>本次上机对el和jstl有了深刻的理解，还有对jsp直接处理请求与servlet控制器处理请求有了比较和对比。本次的上级任务较多，花了比较的的时间实践，收获还是很大的。</p>]]></content>
    
    
    <categories>
      
      <category>JAVAEE上机小结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JAVAEE】学习五：过滤器</title>
    <link href="/2021/04/01/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%BA%94%EF%BC%9A%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2021/04/01/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%BA%94%EF%BC%9A%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="【JAVAEE】学习五：过滤器"><a href="#【JAVAEE】学习五：过滤器" class="headerlink" title="【JAVAEE】学习五：过滤器"></a>【JAVAEE】学习五：过滤器</h1><h2 id="一、Filter介绍"><a href="#一、Filter介绍" class="headerlink" title="一、Filter介绍"></a>一、Filter介绍</h2><blockquote><p>功能：</p><p>1.用来拦截传入的请求和处理</p><p>2.修改或以某种方式处理客户端和服务器端的数据流</p></blockquote><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><blockquote><p>Filter是JavaWeb提供的一个接口，实现接口即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//servlet</span><br><span class="hljs-keyword">package</span> com.zll;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        String name = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//过滤器</span><br><span class="hljs-keyword">package</span> filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;过滤器工作...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;放行...&quot;</span>);<br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--jsp--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;登录&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;/login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><blockquote><p>注意：选择Filter时不要选错了</p></blockquote><p><img src="/images/image-20210401173303872.png"></p><p>运行结果</p><p><img src="/images/image-20210401174406595.png"></p><h2 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h2><blockquote><p>当Tomcat启动时，通过反射机制调用Filter的无参构造函数创建实例化对象，同时调用init方法实现初始化，doFilter方法根据情况调用多次，当Tomcat服务关闭的时候，调用destory来销毁Filter对象。</p></blockquote><ul><li>无参构造函数:只调用一次，当Tomcat启动时调用(Filter一定要进行配置)。</li><li>init方法:只调用一次，当Filter的实例化对象创建完成之后调用。</li><li>doFilter:调用多次，访问Filter的业务逻辑都写在doFilter中。</li><li>destory:只调用一次，Tomcat关闭时调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造函数&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;过滤器工作...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;放行...&quot;</span>);<br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20210401175035127.png"></p><h2 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h2><p>1、同时多个Filter，执行的顺序由web.xml配置顺序来决定，因为web.xml是顺序读取的。</p><p>2、Filter也可以用注解方式配置，@WebFilter。但不能决定过滤器先后顺序。</p><p>3、使用场景：</p><ul><li>统一处理中文乱码</li><li>屏蔽敏感词</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//过滤器</span><br><span class="hljs-keyword">package</span> filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造函数&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        String name = servletRequest.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        name = name.replaceAll(<span class="hljs-string">&quot;敏感&quot;</span>,<span class="hljs-string">&quot;**&quot;</span>);<br>        servletRequest.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,name);<br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//servlet</span><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        String name = (String) req.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20210401181103208.png"></p><ul><li><p>控制资源访问权限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--登录--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;登录2&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;/login2&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>    密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//登录servlet</span><br><span class="hljs-keyword">package</span> com.zll;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/login2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String name = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String pwd = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-keyword">if</span>(name.equals(<span class="hljs-string">&quot;admin&quot;</span>)&amp;&amp;pwd.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            HttpSession session = req.getSession();<br>            session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--资源界面--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;资源&lt;/h3&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//过滤器</span><br><span class="hljs-meta">@WebFilter(&quot;/resource.jsp&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">download</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        HttpServletRequest request = (HttpServletRequest) servletRequest;<br>        HttpSession session = request.getSession();<br>        String name = (String) session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">if</span>(name==<span class="hljs-keyword">null</span>)&#123;<br>            HttpServletResponse response = (HttpServletResponse) servletResponse;<br>            response.sendRedirect(<span class="hljs-string">&quot;/login2.jsp&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaEE】第三次上机小结</title>
    <link href="/2021/04/01/%E3%80%90JavaEE%E3%80%91%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/04/01/%E3%80%90JavaEE%E3%80%91%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaEE】第三次上机小结"><a href="#【JavaEE】第三次上机小结" class="headerlink" title="【JavaEE】第三次上机小结"></a>【JavaEE】第三次上机小结</h1><h2 id="一、参考老师的war包建立项目"><a href="#一、参考老师的war包建立项目" class="headerlink" title="一、参考老师的war包建立项目"></a>一、参考老师的war包建立项目</h2><h3 id="Lab13"><a href="#Lab13" class="headerlink" title="Lab13"></a>Lab13</h3><h4 id="1、分析代码"><a href="#1、分析代码" class="headerlink" title="1、分析代码"></a>1、分析代码</h4><p>（1）在web.xml中配置过滤器，对url进行过滤</p><p><img src="/images/java31.png"></p><p>（2）首先进入拦截器，拦截器中分为预设，放行，善后三部分，在放行后可到达Servlet，之后会回到善后部分。</p><p><img src="/images/java32.png"></p><p>（3）修改代码，在页面输出</p><p><img src="/images/java33.png"></p><p><img src="/images/java34.png"></p><h3 id="Lab14"><a href="#Lab14" class="headerlink" title="Lab14"></a>Lab14</h3><h4 id="1、分析代码-1"><a href="#1、分析代码-1" class="headerlink" title="1、分析代码"></a>1、分析代码</h4><p>（1）有两个过滤器，顺序是按照在web.xml中的配置顺序来执行的，先执行01，在执行02</p><p><img src="/images/java35.png"></p><p>（2）运行程序，观察输出的顺序</p><p><img src="/images/java36.png"></p><p>（3）调整两个过滤器位置（修改在web.xml中的配置）</p><p><img src="/images/java37.png"></p><p>（4）观察输出</p><p><img src="/images/java38.png"></p><h4 id="2、回答问题"><a href="#2、回答问题" class="headerlink" title="2、回答问题"></a>2、回答问题</h4><p>（1）那么，多个过滤器存在时，怎么设置谁先过滤，谁后过滤呢？</p><p>回答：通过web.xml的配置顺序进行</p><p>（2）思考，周边业务【即过滤过程】本身有没有先后顺序<br>    如果：核心业务是约会，之前是先洗漱，再化妆，还是可以先化妆，再洗漱？<br>    如果：核心业务是吃饭，之前是先拿碗，还是先拿筷子？</p><p>回答：我的理解是，一是根据核心业务来说，如果核心业务需要周边服务按照一定顺序，那么周边服务就要存在先后；但如果核心业务不需要，周边业务就可以随机发生。二是根据基本处理逻辑，比如核心业务是约会，周边服务发生在核心业务之前，而但从这两个周边业务来看，一般合理的处理逻辑是先洗漱再化妆，所以有时需要根据一定的逻辑处理。</p><h3 id="Lab15"><a href="#Lab15" class="headerlink" title="Lab15"></a>Lab15</h3><h4 id="1、分析代码-2"><a href="#1、分析代码-2" class="headerlink" title="1、分析代码"></a>1、分析代码</h4><p>（1）先进入欢迎页面，然后跳转到登录页面，提交后先进入过滤器，再进入登入LoginServlet</p><p>（2）首先得明白，在服务器端是不能直接删除客户端的cookie。</p><ul><li><p>1它采取的方式是在服务端设置cookie.setMaxAge(0)，</p><p>这一步是设置cookie立刻过期</p></li><li><p>2 再通过 response.addCookie(cookie) 将这个值返回到客户端后，</p></li><li><p>3 客户端就知道自己的cookie没用了，再删除它。 </p></li><li><p>4 故 response.addCookie(cookie); 不能省略，它是一个告知的功能</p></li></ul><p>（3）吐槽，登录密码123546太逗了，我找了半天原因登不上，原来是因为我输入的是123456</p><p>（4）注意，不同的浏览器，不能自动登录</p><h4 id="2、回答问题-1"><a href="#2、回答问题-1" class="headerlink" title="2、回答问题"></a>2、回答问题</h4><p>(1)硬判断，写死了用户名和密码，思考真实的业务场境，如何取用户名和密码判断？</p><p>回答：真实场景中，客户端会在请求时携带用户名与密码，可以通过getInitParameter获取</p><p>(2) 复习pojo如何封装？</p><p>回答：使用@RequestMapping标签会自动封装pojo类，在控制器中，前端请求过来的参数和pojo类里参数名一致时，会默认封装到pojo类里面，如下。</p><p><strong>表单</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Pojo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;/pojo.do&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br&gt;<br>    密码：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>User类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> username;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.username = username;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> password;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.password = password;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zll.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/pojo.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span><span class="hljs-params">(User user)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;用户名：&quot;</span>+user.getUsername());<br>        System.out.println(<span class="hljs-string">&quot;密码：&quot;</span>+user.getAge());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;哈哈&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.1&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 配置核心控制器 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zll.MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>pojo.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p> (3)复习过滤器如何配置？如何设置通配？</p><p>回答：在web.xml中配置，使用*设置通配。</p><p>(4)登录业务一般要做什么？</p><p>回答：判断表单信息，判断用户权限，按需操作cookie，比如取值存储等。</p><p>(5)退出业务一般要做什么？</p><p>回答：跳转页面，设置用户相关信息失效等。</p><p>(6)cookie是什么，一般用于干什么？它在客户端，但服务器端如何控制它？</p><blockquote><p>cookie存在于客户端，是存在服务器本地的一个小型文本文件</p><p>java提供了一个cookie类。</p></blockquote><p><strong>使用</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--创建：key，value --&gt;<br>&lt;!-- 不建议存入中文 --&gt;<br>&lt;% Cookie newCookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>); %&gt;<br>&lt;!-- 添加 --&gt;<br>&lt;% response.addCookie(newCookie); %&gt;<br><br>&lt;!-- 取出 --&gt;<br>&lt;% Cookie cookies[] = request.getCookies(); %&gt;<br>&lt;!-- 遍历 --&gt;<br>&lt;%<br>    <span class="hljs-keyword">for</span>(Cookie cookie:cookies)&#123;<br>        <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;name&quot;</span>))&#123;<br>            out.write(cookie.getName()+<span class="hljs-string">&#x27;:&#x27;</span>+cookie.getValue());<br>        &#125;<br>    &#125;<br>%&gt;<br>Copy<br></code></pre></td></tr></table></figure><p><strong>常用方法</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-comment">//1.设置失效时间，单位为秒，默认-1，浏览器关闭时失效</span><br>cookie.setMaxAge(<span class="hljs-number">1000</span>);<br><span class="hljs-comment">//2.查看失效时间</span><br><span class="hljs-keyword">int</span> times = cookie.getMaxAge();<br><span class="hljs-comment">//3.获取cookie的name</span><br>String name = cookie.getName();<br><span class="hljs-comment">//4.获取cookie的value</span><br>String value = cookie.getValue();<br>!%&gt;<br>Copy<br></code></pre></td></tr></table></figure><p><strong>session与cookie比较</strong></p><table><thead><tr><th></th><th></th><th>保存地点</th><th>保存类型</th><th>失效时间</th><th>其他</th></tr></thead><tbody><tr><td>session</td><td></td><td>服务器</td><td>object</td><td>会话结束</td><td>保存重要信息</td></tr><tr><td>cookie</td><td></td><td>浏览器</td><td>String</td><td>浏览器关闭，长期保存，与会话无关</td><td>保存不重要信息</td></tr></tbody></table><blockquote><p>session</p><ul><li>存取：setAttribute(),getAttribute()。</li><li>退出登录：session.invalidate()。</li><li>生命周期：</li></ul><blockquote><ul><li>服务端：web应用重启就销毁。</li><li>客户端：服务器关闭就销毁。</li></ul></blockquote><ul><li><p>cookie</p></li><li><p>存取：response.addCookie(),request.getCookies()。</p></li><li><p>退出登录：cookie.setMaxAge(0);</p></li><li><p>生命周期：</p><blockquote><ul><li>服务端：不随服务器重启而销毁。</li><li>客户端：默认浏览器关闭销毁，但可以通过setMaxAge()来设置。</li></ul></blockquote></li></ul></blockquote><p>(7)自动登录的简单原理是什么？</p><p>回答：首次登录时，进入login.jsp页面，进行了正确的密码和账号输入后，会到login.servlet然后加建立新的cookie，储存登录时间。之后响应到index.jsp，显示登陆成功。第二次登录已经存在了cookie，在过滤器autologin.filter中遍历cookie，进行账号和密码的匹配，运行程序后则直接进入到index.jsp登陆成功页面。</p><p>(8)过滤器如何完成自动登录的预先处理动作，再转给Servlet控制?</p><p>回答：在访问Servlet时会先进入过滤器，执行代码，chain.doFilter(request, response);用于放行，可以转到响应的Servlet。</p><p>(9)第一次就能自动登录吗？</p><p>回答：不能，第一次没有存cookie。</p><h3 id="Lab16"><a href="#Lab16" class="headerlink" title="Lab16"></a>Lab16</h3><h4 id="1、分析代码-3"><a href="#1、分析代码-3" class="headerlink" title="1、分析代码"></a>1、分析代码</h4><p>（1）OnlineListener.java</p><p>使用了作用域对象application，展示给用户数据</p><p>（2）实现显示当前在线人数，由超链接跳转页面（登出）</p><p>多个浏览器，可以同时记录在线人数（关闭浏览器和退出登陆）</p><p>（3）剩余的过滤器展示一个生命周期，在进行代码的调整之后</p><p>其中还包含有Myfilter，通配符的过滤器</p><h4 id="2、回答问题-2"><a href="#2、回答问题-2" class="headerlink" title="2、回答问题"></a>2、回答问题</h4><p>（1）过滤器和控制器的差别？</p><p>回答：过滤器可以认为是Servlet的一种“加强版”，它主要用于对用户请求进行预处理，也可以对HttpServletResponse进行后处理，是个典型的处理链。Filter也可以对用户请求生成响应，这一点与Servlet相同，但实际上很少会使用Filter向用户请求生成响应。使用Filter完整的流程是：Filter对用户请求进行预处理，接着将请求交给Servlet进行预处理并生成响应，最后Filter再对服务器响应进行后处理。</p><p>Filter作用：</p><ul><li>在HttpServletRequest到达Servlet之前，拦截客户的HttpServletRequest。</li><li>根据需要检查HttpServletRequest，也可以修改HttpServletRequest头和数据。</li><li>在HttpServletResponse到达客户端之前，拦截HttpServletResponse。</li><li>根据需要检查HttpServletResponse，也可以修改HttpServletResponse头和数据。</li></ul><p>（2）过滤器和控制器的url-pattern是什么关系？</p><p>回答：过滤器所用的url应该与控制器的url相同。</p><p>（3）过滤器配置时，使用通配符在url-pattern中的作用是什么？</p><p>回答：全局过滤器。</p><p>（4）本例的监听器本质上是在监测容器的什么事件引发的什么对象的变化？</p><p>回答：是检测容器的session域发生增加或减少，引发的application作用域中count数值的增加与减少。</p><h3 id="Lab17"><a href="#Lab17" class="headerlink" title="Lab17"></a>Lab17</h3><h4 id="1、分析代码-4"><a href="#1、分析代码-4" class="headerlink" title="1、分析代码"></a>1、分析代码</h4><p>（1）web.xml设置了多个过滤器，控制器，还有会话过期时间设置</p><p><img src="/images/java39.png"></p><p>（2）全局过滤器，访问就会进入</p><p>（3）登入过滤器，从session中取值，判断是否登录</p><p><img src="/images/java310.png"></p><p>（4）MyFilte演示生命周期</p><p><img src="/images/java311.png"></p><h4 id="2、回答问题-3"><a href="#2、回答问题-3" class="headerlink" title="2、回答问题"></a>2、回答问题</h4><p>（1）本例中的javabean在哪里完成定义的？在哪里用到了？</p><p>（1.1）这个javabean写得规范吗？</p><p>回答：不规范</p><p>（1.2）javabean有哪些规范？</p><p>回答：</p><ul><li>必须要有一个公共无参构造（写了带参构造必须添加一个，都不写则有默认）</li><li>Javabean类不应有公共属性，属性都应该是private.</li><li>为私有（private声明）属性提供符合命名规范的get/set方法</li><li>应该要实现serializeable 接口</li></ul><p>（1.3）请自行将该bean改造成规范的javabean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-keyword">private</span> String name = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">private</span> String pass = <span class="hljs-keyword">null</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name,String pass)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.pass = pass;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPass</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> pass;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPass</span><span class="hljs-params">(String pass)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.pass = pass;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）过滤器链如何配置？</p><p>回答：在web中配置好过滤器的过滤顺序和指定过滤的文件，并且运用chain对过滤器进行传递。</p><p>（3）监听器如何实现相应的监听动作？</p><p>回答：设置了参数后，利用参数的传递进行监听。</p><p>（4）用户会话如何设置过期时间？</p><p>回答：</p><ul><li>主动过期（退出登录）：执行“**&lt;%session.invalidate();%&gt;**”代码，使session域失效。</li><li>被动过期：用户长时间没有操作，系统到时间自动过期。</li></ul><p>（5）服务器上，在控制器，即Servlet中实现包含和转发是如何实现的？客户端知道吗？</p><p>回答：通过request.getRequestDispatcher(“/first.jsp”).forward(request, response);来实现客户端不知道。</p><p>（6）响应对象如何实现让客户端重定向，再发请求？</p><p>回答：通过sendRedirect(String path)重定向。</p><p>（7）对于过滤器和控制器的配置，web.xml方式和注解方式，应该如何实现，应该如何选择？</p><p>回答：web.xml方式是在文件中进行配置；注解方式是在过滤器和控制器添加“@WebFilter(“/xxxxx)”或“@WebServlet(“/xxxxx)”来注解。现阶段建议选用web.xml进行注解，便于观察和学习。</p><h2 id="二、已上传至相应目录"><a href="#二、已上传至相应目录" class="headerlink" title="二、已上传至相应目录"></a>二、已上传至相应目录</h2><p><img src="/images/java312.png"></p><h2 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h2><h3 id="（一）遇到的问题"><a href="#（一）遇到的问题" class="headerlink" title="（一）遇到的问题"></a>（一）遇到的问题</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p><strong>问题描述</strong>：Tomact启动时端口被占用</p><p><img src="/images/java313.png"></p><p><strong>解决思路和方法</strong>：打开cmd，输入netstat -ano|findstr 8080，查看被占用的PID，在任务管理器中找到相应的程序，结束进程</p><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p><strong>问题描述</strong>：过滤器换顺序后乱码</p><p><img src="/images/java314.png"></p><p><strong>解决思路和方法</strong>：考虑是过滤器中response.setContentType(“text/html;charset=utf-8”);只在第一个过滤器中存在，第二个中没有，调换顺序后失效，于是在第二个中也加入，解决。</p><h4 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h4><p><strong>问题描述</strong>：访问LoginAllServlet.java出错</p><p><strong>解决思路和方法</strong>：在web.xml进行注释的解除和添加注释</p><p><img src="/images/java315.png"></p><h3 id="（二）学习小结与心得"><a href="#（二）学习小结与心得" class="headerlink" title="（二）学习小结与心得"></a>（二）学习小结与心得</h3><p>本次学习，学习到了一些新的知识，除了上述阐述的，还有EL表达式和JSTL表达式</p><h4 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h4><blockquote><p>Expression Language表达式语言</p><p>代替jsp的数据访问（pageContext，request，session，application）</p><p>前提：有setAttribute；EL相当于简化getAttribute</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br>%&gt;<br>$&#123;name&#125;<br></code></pre></td></tr></table></figure><h5 id="1、查找顺序"><a href="#1、查找顺序" class="headerlink" title="1、查找顺序"></a>1、查找顺序</h5><p>pageContext–&gt;request–&gt;session–&gt;application–&gt;null</p><h5 id="2、指定查找"><a href="#2、指定查找" class="headerlink" title="2、指定查找"></a>2、指定查找</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$(pageScope.name)<br>$(requestScope.name)<br>$(sessionScope.name)<br>$(applicationScope.name)<br></code></pre></td></tr></table></figure><h5 id="3、数据级联"><a href="#3、数据级联" class="headerlink" title="3、数据级联"></a>3、数据级联</h5><blockquote><p>若存入的是一个对象，在使用$(object.variable)时，取出来的不是object里面的variable变量，而是自动调用getVariable()方法，取返回值，所以类中需要写get方法。</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">19</span>);<br>session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>%&gt;<br>&lt;!-- <span class="hljs-number">100</span> --&gt;<br>$(user.age);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>    User(String name,Integer age)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">setIName</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、EL执行表达式"><a href="#4、EL执行表达式" class="headerlink" title="4、EL执行表达式"></a>4、EL执行表达式</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&amp;&amp; and<br>|| or<br>! not<br><span class="hljs-section">== eq</span><br>!= ne<br>&lt; &amp;lt<br>&gt; &amp;gt<br>&lt;= le<br>&gt;= ge<br>empty 变量为null，length为0的String，size为0的集合<br></code></pre></td></tr></table></figure><h4 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h4><blockquote><p>JSP Standard Tag Library JSP标准标签库，是JSP为开发者提供的一系列标签</p><p>可以完成循环遍历集合，让代码简洁，不出现JSP脚本穿插情况</p><p>JSTL侧重逻辑处理，EL侧重展示数据</p></blockquote><h5 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h5><p>（1）需要先导入jar包（jstl.jar和standard.jar）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.zll.User&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">10618</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">17</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">35</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;!--（<span class="hljs-number">2</span>）jsp页面导入--&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">19</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">18</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">21</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;赵六&quot;</span>,<span class="hljs-number">20</span>));<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br>%&gt;<br>&lt;table&gt;<br>    &lt;thead&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;姓名&lt;/th&gt;<br>        &lt;th&gt;年龄&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>        &lt;!--(<span class="hljs-number">3</span>)使用--&gt;<br>    &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/c:forEach&gt;<br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h5 id="2、优点"><a href="#2、优点" class="headerlink" title="2、优点"></a>2、优点</h5><blockquote><p>提供了统一的标签</p><p>可用于编写各种动态功能</p></blockquote><h5 id="3、核心标签库常用标签"><a href="#3、核心标签库常用标签" class="headerlink" title="3、核心标签库常用标签"></a>3、核心标签库常用标签</h5><ol><li><p>set：向域对象中添加数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set var=&quot;num&quot; value=&quot;12&quot; scope=&quot;page&quot;&gt;&lt;/c:set&gt;<br>&lt;!--不指定scope，顺序为pageScope-&gt;requestScope-&gt;sessionScope-&gt;applicationScope --&gt;<br></code></pre></td></tr></table></figure><blockquote><p>不能存对象，只能是字符串，但是可以修改已存入的对象</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set target=&quot;$&#123;user&#125;&quot; property=&quot;name&quot; value=&quot;嘿嘿&quot;&gt;&lt;/c:set&gt;<br>$&#123;user.name&#125;<br></code></pre></td></tr></table></figure></li><li><p>out：输出域对象中的数据</p><blockquote><p>与${}不同，当没有找到要输出的值时，可以设定默认值。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:out value=&quot;$&#123;name&#125;&quot; default=&quot;what&quot;&gt;&lt;/c:out&gt;<br></code></pre></td></tr></table></figure></li><li><p>catch：捕获异常</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">catch</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;err&quot;</span>&gt;<br>    &lt;%<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>    %&gt;<br>&lt;/c:catch&gt;<br></code></pre></td></tr></table></figure></li><li><p>条件判断</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set var=&quot;a1&quot; value=&quot;1&quot;&gt;&lt;/c:set&gt;<br>&lt;c:set var=&quot;a2&quot; value=&quot;2&quot;&gt;&lt;/c:set&gt;<br>&lt;!-- <span class="hljs-keyword">if</span> --&gt;<br>&lt;c:if test=&quot;$&#123;a1&lt;a2&#125;&quot;&gt;ok&lt;/c:if&gt;<br>&lt;c:if test=&quot;$&#123;a1&gt;a2&#125;&quot;&gt;no&lt;/c:if&gt;<br>&lt;!-- <span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> --&gt;<br>&lt;c:choose&gt;<br>    &lt;c:when test=&quot;$&#123;a1&lt;a2&#125;&quot;&gt;ok&lt;/c:when&gt;<br>    &lt;c:otherwise&gt;no&lt;/c:otherwise&gt;<br>&lt;/c:choose&gt;<br></code></pre></td></tr></table></figure></li><li><p>遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--还有一些其他属性，比如begin、step什么的,不常用--&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;<br>    &lt;!--count从<span class="hljs-number">1</span>开始，index从<span class="hljs-number">0</span>开始--&gt;<br>$&#123;user.count&#125;-$&#123;user.name&#125;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure></li></ol><h5 id="4、格式化标签库常用标签"><a href="#4、格式化标签库常用标签" class="headerlink" title="4、格式化标签库常用标签"></a>4、格式化标签库常用标签</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--引入--&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/fml&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><ol><li><p>formatDate：格式化时间</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:formatDate value=&quot;$&#123;date&#125;&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;&gt;&lt;/c:formatDate&gt;<br></code></pre></td></tr></table></figure></li><li><p>formatNumber：格式化数值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:formatNumber value=&quot;1234.79066&quot; maxIntegerDigits=&quot;2&quot; maxFractionDigits=&quot;3&quot;&gt;&lt;/c:formatNumber&gt;<br></code></pre></td></tr></table></figure></li></ol><h5 id="5、函数标签库常用标签"><a href="#5、函数标签库常用标签" class="headerlink" title="5、函数标签库常用标签"></a>5、函数标签库常用标签</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;<br>Copy<br>&lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;Java,C&quot;</span>);<br>%&gt;<br>$&#123;c:contains(info,<span class="hljs-string">&quot;Python&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:startsWith(info,<span class="hljs-string">&quot;Java&quot;</span> )&#125;&lt;br/&gt;<br>$&#123;c:endsWith(info, <span class="hljs-string">&quot;C&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:indexOf(info, <span class="hljs-string">&quot;va&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:replace(info, <span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span> )&#125;&lt;br/&gt;<br>$&#123;c:substring(info, <span class="hljs-number">2</span>,<span class="hljs-number">3</span> )&#125;&lt;br/&gt;<br>$&#123;c:split(info, <span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>]&#125;-$&#123;c:split(info, <span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">2</span>]&#125;&lt;br/&gt;<br><br>&lt;!--<br>    <span class="hljs-keyword">false</span><br>    <span class="hljs-keyword">true</span><br>    <span class="hljs-keyword">true</span><br>    <span class="hljs-number">2</span><br>    Java,Python<br>    v<br>    C-<br>--&gt;<br></code></pre></td></tr></table></figure><p>本次上机作业花的时间比其他两次多了很多，特别是最后两个项目，看懂的话要花很多时间，我其实有的还没有彻底理解，还需要再花时间去理解，这一次上机学到的新的知识也好多，希望可以尽量理解原理，加油加油。</p>]]></content>
    
    
    <categories>
      
      <category>JAVAEE上机小结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaEE】第二次上机小结</title>
    <link href="/2021/03/21/%E3%80%90JavaEE%E3%80%91%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/03/21/%E3%80%90JavaEE%E3%80%91%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaEE】第二次上机小结"><a href="#【JavaEE】第二次上机小结" class="headerlink" title="【JavaEE】第二次上机小结"></a>【JavaEE】第二次上机小结</h1><h2 id="一、参考老师的war包建立项目"><a href="#一、参考老师的war包建立项目" class="headerlink" title="一、参考老师的war包建立项目"></a>一、参考老师的war包建立项目</h2><p><strong>回答相关问题与分析</strong></p><h3 id="1-Servlet的对象参数的作用域"><a href="#1-Servlet的对象参数的作用域" class="headerlink" title="1.Servlet的对象参数的作用域"></a>1.Servlet的对象参数的作用域</h3><p> request-Request对象</p><p>Request对象的作用是与客户端交互，收集客户端的Form、Cookies、超链接，或者收集服务器端的环境变量。request对象是从客户端向服务器发出请求，包括用户提交的信息以及客户端的一些信息。客户端可通过HTML表单或在网页地址后面提供参数的方法提交数据，然后服务器通过request对象的相关方法来获取这些数据。request的各种方法主要用来处理客户端浏览器提交的请求中的各项参数和选项。</p><blockquote><p>JSP内置对象：request</p><p>作用域：一次请求内</p></blockquote><p>session-HttpSession对象</p><p>当用户第一次访问Servlet时,服务器端会给用户创建一个独立的Session</p><p>并且生成一个SessionID,这个SessionID在响应浏览器的时候会被装进cookie中,从而被保存到浏览器中</p><p>当用户再一次访问Servlet时,请求中会携带着cookie中的SessionID去访问</p><p>服务器会根据这个SessionID去查看是否有对应的Session对象</p><p>有就拿出来使用;没有就创建一个Session(相当于用户第一次访问)</p><blockquote><p>JSP内置对象：session</p><p>作用域：一次会话</p></blockquote><p>application-ServletContext对象</p><ol><li>servletcontext主要用在servlet中，当然也可以在jsp中使用；</li><li>application只在jsp页面中使用；</li><li>application和servletcontext都保存容器的全局信息；</li><li>application是对servletcontext在jsp中应用的包装，因此它们其实表示的是同一个对象，用application保存的属性可以用servletcontext来读取，反之亦同；</li><li>在jsp中可以直接使用application，也可以用getServletContext（）方法来获得servletcontext对象，此对象的使用和application完全一样；</li></ol><blockquote><p>JSP内置对象：application</p><p>作用域：整个web应用</p></blockquote><h3 id="2-页面跳转"><a href="#2-页面跳转" class="headerlink" title="2.页面跳转"></a>2.页面跳转</h3><ul><li>转发：getRequestDispatcher(String path).forward(request,response)</li><li>重定向：sendRedirect(String path)</li></ul><blockquote><p>转发getRequestDispatcher和重定向sendRedirect的区别:<br>转发是将同一个请求传给下一个页面，重定向是创建一个新的请求传给下一个页面，之前的请求结束生命周期。</p></blockquote><blockquote><p>转发︰同一个请求在服务器之间传递，地址栏不变，也叫服务器跳转。<br>重定向︰由客户端发送一次新的请求来访问跳转后的目标资源，地址栏改变，也叫客户端跳转。</p><p>如果两个页面之间需要通过request来传值，则必须使用转发，不能使用重定向</p></blockquote><h3 id="3-客户端地址与服务端地址"><a href="#3-客户端地址与服务端地址" class="headerlink" title="3.客户端地址与服务端地址"></a>3.客户端地址与服务端地址</h3><p><strong>服务器端</strong></p><p>服务端的相对地址指的是相对于你的web应用的地址，这个地址是在服务器端解析的（不同于html和JavaScript中的相对地址，他们是由客户端浏览器解析的）。</p><p>在转发和重定向中使用的就是这个服务端地址</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>request.getRequestDispatcher(<span class="hljs-string">&quot;/j2019051003_07_servletDataScope/index.jsp &quot;</span>);<br><span class="hljs-comment">// 相当于</span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;http://127.0.0.1/j2019051003_07_servletDataScope/index.jsp &quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p><strong>客户端</strong></p><p>所有的html中的相对地址都是相对于<a href="http://127.0.0.1的,而不是http//127.0.0.1/j2019051003_07_servletDataScope/%E7%9A%84">http://127.0.0.1的，而不是http://127.0.0.1/j2019051003_07_servletDataScope/的</a> 。在form表单提交时action为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">action＝”/test/ j2019051003_07_servletDataScope/index.jsp” <br></code></pre></td></tr></table></figure><h3 id="4-jsp本质"><a href="#4-jsp本质" class="headerlink" title="4.jsp本质"></a>4.jsp本质</h3><blockquote><p>本质上是一种Java servlet，主要用于实现Java web应用程序的用户界面部分，与用户交互。</p></blockquote><blockquote><p>jsp原理：将 html代码写入jsp中，当服务器接收到jsp后缀的请求时，会将该请求交给JSP引擎处理，将jsp转换成servlet文件，再由Web容器调用servlet完成响应（调用write方法进行输出）。</p></blockquote><h3 id="5-购物车业务组件问题"><a href="#5-购物车业务组件问题" class="headerlink" title="5.购物车业务组件问题"></a>5.购物车业务组件问题</h3><ul><li><p>购物车业务可以有多复杂呢？</p><p>添加商品，减少商品，计算总价</p></li></ul><ul><li><p>购物车中的商品数量和库存数量之间是什么关系？</p><p>商品数量=库存数量+购物车数量</p></li><li><p>加商品和移除商品时，有哪些动作要发生，业务才完整？</p><p>添加商品：库存减少，购物车增加。移除商品：库存增加，购物车减少。</p></li><li><p>如果是真实的业务，数据存在库中，这些操作又将如何完成呢？</p><p>连接数据库，在数据库中进行增删改查，把结果显示到页面中。</p></li></ul><h3 id="6-接收到参数后要做的动作"><a href="#6-接收到参数后要做的动作" class="headerlink" title="6.接收到参数后要做的动作"></a>6.接收到参数后要做的动作</h3><p>①判断用户是否存在</p><p>②判断用户权限（超级用户或者普通用户）</p><p>③存储用户登录信息等</p><h3 id="7-真实的业务操作可能会有哪些动作呢？"><a href="#7-真实的业务操作可能会有哪些动作呢？" class="headerlink" title="7.真实的业务操作可能会有哪些动作呢？"></a>7.真实的业务操作可能会有哪些动作呢？</h3><p>①在欢 迎界面显示用户名</p><p>②根据用户id返回响应的的数据，显示在首页。</p><h3 id="8-分析开方乘十显示的过程"><a href="#8-分析开方乘十显示的过程" class="headerlink" title="8.分析开方乘十显示的过程"></a>8.分析开方乘十显示的过程</h3><p><strong>首先是OperServlet.java（进行开方）</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">String strcount=request.getParameter(<span class="hljs-string">&quot;count&quot;</span>);<br><span class="hljs-keyword">int</span> count = (<span class="hljs-keyword">int</span>)Double.parseDouble(strcount);<span class="hljs-comment">//强制转换为double类型  </span><br><span class="hljs-comment">//int count =  (int)Integer.parseInt(strcount); </span><br><span class="hljs-comment">//进行开根号处理  count = (int)Math.*sqrt*(count);</span><br><span class="hljs-comment">//此处开方操作  </span><br>String str=String.*valueOf*(count);  <span class="hljs-comment">//设置请求上属性的参数 </span><br>request.setAttribute(<span class="hljs-string">&quot;count&quot;</span>,str); <br><span class="hljs-comment">// 转发给另一个Servlet来处理 </span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;operTwoServlet&quot;</span>).forward(request,response);<span class="hljs-comment">//传递给operTwoServlet  </span><br></code></pre></td></tr></table></figure><p><strong>然后是operTwoServlet（进行乘10）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取请求属性上的参数 </span><br>String  strcount=(String)request.getAttribute(<span class="hljs-string">&quot;count&quot;</span>);<span class="hljs-comment">//从operservlet得到的count  </span><br><span class="hljs-keyword">int</span> count=Integer.*parseInt*(strcount);  <span class="hljs-comment">// 进行乘10处理  </span><br>count *= <span class="hljs-number">10</span>;  <span class="hljs-comment">// 再次置入请求属性的参数  </span><br>request.setAttribute(<span class="hljs-string">&quot;count&quot;</span>,String.*valueOf*(count));  <br><span class="hljs-comment">// 再次setAtt转发给另一个Servlet来处理  </span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;showServlet&quot;</span>).forward(request,response);<span class="hljs-comment">//传递给showServlet  </span><br></code></pre></td></tr></table></figure><p><strong>最后是showServlet（显示）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);  <br>PrintWriter out=response.getWriter();  <span class="hljs-comment">//获取请求属性上的参数  </span><br>String strcount=(String)request.getAttribute(<span class="hljs-string">&quot;count&quot;</span>);<span class="hljs-comment">//得到对象  </span><br>String prefix = <span class="hljs-string">&quot;开方十乘处理后的结果是：&quot;</span>;  out.println(prefix+strcount);<span class="hljs-comment">//在网页面进行显示  </span><br></code></pre></td></tr></table></figure><h3 id="9-容器中的组件唯一标识"><a href="#9-容器中的组件唯一标识" class="headerlink" title="9.容器中的组件唯一标识"></a>9.容器中的组件唯一标识</h3><p>配置的url路径</p><h3 id="10-编写登录界面"><a href="#10-编写登录界面" class="headerlink" title="10.编写登录界面"></a>10.编写登录界面</h3><p>（我觉得还可以）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;images/bac.jfif&quot;</span>) no-repeat;</span><br><span class="css">        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span>;</span><br>      &#125;<br><span class="css">      <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">outline</span>: none;</span><br>      &#125;<br>      .login &#123;<br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: auto;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">204</span>, <span class="hljs-number">180</span>, <span class="hljs-number">180</span>, <span class="hljs-number">0.1</span>);</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br>      &#125;<br>      .form &#123;<br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br>      &#125;<br>      .title &#123;<br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br>      &#125;<br>      .put &#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">#000</span> <span class="hljs-number">1px</span> solid;</span><br>      &#125;<br>      .submit &#123;<br><span class="css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">70px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-number">#ccc</span> solid;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br>      &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>欢迎登陆<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;./LoginServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>        用户名：<br>        &lt;input<br>          type=&quot;text&quot;<br>          name=&quot;username&quot;<br>          class=&quot;put&quot;<br>          placeholder=&quot;请输入用户名&quot;<br>        /&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        密<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>码：<span class="hljs-symbol">&amp;nbsp;</span>&lt;input<br>          type=&quot;password&quot;<br>          name=&quot;password&quot;<br>          class=&quot;put&quot;<br>          placeholder=&quot;请输入密码&quot;<br>        /&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/java21.png"></p><h3 id="11-在项目中，页面之间或是请求之间会发生跳转，跳转过后，数据还可不可见，能不能传递过去，用户心里要清楚。"><a href="#11-在项目中，页面之间或是请求之间会发生跳转，跳转过后，数据还可不可见，能不能传递过去，用户心里要清楚。" class="headerlink" title="11.在项目中，页面之间或是请求之间会发生跳转，跳转过后，数据还可不可见，能不能传递过去，用户心里要清楚。"></a>11.在项目中，页面之间或是请求之间会发生跳转，跳转过后，数据还可不可见，能不能传递过去，用户心里要清楚。</h3><p><strong>Servlet与Servlet之间</strong></p><blockquote><p>重定向</p></blockquote><p>在Servlet中，通过调用response对象的SendRedirect()方法，告诉浏览器重定向访问指定的URL</p><blockquote><p> 请求转发</p></blockquote><p>getRequestDispatcher方法</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>request.getRequestDispatcher(<span class="hljs-string">&quot;operTwoServlet&quot;</span>).forward(request,response);<br><span class="hljs-comment">//传递给operTwoServlet  </span><br>%&gt;<br></code></pre></td></tr></table></figure><p><strong>Servlet与JSP之间</strong></p><p>JSP向Servlet传值的方式有三种：</p><ul><li>URL后面跟参数</li><li>form表单提交</li><li>在JSP内置对象Session设置值</li></ul><p><strong>JSP与JSP之间</strong></p><ul><li><p>服务器跳转</p><blockquote><p>request.getRequestDispacher().forward()跳转：servlet中执行后立即跳转。request.getRequestDispatcher(“/mode2.jsp”).forward(request, response);</p></blockquote><blockquote><p>&lt;jsp:forward page=” “ /&gt;跳转：在jsp中执行，跳转之后地址栏无变化。</p></blockquote></li><li><p>客户端跳转</p><blockquote><p><a>标签跳转：在jsp中执行，跳转之后地址栏有变化。</p></blockquote></li></ul><h3 id="12-一个servlet从接请求到给响应要做些什么事情？"><a href="#12-一个servlet从接请求到给响应要做些什么事情？" class="headerlink" title="12.一个servlet从接请求到给响应要做些什么事情？"></a>12.一个servlet从接请求到给响应要做些什么事情？</h3><p>servlet接收请求和产生响应</p><p>servlet执行过程（HTTP的GET 和 POST）：</p><ol><li>浏览器向tomcat发出GET请求（或者POST请求）。</li><li>获得URL的项目名，从tomcat下的webapps下找到对应文件夹。</li><li>根据URL中servlet的url-pattern，从web.xml找到servlet-name，找到servlet-class（被访问的servlet的类名）。</li><li>创建出servlet类对象；请求对象（HttpServletRequest）和响应对象(HttpServletResponse)。</li><li>tomcat先调用servlet对象中的init()方法（servlet第一次被访问）。</li><li>调用servlet的service方法；servlet.service(req,resp)；service方法根据请求类型（本例为GET请求）调用doGet方法。</li><li>服务器将响应结果返回给浏览器 此时 如果浏览器发出第二次请求。</li><li>tomcat会直接根据url-pattern，找到servlet对象，调用service方法。</li></ol><p>HTTP的GET 和 POST方法：</p><blockquote><p>GET：获取URI指定的信息。如果URI指定的是文件，则返回文件的内容；如果URI指定的是服务器程序，则返回该程序的输出数据。</p></blockquote><blockquote><p>POST：从客户端向服务器发送数据，一般用于发送表单中填写的数据等情况。</p></blockquote><blockquote><p>接受参数的方法：</p><p>getParameter()：获取表单参数的值。</p><p>getParameterValues()：如果参数出现一次以上，则调用该方法，并返回多个值，例如复选框。</p><p>getParameterNames()：得到当前请求中的所有参数的完整列表。</p></blockquote><h3 id="13-用户名和密码能不能用get方式发起请求来传参？"><a href="#13-用户名和密码能不能用get方式发起请求来传参？" class="headerlink" title="13.用户名和密码能不能用get方式发起请求来传参？"></a>13.用户名和密码能不能用get方式发起请求来传参？</h3><p>可以，用Form进行 用户名和密码进行传递，共有四种方式进行：</p><ol><li>直接在URL后面添加参数</li><li>用超链接的方式</li><li>通过js方法传递</li><li>用form表单进行传递</li></ol><h3 id="14-传一个数组，该怎么组织数据呢？"><a href="#14-传一个数组，该怎么组织数据呢？" class="headerlink" title="14.传一个数组，该怎么组织数据呢？"></a>14.传一个数组，该怎么组织数据呢？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] hobbys = request.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<span class="hljs-comment">//（多个参数）</span><br>String name = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<span class="hljs-comment">//（单个参数）</span><br><br></code></pre></td></tr></table></figure><h2 id="二、已上传至相应目录"><a href="#二、已上传至相应目录" class="headerlink" title="二、已上传至相应目录"></a>二、已上传至相应目录</h2><p><img src="/images/java22.png"></p><h2 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h2><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p><strong>问题描述</strong>：无法在jsp文件中使用内置对象的方法，如out的print和write等。</p><p><strong>解决思路和方法</strong>：试验了很多方法，比如tomcat关联tomcat-api.jar等，最后找到一种有效的方法：创建lib，放入service.jar和jsp-api.jar，然后导入Modules。</p><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p><strong>问题描述</strong>：在通过序号添加商品的式子中，通过document.getElementsById()获取输入框的input值是，获取到的是空字符串。</p><p><strong>解决思路和方法</strong>：是因为在页面刚加载的时候，value的值为空，所以取不到，解决办法是在点击事件中获取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">add.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> pro = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;input&quot;</span>).value;<br>        <span class="hljs-keyword">let</span> num = <span class="hljs-built_in">parseInt</span>(pro);<br>        text = products[num].querySelectorAll(<span class="hljs-string">&quot;td&quot;</span>)[<span class="hljs-number">1</span>].innerText;<br>        <span class="hljs-built_in">console</span>.log(text);<br>        ajax_demo();<br>      &#125;;<br></code></pre></td></tr></table></figure><h4 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h4><p><strong>问题描述</strong>：在通过序号添加商品练习中，请求之后想要实现页面跳转</p><p><strong>解决思路和方法</strong>：开始想的是在发送请求成功后使用转发或者重定向进行跳转，但是如果跳转不携带product参数，就无法访问。但如果携带参数，就会增加错误的商品到购物车中，最后找到了一种方式可以解决这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.location.href =url;<br><span class="hljs-comment">//使用该方式代替send()方法</span><br></code></pre></td></tr></table></figure><h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><p><strong>问题描述</strong>：在介绍代码中无法识别onclick</p><p><strong>解决思路和方法</strong>：在页面加载时候，还没有生成相应的结点，有两种解决办法，第一种是将js代码写在最下方；第二种是将js代码放在window.onload = funtion(){}中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-title">funtion</span>(<span class="hljs-params"></span>)</span>&#123;add.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> pro = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;input&quot;</span>).value;<br>        <span class="hljs-keyword">let</span> num = <span class="hljs-built_in">parseInt</span>(pro);<br>        text = products[num].querySelectorAll(<span class="hljs-string">&quot;td&quot;</span>)[<span class="hljs-number">1</span>].innerText;<br>        <span class="hljs-built_in">console</span>.log(text);<br>        ajax_demo();<br>      &#125;;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="学习小结与心得"><a href="#学习小结与心得" class="headerlink" title="学习小结与心得"></a>学习小结与心得</h3><p>在本次上机中我也学到了很多新的知识，同时也复习到了一些知识点，下面是一些梳理。</p><p>1.本次实验进行了很多servlet之间的跳转，并且熟悉掌握了两种方式：重定向sendRedirect（String path）和请求转发getRequestDispatcher（String path）</p><p>2.Serializable接口：是启用其序列化功能的接口。</p><p>关于序列化的理解： 序列化的过程，就是一个“冷冻”的过程，它将一个对象冻住，然后进行存储，等到再次需要的时候，再将这个对象解冻就可以立即使用。</p><p>3.设置相应头部分，复习了一下HTTP相关的知识</p><blockquote><p>完整的HTTP报文由头部、空行、正文三部分组成</p></blockquote><p>常见的Content-Type</p><ol><li><p>application/x-www-form-urlencoded</p><blockquote><p>最常见的post提交数据方式</p><p>键值对， key1=val1&amp;key2=val2</p><p>如果提交原生form不设置enctype属性，默认为此方式提交数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;form_action.asp&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;text/plain&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>Copy<br></code></pre></td></tr></table></figure></li><li><p>multipart/form-data</p><blockquote><p>form 表单的 enctype 设为multipart/form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。</p><p>既可以上传键值对，也可以上传文件（Content-disposition）。</p><p>上传字段时以 –boundary 开始。</p><p>消息主体最后以 –boundary– 标示结束。</p></blockquote></li><li><p>application/json</p><blockquote><p>json格式</p><p>Google 的 AngularJS 中的 Ajax 功能，默认提交 JSON 字符串</p></blockquote></li><li><p>application/xml</p><blockquote><p>以xml形式进行编码，会根据xml头指定的编码格式来编码。</p></blockquote></li><li><p>text/xml</p><blockquote><p>以xml形式进行编码，会忽略xml头所指定编码格式，默认采用US-ASCII编码。</p></blockquote></li><li><p>text/html</p><blockquote><p>文本方式的网页，浏览器会调用html的解析器对文件进行处理。</p></blockquote></li><li><p>text/plain</p><blockquote><p>文件设置为纯文本形式，其中不含任何控件或格式字符。空格转换为 “+” 加号，但不对特殊字符编码。</p></blockquote></li></ol><p>4.通配符</p><p>通配符是一种特殊语句，主要有星号(*)和问号(?)，用来模糊搜索文件。</p><p>也就是这个的出现，一是为了方便更快的浏览目标页面，二是具有了一定的安全性（模糊文件目录），但是它也存在了覆盖真实目录文件的问题。所以对通配符的应用，需要充分进行前置和后置通配符，还有URL地址的应用。</p><p>本次实验的一个比较困难的点就是理解明白参数在不同页面的传递，Servlet的响应、转发等。还是花了比较多的时间去理解，也遇到了很多问题（已在前面阐述），在js编写的部分认识到了复习和动手的重要性，以前学过的知识都有点忘记了，使用起来不熟练，还是需要经常复习以及实践！！本次上机收获不少，加油。</p>]]></content>
    
    
    <categories>
      
      <category>JAVAEE上机小结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JAVAEE】学习四：JSP内置对象作用域</title>
    <link href="/2021/03/17/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E5%9B%9B%EF%BC%9AJSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2021/03/17/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E5%9B%9B%EF%BC%9AJSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="【JAVAEE】学习四：JSP作用域-EL表达式-JSTL"><a href="#【JAVAEE】学习四：JSP作用域-EL表达式-JSTL" class="headerlink" title="【JAVAEE】学习四：JSP作用域+EL表达式+JSTL"></a>【JAVAEE】学习四：JSP作用域+EL表达式+JSTL</h1><h2 id="一、JSP内置对象作用域"><a href="#一、JSP内置对象作用域" class="headerlink" title="一、JSP内置对象作用域"></a>一、JSP内置对象作用域</h2><blockquote><p>jsp有四个内置对象可以来存取数据，他们分别有不同的作用域</p></blockquote><h3 id="1、page作用域"><a href="#1、page作用域" class="headerlink" title="1、page作用域"></a>1、page作用域</h3><p>内置对象：pageContext</p><p>作用域：当前页面</p><h3 id="2、request作用域"><a href="#2、request作用域" class="headerlink" title="2、request作用域"></a>2、request作用域</h3><p>内置对象：request</p><p>作用域：一次请求内</p><h3 id="3、session作用域"><a href="#3、session作用域" class="headerlink" title="3、session作用域"></a>3、session作用域</h3><p>内置对象：session</p><p>作用域：一次会话</p><h3 id="4、application"><a href="#4、application" class="headerlink" title="4、application"></a>4、application</h3><p>内置对象：application</p><p>作用域：整个web应用</p><h2 id="二、EL表达式"><a href="#二、EL表达式" class="headerlink" title="二、EL表达式"></a>二、EL表达式</h2><blockquote><p>Expression Language表达式语言</p><p>代替jsp的数据访问（pageContext，request，session，application）</p><p>前提：有setAttribute；EL相当于简化getAttribute</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br>%&gt;<br>$&#123;name&#125;<br></code></pre></td></tr></table></figure><h3 id="1、查找顺序"><a href="#1、查找顺序" class="headerlink" title="1、查找顺序"></a>1、查找顺序</h3><p>pageContext–&gt;request–&gt;session–&gt;application–&gt;null</p><h3 id="2、指定查找"><a href="#2、指定查找" class="headerlink" title="2、指定查找"></a>2、指定查找</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$(pageScope.name)<br>$(requestScope.name)<br>$(sessionScope.name)<br>$(applicationScope.name)<br></code></pre></td></tr></table></figure><h3 id="3、数据级联"><a href="#3、数据级联" class="headerlink" title="3、数据级联"></a>3、数据级联</h3><blockquote><p>若存入的是一个对象，在使用$(object.variable)时，取出来的不是object里面的variable变量，而是自动调用getVariable()方法，取返回值，所以类中需要写get方法。</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">19</span>);<br>session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>%&gt;<br>&lt;!-- <span class="hljs-number">100</span> --&gt;<br>$(user.age);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>    User(String name,Integer age)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">setIName</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、EL执行表达式"><a href="#3、EL执行表达式" class="headerlink" title="3、EL执行表达式"></a>3、EL执行表达式</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&amp;&amp; and<br>|| or<br>! not<br><span class="hljs-section">== eq</span><br>!= ne<br>&lt; &amp;lt<br>&gt; &amp;gt<br>&lt;= le<br>&gt;= ge<br>empty 变量为null，length为0的String，size为0的集合<br></code></pre></td></tr></table></figure><h2 id="三、JSTL"><a href="#三、JSTL" class="headerlink" title="三、JSTL"></a>三、JSTL</h2><blockquote><p>JSP Standard Tag Library JSP标准标签库，是JSP为开发者提供的一系列标签</p><p>可以完成循环遍历集合，让代码简洁，不出现JSP脚本穿插情况</p><p>JSTL侧重逻辑处理，EL侧重展示数据</p></blockquote><h3 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h3><p>（1）需要先导入jar包（jstl.jar和standard.jar）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.zll.User&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">10618</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">17</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">35</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;!--（<span class="hljs-number">2</span>）jsp页面导入--&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">19</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">18</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">21</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;赵六&quot;</span>,<span class="hljs-number">20</span>));<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br>%&gt;<br>&lt;table&gt;<br>    &lt;thead&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;姓名&lt;/th&gt;<br>        &lt;th&gt;年龄&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>        &lt;!--(<span class="hljs-number">3</span>)使用--&gt;<br>    &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/c:forEach&gt;<br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="2、优点"><a href="#2、优点" class="headerlink" title="2、优点"></a>2、优点</h3><blockquote><p>提供了统一的标签</p><p>可用于编写各种动态功能</p></blockquote><h3 id="3、核心标签库常用标签"><a href="#3、核心标签库常用标签" class="headerlink" title="3、核心标签库常用标签"></a>3、核心标签库常用标签</h3><ol><li><p>set：向域对象中添加数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set var=&quot;num&quot; value=&quot;12&quot; scope=&quot;page&quot;&gt;&lt;/c:set&gt;<br>&lt;!--不指定scope，顺序为pageScope-&gt;requestScope-&gt;sessionScope-&gt;applicationScope --&gt;<br></code></pre></td></tr></table></figure><blockquote><p>不能存对象，只能是字符串，但是可以修改已存入的对象</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set target=&quot;$&#123;user&#125;&quot; property=&quot;name&quot; value=&quot;嘿嘿&quot;&gt;&lt;/c:set&gt;<br>$&#123;user.name&#125;<br></code></pre></td></tr></table></figure></li><li><p>out：输出域对象中的数据</p><blockquote><p>与${}不同，当没有找到要输出的值时，可以设定默认值。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:out value=&quot;$&#123;name&#125;&quot; default=&quot;what&quot;&gt;&lt;/c:out&gt;<br></code></pre></td></tr></table></figure></li><li><p>catch：捕获异常</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">catch</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;err&quot;</span>&gt;<br>    &lt;%<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>    %&gt;<br>&lt;/c:catch&gt;<br></code></pre></td></tr></table></figure></li><li><p>条件判断</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:set var=&quot;a1&quot; value=&quot;1&quot;&gt;&lt;/c:set&gt;<br>&lt;c:set var=&quot;a2&quot; value=&quot;2&quot;&gt;&lt;/c:set&gt;<br>&lt;!-- <span class="hljs-keyword">if</span> --&gt;<br>&lt;c:if test=&quot;$&#123;a1&lt;a2&#125;&quot;&gt;ok&lt;/c:if&gt;<br>&lt;c:if test=&quot;$&#123;a1&gt;a2&#125;&quot;&gt;no&lt;/c:if&gt;<br>&lt;!-- <span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> --&gt;<br>&lt;c:choose&gt;<br>    &lt;c:when test=&quot;$&#123;a1&lt;a2&#125;&quot;&gt;ok&lt;/c:when&gt;<br>    &lt;c:otherwise&gt;no&lt;/c:otherwise&gt;<br>&lt;/c:choose&gt;<br></code></pre></td></tr></table></figure></li><li><p>遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--还有一些其他属性，比如begin、step什么的,不常用--&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;<br>    &lt;!--count从<span class="hljs-number">1</span>开始，index从<span class="hljs-number">0</span>开始--&gt;<br>$&#123;user.count&#125;-$&#123;user.name&#125;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4、格式化标签库常用标签"><a href="#4、格式化标签库常用标签" class="headerlink" title="4、格式化标签库常用标签"></a>4、格式化标签库常用标签</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--引入--&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/fml&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><ol><li><p>formatDate：格式化时间</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:formatDate value=&quot;$&#123;date&#125;&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;&gt;&lt;/c:formatDate&gt;<br></code></pre></td></tr></table></figure></li><li><p>formatNumber：格式化数值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:formatNumber value=&quot;1234.79066&quot; maxIntegerDigits=&quot;2&quot; maxFractionDigits=&quot;3&quot;&gt;&lt;/c:formatNumber&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5、函数标签库常用标签"><a href="#5、函数标签库常用标签" class="headerlink" title="5、函数标签库常用标签"></a>5、函数标签库常用标签</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;Java,C&quot;</span>);<br>%&gt;<br>$&#123;c:contains(info,<span class="hljs-string">&quot;Python&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:startsWith(info,<span class="hljs-string">&quot;Java&quot;</span> )&#125;&lt;br/&gt;<br>$&#123;c:endsWith(info, <span class="hljs-string">&quot;C&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:indexOf(info, <span class="hljs-string">&quot;va&quot;</span>)&#125;&lt;br/&gt;<br>$&#123;c:replace(info, <span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span> )&#125;&lt;br/&gt;<br>$&#123;c:substring(info, <span class="hljs-number">2</span>,<span class="hljs-number">3</span> )&#125;&lt;br/&gt;<br>$&#123;c:split(info, <span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>]&#125;-$&#123;c:split(info, <span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">2</span>]&#125;&lt;br/&gt;<br><br>&lt;!--<br>    <span class="hljs-keyword">false</span><br>    <span class="hljs-keyword">true</span><br>    <span class="hljs-keyword">true</span><br>    <span class="hljs-number">2</span><br>    Java,Python<br>    v<br>    C-<br>--&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaEE】第一次上机小结</title>
    <link href="/2021/03/17/%E3%80%90JavaEE%E3%80%91%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/03/17/%E3%80%90JavaEE%E3%80%91%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaEE】第一次上机小结"><a href="#【JavaEE】第一次上机小结" class="headerlink" title="【JavaEE】第一次上机小结"></a>【JavaEE】第一次上机小结</h1><h2 id="一、自行搭建开发环境，并已配置好环境变量"><a href="#一、自行搭建开发环境，并已配置好环境变量" class="headerlink" title="一、自行搭建开发环境，并已配置好环境变量"></a>一、自行搭建开发环境，并已配置好环境变量</h2><ol><li>JDK：1.8.0_241</li><li>Tomcat：9.0.43</li><li>Maven：3.6.3</li></ol><p><img src="/images/java11.png"></p><p><img src="/images/java13.png"></p><p><img src="/images/java12.png"></p><h2 id="二、参考老师的war包时遇到的问题"><a href="#二、参考老师的war包时遇到的问题" class="headerlink" title="二、参考老师的war包时遇到的问题"></a>二、参考老师的war包时遇到的问题</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p><strong>问题描述</strong>：导入war包时，没有warfile选项</p><p><strong>解决思路和方法</strong>：首先怀疑tomcat是否配置成功，检查后发现配置上了的。然后查阅了百度以及询问了有相同问题的同学，最后找到了原因，原来是缺少了相关插件，于是安装插件。</p><p>1、Help –&gt; Install New Software</p><p><img src="/images/java14.png"></p><p>2、选择一个路径</p><p><img src="/images/java15.png"></p><p>3、选择Web,XML…选项安装，时间可能会有点久。</p><p><img src="/images/java16.png"></p><p>4、重启解决。</p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p><strong>问题描述</strong>：导入war包之后报错：找不到Servlet包。</p><p><img src="/images/java17.png"></p><p><img src="/images/java18.png"></p><p><strong>解决思路与方法</strong>：开始是想通过导入jar包来解决，但是又询问了其他同学，都没有出现这种情况，因为是同一个war包，所以思考是不是自己的配置出错，先查看了sts的tomcat配置，配置上的是我安装的10版本，然后又查看了jdk的8版本，然后在官网上看了一下tomcat和jdk版本的对应，发现8也能支持10的tomcat，但是10是最新版的tomcat，又发现老师的发的文件是9，就怀疑是不是自己的版本高了，于是就重新装了9的tomcat，于是解决问题。但是后来室友也报了跟我同样的错误，一开始是按照我解决的方法进行尝试，发现仍然报错，于是开始寻找新的方案，最后发现是缺少了定向的执行环境。于是添加。</p><p>1.右击项目名，选择properties</p><p>2.选择Targeted RunTimes</p><p>3.选择你的tomcat，然后apply -&gt; ok</p><h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><p><strong>问题描述</strong>：eclipse（并且sts）中文注解乱码</p><p><img src="/images/java19.png"></p><p><strong>解决思路与方法</strong>：选择Windows–&gt;Preference–&gt;General–&gt;workspace，将Text file encoding中的属性值改为UTF-8。</p><p><img src="/images/java110"></p><h3 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h3><p><strong>问题描述</strong>：idea控制台输出中文乱码</p><p><img src="/images/java111.png"></p><p><strong>解决思路与方法</strong>：开始是找到一个方法，将tomcat目录下的conf文件夹的logging.properties中的java.util.logging.ConsoleHandler.encoding = UTF-8改为java.util.logging.ConsoleHandler.encoding = GBK，重启后发现tomcat启动的输出不乱码了，但是我自己System.out.print输出的乱码。于是找到一个新的解决办法：</p><p>1、Help-&gt;Edit Custom VM Options</p><p>2、在IntelliJIDEA界面中修改idea64.exe.vmoptions文件，添加:-Dfile.encoding=UTF-8。</p><p><img src="/images/java112.png"></p><p>3、Edit Configurations-&gt;VM options</p><p>4、打开tomcat配置页面，Edit Configurations。选择项目部署的tomcat，在配置项VM options文本框中输入-Dfile.encoding=UTF-8,点击Apply或OK即可。</p><p><img src="/images/java113.png"></p><p>解决后如下</p><p><img src="/images/java114.png"></p><h3 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h3><p><strong>问题描述</strong>：项目启动后，浏览器页面中文乱码</p><p><strong>解决思路与方法</strong>：有两种解决方式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 方法<span class="hljs-number">1</span> --&gt;<br>response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>&lt;!-- 方法<span class="hljs-number">2</span>，使用较多 --&gt;<br>response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="问题六"><a href="#问题六" class="headerlink" title="问题六"></a>问题六</h3><p><strong>问题描述</strong>：eclipse(和sts)无法识别xml文件</p><p><strong>解决思路与方法</strong>：首先检查了tomcat服务器，确定是一个成功的web项目。后来查阅发现可能是xml文件默认打开方式错误，于是设置。</p><p>1、Window –&gt; Preferences –&gt; General –&gt; File Associations</p><p>2、Add，输入xml</p><p><img src="/images/java115.png"></p><p><img src="/images/java116.png"></p><h2 id="三、上传war包到相应文件夹（已上传）"><a href="#三、上传war包到相应文件夹（已上传）" class="headerlink" title="三、上传war包到相应文件夹（已上传）"></a>三、上传war包到相应文件夹（已上传）</h2><p><img src="/images/java117.png"></p><p>注：访问出现404，是因为没有web.xml里面配置的那几个文件，可以自己新建一个index.jsp之类的文件。</p><h2 id="四、思考与小结"><a href="#四、思考与小结" class="headerlink" title="四、思考与小结"></a>四、思考与小结</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><h4 id="1、web-xml"><a href="#1、web-xml" class="headerlink" title="1、web.xml"></a>1、web.xml</h4><blockquote><p>用来配置欢迎页，Servlet等，没用到时不是必须的。</p><p>启动后会首先读取</p></blockquote><p>节点描述（部分）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span> <span class="hljs-comment">&lt;!-- 部署描述符的根元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><span class="hljs-comment">&lt;!-- web应用项目的名字 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><span class="hljs-comment">&lt;!-- 初始化参数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-comment">&lt;!-- 过滤器 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>servletname<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 包名+类名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>servlet.PrivateSum<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>servletname<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servletpath<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-servlet配置"><a href="#2-servlet配置" class="headerlink" title="2.servlet配置"></a>2.servlet配置</h4><p>有两种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一种，基于注解</span><br><span class="hljs-meta">@WebServlet(&quot;/LifeServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LifeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 基于xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>servletname<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 包名+类名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>servlet.PrivateSum<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>servletname<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servletpath<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>两种方法优缺点分析</p><p>xml优点：</p><blockquote><p>1.使用xml配置可以让软件更具有扩展性</p><p>2.对象之间的关系一目了然。</p><p>3.xml配置文件比注解功能齐全</p><p>4.xml是集中式的元数据，不需要和代码绑定的</p></blockquote><p>xml缺点：</p><blockquote><p>1.工作量相对大</p><p>2.配置文件过多的话维护比较困难</p><p>3.开发的时候，既要维护代码又要维护配置文件，使得开发的效率降低</p></blockquote><p>注解配置优点：</p><blockquote><p>方便，简洁，配置信息和 Java 代码放在一起，有助于增强程序的内聚性；</p></blockquote><p>注解配置缺点：</p><blockquote><p>使用太多会影响代码的简洁度；分散到各个class文件中，所以不宜维护；</p></blockquote><h4 id="3-servlet生命周期"><a href="#3-servlet生命周期" class="headerlink" title="3.servlet生命周期"></a>3.servlet生命周期</h4><p>生命周期过程：</p><ol><li><p>通过映射机制实例化Servlet对象，调用无参构造函数</p></li><li><p>调用init方法初始化</p></li><li><p>调用service完成业务逻辑</p></li><li><p>调用destroy方法，释放当前对象</p></li></ol><p>生命周期方法：无参构造函数–&gt;init()–&gt;service()–&gt;destroy()</p><p>浏览器访问Servlet时，Tomcat会查询当前的实例化对象是否存在，如果不存在，则通过映射机制动态创建对象；如果存在，直接执行生命周期第三步（完成业务逻辑部分）。</p><p>生命周期的实验中计数器的累计操作：（我的理解）每次访问页面时，service执行一次doPost，由它来调用doGet，然后count++，实现计数的累加。</p><h4 id="4-servlet层次结构"><a href="#4-servlet层次结构" class="headerlink" title="4.servlet层次结构"></a>4.servlet层次结构</h4><blockquote><p>Servlet -&gt; GenericServlet -&gt; HttpServlet</p><p>GenericServlet实现了Servlet接口，同时为它的子类屏蔽了不常用方法。</p><p>开发者定义的Servlet类只需要继承HttpServlet即可，重写doPOST和doGET。</p></blockquote><h4 id="5-servletConfig介绍"><a href="#5-servletConfig介绍" class="headerlink" title="5.servletConfig介绍"></a>5.servletConfig介绍</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LifeServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-comment">//servletConfig对象其实是一个接口，用来描述Servlet基本信息</span><br>        <br>        <span class="hljs-comment">//方法1：getServletName()，获取servlet名称，全类名</span><br>        System.out.println(servletConfig.getServletName());<br>        <br>        <span class="hljs-comment">//方法2：getInitParameter()，获取初始化参数，要用这个方法需要基于xml配置</span><br>        servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <br>        <span class="hljs-comment">//方法3：getInitParameterNames()，取出所有init参数名,无序遍历init参数</span><br>        <span class="hljs-comment">//泛型，加强数据安全性，类型限制</span><br>        Enumeration&lt;String&gt; enumeration = servletConfig.getInitParameterNames();<br>        <span class="hljs-keyword">while</span>(enumeration.hasMoreElements())&#123;<br>            String element = enumeration.nextElement();<br>            System.out.println(<span class="hljs-string">&quot;Config:&quot;</span>+element);<span class="hljs-comment">//username</span><br>        &#125;<br>        <br>        <span class="hljs-comment">//方法4：getInitParameterNames()，返回servletcntext对象</span><br>        <span class="hljs-comment">//servletcntext对象：是servlet的上下文，是整个servlet的管理者</span><br>        <span class="hljs-comment">//servletcntext也有servletConfig的方法，返回来的数据是全局的</span><br>        ServletContext servletContext = servletConfig.getServletContext();<br>        Enumeration&lt;String&gt; enumerations = servletContext.getInitParameterNames();<br>        <span class="hljs-keyword">while</span>(enumerations.hasMoreElements())&#123;<br>            String element = enumerations.nextElement();<br>            System.out.println(<span class="hljs-string">&quot;context:&quot;</span>+element);<span class="hljs-comment">//age</span><br>        &#125;<br>        <span class="hljs-comment">//当前应用的名称</span><br>        System.out.println(servletContext.getContextPath());<br>        <span class="hljs-comment">//tomcat版本</span><br>        System.out.println(servletContext.getServerInfo());<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        ServletConfig:侧重某一个servlet实例,局部</span><br><span class="hljs-comment">        ServletContext:侧重于整个servlet，他的身上也有init中参数的那些方法，全局</span><br><span class="hljs-comment">        * */</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//其他的这里省略没写</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-不同域的数据共享情况"><a href="#6-不同域的数据共享情况" class="headerlink" title="6.不同域的数据共享情况"></a>6.不同域的数据共享情况</h4><h5 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h5><p>在一次会话内有效。</p><p>会话：客户端发生的一系列连续的请求与响应过程（浏览器打开到关闭）。</p><h5 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h5><p> 从服务器开始执行服务，到服务器关闭为止。范围最大，停留时间最久，不要滥用，要注意的成服务器负载。只要将数据存入application对象，数据的范围范围就为Application。</p><h3 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h3><p>在学习之前有先自己了解过JavaWeb，发现中间还是有很多地方很绕，在最开始学的时候有点迷糊，容易搞混jsp内置对象和servlet里面init参数对象的一些方法，但是之后梳理做了笔记就好了很多。在自学的途中遇到过很多报错，开始花的时间很长，但是正是由于这些错误的积累，在之后的时候遇到问题之后会首先分析它可能的原因，然后再去有针对性的寻找方法，致使解决问题速度快了很多。</p><p>还有一点就是可以适当问问别人，比如我当时遇到的一个乱码问题，花了很多时间去解决，但之后我在帮别人解决的时候就会很快，这说明你的一个错误可能别人已经遇到并且解决了，或者他的角度与你不同，会更快的找到解决办法，同时说明记录错误也很重要。</p><p>认识到javaweb跟javase很不同，需要了解与学习的变多了，所以还是需要我们比较多的自学，去扩展了解，才能较为熟练地掌握方法。</p><h3 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h3><p>自我感觉本次上机很不错，在之前有自己学习，遇到了一些问题（第二大点都已说明），比如乱码问题都遇见了三个，控制台，浏览器，注释。但是还是比较顺利地解决了，并且形成了笔记，在之后的总结也是收获了很多，在readme的思考题的提示下学习到了很多新的知识点，并且进行了尝试，很有趣。比如基本了解了session域和application域，并且了解到还有其他的域ModelAndView和request。了解了web.xml的节点以及它的运行机制，对原理有了一定了了解，比如servlet生命周期第一步创建对象就是通过映射机制来实现的，所以在web.xml文件里面需要写出完整的包名和类名。很ok，收获多多。</p>]]></content>
    
    
    <categories>
      
      <category>JAVAEE上机小结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JAVAEE】学习三：JSP</title>
    <link href="/2021/03/17/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%B8%89%EF%BC%9AJSP/"/>
    <url>/2021/03/17/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%B8%89%EF%BC%9AJSP/</url>
    
    <content type="html"><![CDATA[<h1 id="【JAVAEE】学习三：JSP"><a href="#【JAVAEE】学习三：JSP" class="headerlink" title="【JAVAEE】学习三：JSP"></a>【JAVAEE】学习三：JSP</h1><h2 id="一、JSP介绍"><a href="#一、JSP介绍" class="headerlink" title="一、JSP介绍"></a>一、JSP介绍</h2><blockquote><p>Java Server Pages，一种动态网页开发技术。</p><p>使用JSP标签在HTML网页中插入Java代码。</p><p>本质上是一种Java servlet，主要用于实现Java web应用程序的用户界面部分，与用户交互。</p></blockquote><blockquote><p>jsp原理：将 html代码写入jsp中，当服务器接收到jsp后缀的请求时，会将该请求交给JSP引擎处理，将jsp转换成servlet文件，再由Web容器调用servlet完成响应（调用write方法进行输出）。</p></blockquote><h2 id="二、嵌入方式"><a href="#二、嵌入方式" class="headerlink" title="二、嵌入方式"></a>二、嵌入方式</h2><blockquote><p>java代码嵌入方式有三种</p></blockquote><h3 id="1、JSP脚本"><a href="#1、JSP脚本" class="headerlink" title="1、JSP脚本"></a>1、JSP脚本</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;% java代码%&gt;<br></code></pre></td></tr></table></figure><h3 id="2、JSP声明"><a href="#2、JSP声明" class="headerlink" title="2、JSP声明"></a>2、JSP声明</h3><blockquote><p>定义Java方法</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    java函数声明（只能声明，不能调用）<br> %&gt;<br></code></pre></td></tr></table></figure><h3 id="3、JSP表达式"><a href="#3、JSP表达式" class="headerlink" title="3、JSP表达式"></a>3、JSP表达式</h3><blockquote><p>把Java对象直接输出到HTML页面中</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%= java变量 %&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%  %&gt;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--简单使用--&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Array&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">10618</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">12</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">29</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div&gt;第一个jsp项目&lt;/div&gt;<br>    &lt;%<br>        List&lt;String&gt; names = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        names.add(<span class="hljs-string">&quot;小兔&quot;</span>);<br>        names.add(<span class="hljs-string">&quot;傲天&quot;</span>);<br><br>        List&lt;Integer&gt; ages = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        ages.add(<span class="hljs-number">22</span>);<br>        ages.add(<span class="hljs-number">20</span>);<br>    %&gt;<br>    &lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>        &lt;thead&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;姓名&lt;/td&gt;<br>                &lt;td&gt;年龄&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/thead&gt;<br>        &lt;tbody&gt;<br>        &lt;%<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;names.size();i++)&#123;%&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;%=names.get(i)%&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;%=ages.get(i)%&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;%&#125;%&gt;<br>        &lt;/tbody&gt;<br>    &lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="三、JSP内置对象"><a href="#三、JSP内置对象" class="headerlink" title="三、JSP内置对象"></a>三、JSP内置对象</h2><blockquote><p>JSP有9个内置对象，常用的是request、response、session、application、pageContext</p></blockquote><ol><li><strong>request</strong>：表示一次请求，HttpServletRequset类。</li><li><strong>response</strong>：表示一次响应，HttpServletResponse类。</li><li><strong>pageContext</strong>：页面上下文，获取页面信息，PageContext类。</li><li><strong>session</strong>：表示一次会话，保存用户信息，HttpSession类。</li><li><strong>application</strong>：表示当前Web应用，全局对象，保存所有用户共享信息，ServletContext类。</li><li><strong>config</strong>：当前JSP对应的Servlet的 ServletConfig对象，获取当前Servlet的信息。</li><li><strong>out</strong>：向浏览器输出数据，JspWriter类。</li><li><strong>page</strong>：当前JSP对应的Servlet对象，Servlet类。</li><li><strong>excerption</strong>：表示JSP页面发生的异常，Exception类。</li></ol><h3 id="1、request常用方法"><a href="#1、request常用方法" class="headerlink" title="1、request常用方法"></a>1、request常用方法</h3><ol><li><p>**String getParameter(String key)**：获取客户端传来的参数，默认是String类型，可以通过parseInt()等转换。</p></li><li><p>**void setAttribute(String key,Object value)**：通过键值对的形式保存数据，服务器内部使用（比如两个jsp之间传递）。</p></li><li><p><strong>Object getAttribute(String key)：</strong>通过key取出 value，服务器内部使用。</p></li><li><p><strong>getRequestDispatcher(String path)：</strong>返回一个RequestDispatcher对象，该对象的forward方法用于请求<strong>转发</strong>。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- test1.jsp --&gt;<br>&lt;h1&gt;<br>    test1<br>&lt;/h1&gt;<br>&lt;%<br>        <span class="hljs-comment">//获取客户端传来的id</span><br>        String isStr = request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br>        Integer id = Integer.parseInt(isStr);<br>        <span class="hljs-comment">//将数据保存到request中</span><br>        request.setAttribute(<span class="hljs-string">&quot;id&quot;</span>,id);<br>        <span class="hljs-comment">//将请求转发给test2</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;test2.jsp&quot;</span>).forward(request,response);<br>%&gt;<br><br>&lt;!-- test2.jsp --&gt;<br>&lt;h1&gt;<br>    test2<br>&lt;/h1&gt;<br>&lt;%<br>    Integer id = (Integer) request.getAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>String getParameterValues()：</strong>获取客户端传来的多个同名参数。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    String[] names = request.getParameterValues(<span class="hljs-string">&quot;name&quot;</span>);<br>%&gt;<br>&lt;%=Arrays.toString(names)%&gt;<br><br>&lt;!-- 请求 --&gt;<br>http:<span class="hljs-comment">//localhost:8080/demo_01_war_exploded/test2.jsp?name=lisi&amp;name=zhagsan&amp;name=wangwu</span><br></code></pre></td></tr></table></figure></li><li><p><strong>void setCharacterEncoding(String charset)：</strong>指定每个请求的编码。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--有乱码时可以设置--&gt;<br>request.setCharacterEncodeing(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="2、response常用方法"><a href="#2、response常用方法" class="headerlink" title="2、response常用方法"></a>2、response常用方法</h3><p><strong>sendRedirect(String path)：****重定向</strong>，实现页面之间的跳转，不能传参。</p><blockquote><p>转发getRequestDispatcher和重定向sendRedirect的区别:<br>转发是将同一个请求传给下一个页面，重定向是创建一个新的请求传给下一个页面，之前的请求结束生命周期。</p></blockquote><blockquote><p>转发︰同一个请求在服务器之间传递，地址栏不变，也叫服务器跳转。<br>重定向︰由客户端发送一次新的请求来访问跳转后的目标资源，地址栏改变，也叫客户端跳转。</p><p>如果两个页面之间需要通过request来传值，则必须使用转发，不能使用重定向。</p></blockquote><h3 id="3、session"><a href="#3、session" class="headerlink" title="3、session"></a>3、session</h3><h4 id="①用户会话介绍"><a href="#①用户会话介绍" class="headerlink" title="①用户会话介绍"></a>①用户会话介绍</h4><blockquote><p>会话技术：标记来自客户端的请求，让服务器知道请求来自哪里。</p><p>会话：客户端发生的一系列连续的请求与响应过程（浏览器打开到关闭）。</p><p>会话状态：至浏览器与服务器在进行会话过程中产生的状态信息，借助会话状态，服务器可以把属于同一会话的一系列请求与响应关联起来。</p></blockquote><blockquote><p>会话的实现：session和cookie</p></blockquote><h4 id="②session介绍"><a href="#②session介绍" class="headerlink" title="②session介绍"></a>②session介绍</h4><blockquote><p>属于一会话的请求都有一个相同的sessionID作为标识符，存在于服务端。</p></blockquote><p>session常用方法</p><ol><li><strong>String getId()：</strong>获取sessionID。</li><li><strong>void setMaxInactiveInterval(int interval)：</strong>设置session失效时间，单位为秒。</li><li><strong>int getMaxInactiveInterval()：</strong>获取当前session失效时间。</li><li><strong>void invalidate()：</strong>设置session立刻失效。</li><li><strong>void setAttribute(String key,Object value)。</strong></li><li><strong>void getAttribute(String key,Object value)</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//中间处理</span><br><span class="hljs-keyword">package</span> com.zll;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserLogin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String name = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String pwd = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-keyword">if</span>(name.equals(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; pwd.equals(<span class="hljs-string">&quot;123123&quot;</span>))&#123;<br>            HttpSession session = req.getSession();<br>            session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;main.jsp&quot;</span>).forward(req,resp);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            resp.sendRedirect(<span class="hljs-string">&quot;login.jsp&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--登录页面--&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;login&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;/login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    username:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>    password:&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>/&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--首页--&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;main&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    String name = (String) session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>%&gt;<br>欢迎回来！&lt;%=name%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>当登录成功之后，不关闭浏览器直接进入main.jsp时，使用session仍然可以看见admin用户名。若不使用session而是直接使用req.setAttribute()，则在下一次直接进入时，admin会消失。</p><h4 id="③cookie介绍"><a href="#③cookie介绍" class="headerlink" title="③cookie介绍"></a>③cookie介绍</h4><blockquote><p>cookie存在于客户端，是存在服务器本地的一个小型文本文件</p><p>java提供了一个cookie类。</p></blockquote><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--创建：key，value --&gt;<br>&lt;!-- 不建议存入中文 --&gt;<br>&lt;% Cookie newCookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>); %&gt;<br>&lt;!-- 添加 --&gt;<br>&lt;% response.addCookie(newCookie); %&gt;<br><br>&lt;!-- 取出 --&gt;<br>&lt;% Cookie cookies[] = request.getCookies(); %&gt;<br>&lt;!-- 遍历 --&gt;<br>&lt;%<br>    <span class="hljs-keyword">for</span>(Cookie cookie:cookies)&#123;<br>        <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;name&quot;</span>))&#123;<br>            out.write(cookie.getName()+<span class="hljs-string">&#x27;:&#x27;</span>+cookie.getValue());<br>        &#125;<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-comment">//1.设置失效时间，单位为秒，默认-1，浏览器关闭时失效</span><br>cookie.setMaxAge(<span class="hljs-number">1000</span>);<br><span class="hljs-comment">//2.查看失效时间</span><br><span class="hljs-keyword">int</span> times = cookie.getMaxAge();<br><span class="hljs-comment">//3.获取cookie的name</span><br>String name = cookie.getName();<br><span class="hljs-comment">//4.获取cookie的value</span><br>String value = cookie.getValue();<br>!%&gt;<br></code></pre></td></tr></table></figure><h4 id="④session与cookie比较"><a href="#④session与cookie比较" class="headerlink" title="④session与cookie比较"></a>④session与cookie比较</h4><table><thead><tr><th></th><th></th><th>保存地点</th><th>保存类型</th><th>失效时间</th><th>其他</th></tr></thead><tbody><tr><td>session</td><td></td><td>服务器</td><td>object</td><td>会话结束</td><td>保存重要信息</td></tr><tr><td>cookie</td><td></td><td>浏览器</td><td>String</td><td>浏览器关闭，长期保存，与会话无关</td><td>保存不重要信息</td></tr></tbody></table><blockquote><p>session</p><ul><li>存取：setAttribute(),getAttribute()。</li><li>退出登录：session.invalidate()。</li><li>生命周期：</li></ul><blockquote><ul><li>服务端：web应用重启就销毁。</li><li>客户端：服务器关闭就销毁。</li></ul></blockquote><ul><li><p>cookie</p></li><li><p>存取：response.addCookie(),request.getCookies()。</p></li><li><p>退出登录：cookie.setMaxAge(0);</p></li><li><p>生命周期：</p><blockquote><ul><li>服务端：不随服务器重启而销毁。</li><li>客户端：默认浏览器关闭销毁，但可以通过setMaxAge()来设置。</li></ul></blockquote></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaWeb学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JAVAEE】学习二：Servlet</title>
    <link href="/2021/03/12/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%BA%8C%EF%BC%9AServlet/"/>
    <url>/2021/03/12/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%BA%8C%EF%BC%9AServlet/</url>
    
    <content type="html"><![CDATA[<h1 id="【JAVAEE】学习二：Servlet"><a href="#【JAVAEE】学习二：Servlet" class="headerlink" title="【JAVAEE】学习二：Servlet"></a>【JAVAEE】学习二：Servlet</h1><h2 id="一、servlet简介"><a href="#一、servlet简介" class="headerlink" title="一、servlet简介"></a>一、servlet简介</h2><blockquote><p>Servlet是Java Web开发的基石。</p><p>是一个与平台无关的组件。</p><p>客户端请求和与服务器上，或者服务器与数据库的中间层。</p></blockquote><blockquote><p>作用：</p><p>1、创建并返回基于客户端请求的动态HTML页面</p><p>2、与数据库通信</p></blockquote><blockquote><p>使用：</p><p>servlet是一组接口，自定义一个类来实现就是了。</p></blockquote><h2 id="二、Servlet实现"><a href="#二、Servlet实现" class="headerlink" title="二、Servlet实现"></a>二、Servlet实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zll;<br><br><span class="hljs-keyword">import</span> javax.jws.WebService;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">//Servlet有四个抽象方法:init()、getServletConfig()、service()、getServletInfo()</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-comment">//初始化操作</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//获取servlet本身的一些信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//service方法时最核心的，进行业务逻辑处理</span><br>        String id = servletRequest.getParameter(<span class="hljs-string">&quot;id&quot;</span>);        <span class="hljs-comment">//接收客户端传来的参数</span><br>        System.out.println(<span class="hljs-string">&quot;我是服务器，我已接收到客户端请求,参数是&quot;</span> + id);<br>        servletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>); <span class="hljs-comment">//解决浏览器乱码问题</span><br>        servletResponse.getWriter().write(<span class="hljs-string">&quot;你好，客户端！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//返回一些字符串信息，如作者、版本、版权。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//进行销毁操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于浏览器不能直接访问servlet，所以要通过映射的方式来访问，要我们自己配置。</p><blockquote><p>两种方法：基于xml文件，基于注解</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 基于xml文件 --&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Myservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zll.MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Myservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/myservlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基于注解</span><br><span class="hljs-meta">@WebServlet(&quot;/myservlet2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、Servlet生命周期"><a href="#三、Servlet生命周期" class="headerlink" title="三、Servlet生命周期"></a>三、Servlet生命周期</h2><blockquote><p>生命周期过程：</p><p>1.通过映射实例化Servlet对象</p><p>2.调用init方法初始化</p><p>3.调用service完成业务逻辑</p><p>4.调用destroy方法，释放当前对象</p></blockquote><blockquote><p>生命周期方法：无参构造函数–&gt;init()–&gt;service()–&gt;destroy()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zll;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/life&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LifeServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LifeServlet</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1.当浏览器访问Servlet时，Tomcat会查询当前的实例化对象是否存在，如果不存在，则通过映射机制动态创建对象；如果存在，直接执行生命周期第三步（完成业务逻辑部分）。</span><br>        <span class="hljs-comment">//执行一次</span><br>        System.out.println(<span class="hljs-string">&quot;1.创建对象&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-comment">//2.初始化对象</span><br>        <span class="hljs-comment">//执行一次</span><br>        System.out.println(<span class="hljs-string">&quot;2.初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//3.处理业务逻辑</span><br>        <span class="hljs-comment">//执行n次</span><br>        System.out.println(<span class="hljs-string">&quot;3.处理业务&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//4.卸载对象</span><br>        <span class="hljs-comment">//执行一次</span><br>        System.out.println(<span class="hljs-string">&quot;4.卸载对象&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、servletConfig介绍"><a href="#四、servletConfig介绍" class="headerlink" title="四、servletConfig介绍"></a>四、servletConfig介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LifeServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-comment">//servletConfig对象其实是一个接口，用来描述Servlet基本信息</span><br>        <br>        <span class="hljs-comment">//方法1：getServletName()，获取servlet名称，全类名</span><br>        System.out.println(servletConfig.getServletName());<br>        <br>        <span class="hljs-comment">//方法2：getInitParameter()，获取初始化参数，要用这个方法需要基于xml配置</span><br>        servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <br>        <span class="hljs-comment">//方法3：getInitParameterNames()，取出所有init参数名,无序遍历init参数</span><br>        <span class="hljs-comment">//泛型，加强数据安全性，类型限制</span><br>        Enumeration&lt;String&gt; enumeration = servletConfig.getInitParameterNames();<br>        <span class="hljs-keyword">while</span>(enumeration.hasMoreElements())&#123;<br>            String element = enumeration.nextElement();<br>            System.out.println(<span class="hljs-string">&quot;Config:&quot;</span>+element);<span class="hljs-comment">//username</span><br>        &#125;<br>        <br>        <span class="hljs-comment">//方法4：getServletContext()，返回servletcntext对象</span><br>        <span class="hljs-comment">//servletcntext对象：是servlet的上下文，是整个servlet的管理者</span><br>        <span class="hljs-comment">//servletcntext也有servletConfig的方法，返回来的数据是全局的</span><br>        ServletContext servletContext = servletConfig.getServletContext();<br>        Enumeration&lt;String&gt; enumerations = servletContext.getInitParameterNames();<br>        <span class="hljs-keyword">while</span>(enumerations.hasMoreElements())&#123;<br>            String element = enumerations.nextElement();<br>            System.out.println(<span class="hljs-string">&quot;context:&quot;</span>+element);<span class="hljs-comment">//age</span><br>        &#125;<br>        <span class="hljs-comment">//当前应用的名称</span><br>        System.out.println(servletContext.getContextPath());<br>        <span class="hljs-comment">//tomcat版本</span><br>        System.out.println(servletContext.getServerInfo());<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        ServletConfig:侧重某一个servlet实例,局部</span><br><span class="hljs-comment">        ServletContext:侧重于整个servlet，他的身上也有init中参数的那些方法，全局</span><br><span class="hljs-comment">        * */</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//其他的这里省略没写</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 全局的参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>age<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Lifeservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zll.LifeServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 初始化的参数 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Lifeservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/life<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五、servlet层次结构"><a href="#五、servlet层次结构" class="headerlink" title="五、servlet层次结构"></a>五、servlet层次结构</h2><blockquote><p>Servlet -&gt; GenericServlet -&gt; HttpServlet</p><p>GenericServlet实现了Servlet接口，同时为它的子类屏蔽了不常用方法。</p><p>开发者定义的Servlet类只需要继承HttpServlet即可，重写doPOST和doGET。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zll;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/myhttp&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Httm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;GET&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;POST&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JAVAEE】学习一：Tomcat</title>
    <link href="/2021/03/12/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%B8%80%EF%BC%9ATomcat/"/>
    <url>/2021/03/12/%E3%80%90JAVAEE%E3%80%91%E5%AD%A6%E4%B9%A0%E4%B8%80%EF%BC%9ATomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="【JAVAEE】学习一：Tomcat"><a href="#【JAVAEE】学习一：Tomcat" class="headerlink" title="【JAVAEE】学习一：Tomcat"></a>【JAVAEE】学习一：Tomcat</h1><blockquote><p>Tomcat 服务器是一个Web 应用服务器，是一个支持Servlet和JSP技术的容器。</p></blockquote><h2 id="一、各服务器区别"><a href="#一、各服务器区别" class="headerlink" title="一、各服务器区别"></a>一、各服务器区别</h2><h3 id="1、Web服务器"><a href="#1、Web服务器" class="headerlink" title="1、Web服务器"></a>1、Web服务器</h3><blockquote><p>只需支持HTTP协议、HTML文档格式及URL。</p><p>主要功能：传送页面使浏览器可以浏览。</p><p>通常情况下web服务器和HTTP服务器是相等的。通俗讲web服务器就是专门用来处理HTTP请求的。</p><p>Apache、Nginx、IIS、Tomcat都属于Web服务器。</p></blockquote><h3 id="2、应用服务器"><a href="#2、应用服务器" class="headerlink" title="2、应用服务器"></a>2、应用服务器</h3><blockquote><p>主要功能：为客户端应用程序提供可调用的方法（应用程序提供(serves)商业逻辑）。</p><p>JBoss、Weblogic、WebSphere都属于应用服务器。</p></blockquote><p>Tomcat既能为动态网页服务（Servlet和JSP能根据实时需要产生动态网页），又能为静态网页提供支持，具有了解释和执行服务器端代码的能力，所以可以称作为<strong>轻量级应用服务器</strong>。</p><h2 id="二、Tomcat安装"><a href="#二、Tomcat安装" class="headerlink" title="二、Tomcat安装"></a>二、Tomcat安装</h2><p>直接去官网下载就行了，解压后配置环境变量。</p><p>配置:</p><p><img src="/images/tomcat1.png"></p><p><img src="/images/tomcat2.png"></p><h2 id="三、Tomcat文件说明"><a href="#三、Tomcat文件说明" class="headerlink" title="三、Tomcat文件说明"></a>三、Tomcat文件说明</h2><p> <img src="/images/tomcat3.png"></p><blockquote><p>bin：存放各个平台下启动和停止tomcat服务的脚本文件。</p><p>conf：存放tomcat服务器的各种配置文件。</p><p>lib：存放tomcat服务器所需要的jar包。</p><p>logs：存放日志。</p><p>temp：tomcat运行时的临时文件。</p><p>webapps：允许客户端访问的资源（java程序）。</p><p>work：存放tomcat将jsp转换成的Servlet文件。</p></blockquote><h2 id="四、第一个JAVAEE项目"><a href="#四、第一个JAVAEE项目" class="headerlink" title="四、第一个JAVAEE项目"></a>四、第一个JAVAEE项目</h2><p>2020.2创建项目参考 <a href="https://www.jetbrains.com/help/idea/2020.2/creating-and-running-your-first-java-ee-application.html">IDEA官网2020.2</a></p><p>2020.1及以前参考<a href="https://www.jetbrains.com/help/idea/2020.1/creating-and-running-your-first-java-ee-application.html#creating-a-project">IDEA官网2020.1</a></p><p>创建好了之后就配置tomcat</p><p><img src="/images/tomcat4.png" alt="image-20210312144619787"></p><p><img src="/images/tomcat5.png"></p><p><img src="/images/tomcat6.png"></p><p><img src="/images/tomcat7.png"></p><p><img src="/images/tomcat8.png"></p><p><img src="/images/tomcat9.png"></p><p>最后apply –&gt; ok</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【web技术】AJAX复习梳理</title>
    <link href="/2021/03/11/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91AJAX%E5%A4%8D%E4%B9%A0%E6%A2%B3%E7%90%86/"/>
    <url>/2021/03/11/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91AJAX%E5%A4%8D%E4%B9%A0%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="【AJAX】AJAX复习梳理"><a href="#【AJAX】AJAX复习梳理" class="headerlink" title="【AJAX】AJAX复习梳理"></a>【AJAX】AJAX复习梳理</h1><h2 id="一、AJAX介绍"><a href="#一、AJAX介绍" class="headerlink" title="一、AJAX介绍"></a>一、AJAX介绍</h2><blockquote><p>Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p></blockquote><blockquote><p>优点：无需刷新页面，可以部分更新。</p><p>缺点：没有浏览历史，不能回退；存在跨域问题；SEO不友好。</p></blockquote><blockquote><p>扩展：同步请求和异步请求</p><p>同步请求：完成请求的时候才能看到响应结果，在这个过程中只能等待</p><p>异步请求：等待响应，在此期间，浏览器不阻塞，可以做其他事，知道服务器响应结束，再通知你回来。 </p><p>同步请求整个页面都会刷新，异步请求是局部刷新</p></blockquote><h2 id="二、AJAX使用"><a href="#二、AJAX使用" class="headerlink" title="二、AJAX使用"></a>二、AJAX使用</h2><blockquote><p>AJAX对象：XMLHttpRequest对象，专门用来发送异步请求的对象，也可发送同步</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xmlhttp;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax_demo</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">////1.创建XMLHttpRequest对象</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.XMLHttpRequest)&#123;<br>        xmlhttp = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        xmlhttp = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2.注册回调函数</span><br>    <span class="hljs-comment">//readystate:xmlhttp对象中的属性，表示状态0,1,2,3,4</span><br>    <span class="hljs-comment">//自动转换</span><br>    <span class="hljs-comment">//xmlhttp.responseType = &#x27;json&#x27;;</span><br>    xmlhttp.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//4:服务端返回了所有结果</span><br>        <span class="hljs-keyword">if</span>(xmlhttp.readyState == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-comment">//判断响应状态码</span><br>            <span class="hljs-keyword">if</span>(xmlhttp.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xmlhttp.status &lt; <span class="hljs-number">300</span>)&#123;<br>                <span class="hljs-comment">//响应头</span><br>                <span class="hljs-built_in">console</span>.log(xmlhttp.status);<span class="hljs-comment">//状态码</span><br>                <span class="hljs-built_in">console</span>.log(xmlhttp.statusText);<span class="hljs-comment">//状态字符码</span><br>                <span class="hljs-built_in">console</span>.log(xmlhttp.getAllResponseHeaders());<span class="hljs-comment">//所有响应头</span><br>                <span class="hljs-comment">//响应体</span><br>                <span class="hljs-built_in">console</span>.log(xmlhttp.response);<br>                <span class="hljs-comment">//responseText获得字符串形式的响应数据。</span><br><span class="hljs-comment">//responseXML获得 XML 形式的响应数据。</span><br>                <br>                <span class="hljs-comment">//手动装换：将服务器装换的json字符串转换为对象</span><br>                <span class="hljs-keyword">var</span> str = xmlhttp.responseText;<br>                <span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.parse(str);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//3.初始化url和请求方法</span><br>    xmlhttp.open(<span class="hljs-string">&quot;POST|GET&quot;</span>,<span class="hljs-string">&quot;URL&quot;</span>,<span class="hljs-string">&quot;true|false&quot;</span>);<br>    <span class="hljs-comment">//设置请求头</span><br>    xmlhttp.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/x-www-form-urlencode&#x27;</span>);<br>    <span class="hljs-comment">//4发送</span><br>    xmlhttp.send();<span class="hljs-comment">//如果需要传递数据，可以把数据作为参数（post）</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//get添加参数</span><br>xmlhttp.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;URL?id=1&amp;name=lisi&#x27;</span>);<br><span class="hljs-comment">//post添加参数</span><br>xmlhttp.open(<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;url&#x27;</span>);<br>xmlhttp.send(<span class="hljs-string">&#x27;a=100&amp;b=200&#x27;</span>);<br><span class="hljs-comment">//xmlhttp.send(&#x27;a:100&amp;b:200&#x27;);</span><br></code></pre></td></tr></table></figure><h4 id="处理服务端传来的json数据"><a href="#处理服务端传来的json数据" class="headerlink" title="处理服务端传来的json数据"></a>处理服务端传来的json数据</h4><blockquote><p>两种方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.手动转换</span><br><span class="hljs-keyword">var</span> str = xmlhttp.responseText;<br><span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.parse(str);<br><span class="hljs-comment">//2.自动转换</span><br>xmlhttp.responseType = <span class="hljs-string">&#x27;json&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="三、XMLHttpRequest对象属性"><a href="#三、XMLHttpRequest对象属性" class="headerlink" title="三、XMLHttpRequest对象属性"></a>三、XMLHttpRequest对象属性</h2><h3 id="1-readystate属性"><a href="#1-readystate属性" class="headerlink" title="1.readystate属性"></a>1.readystate属性</h3><blockquote><p>此属性0-4的值，共五种状态</p><p>0 请求未初始化</p><p>1 服务器连接已经建立</p><p>2 请求已接收</p><p>3 请求处理中</p><p>4 请求已完成，响应已就绪</p></blockquote><h3 id="2-status属性"><a href="#2-status属性" class="headerlink" title="2.status属性"></a>2.status属性</h3><blockquote><p>响应的码状，五种类型的值</p><p>1XX</p><p>2XX    服务端正常响应客户端</p><p>3XX    服务端资源没有发生变化</p><p>4XXX    资源错误</p><p>5XX    服务端错误</p></blockquote><h3 id="3-responseText和responseXML"><a href="#3-responseText和responseXML" class="headerlink" title="3.responseText和responseXML"></a>3.responseText和responseXML</h3><blockquote><p>responseText表示以文本的信息获取服务端的响应，获取就是字符串</p><p>JSON.parse(str):把json字符串解析成对象</p><p>JSON.stringify(obj):把对象格式化成字符串</p></blockquote><blockquote><p>responseXML 当服务端以XML格式返回给客户端时，则使用此属性接收，获取的就是DOM对象</p></blockquote><h2 id="四、AJAX其他问题处理"><a href="#四、AJAX其他问题处理" class="headerlink" title="四、AJAX其他问题处理"></a>四、AJAX其他问题处理</h2><h3 id="1、解决IE缓存"><a href="#1、解决IE缓存" class="headerlink" title="1、解决IE缓存"></a>1、解决IE缓存</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;URL?id=1&amp;name=lisi?t=&#x27;</span>+<span class="hljs-built_in">Date</span>.now());<br></code></pre></td></tr></table></figure><h3 id="2、解决网络超时与异常"><a href="#2、解决网络超时与异常" class="headerlink" title="2、解决网络超时与异常"></a>2、解决网络超时与异常</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.timeout = <span class="hljs-number">2000</span>;<br>xmlhttp.ontimeout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;网络超时&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、AJAX取消请求"><a href="#3、AJAX取消请求" class="headerlink" title="3、AJAX取消请求"></a>3、AJAX取消请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.abort();<br></code></pre></td></tr></table></figure><h3 id="4、解决重复请求"><a href="#4、解决重复请求" class="headerlink" title="4、解决重复请求"></a>4、解决重复请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//加一个标识符</span><br><span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-comment">//是否正在发请求，是则取消，创建新的</span><br>    xmlhttp.abort();<br>&#125;<br>flag = <span class="hljs-literal">true</span>;<br>xmlhttp.open(...);<br>xmlhttp.send();<br>x.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(xmlhttp.readyState === <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-comment">//修改回来</span><br>        flag==<span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、jQuery发送AJAX请求"><a href="#五、jQuery发送AJAX请求" class="headerlink" title="五、jQuery发送AJAX请求"></a>五、jQuery发送AJAX请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//get</span><br>$.get(<span class="hljs-string">&#x27;url&#x27;</span>,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;,json);<br><span class="hljs-comment">//post</span><br>$.post(<span class="hljs-string">&#x27;url&#x27;</span>,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;)<br><span class="hljs-comment">//通用方法</span><br>$.ajax(&#123;<br>    url:<span class="hljs-string">&#x27;&#x27;</span>,<br>    data:<span class="hljs-string">&#x27;&#x27;</span>,<br>    type:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>    dataType: <span class="hljs-string">&#x27;json&#x27;</span>,<br>    timeout: <span class="hljs-number">2000</span>,<br>    success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(data);<br>    &#125;,<br>    error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;出错&quot;</span>);<br>    &#125;,<br>    headers:&#123;<br>        a:<span class="hljs-number">100</span>,<br>        b:<span class="hljs-number">20</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="六、fetch函数发送AJAX请求"><a href="#六、fetch函数发送AJAX请求" class="headerlink" title="六、fetch函数发送AJAX请求"></a>六、fetch函数发送AJAX请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fetch(<span class="hljs-string">&#x27;url&#x27;</span>,&#123;<br>    <span class="hljs-comment">//请求方法</span><br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    headers: &#123;<br>        name: <span class="hljs-string">&#x27;lat&#x27;</span><br>    &#125;,<br>    body:<span class="hljs-string">&#x27;hahahahahah&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">//return res.text();</span><br>    <span class="hljs-keyword">return</span> res.json();<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="七、跨域相关"><a href="#七、跨域相关" class="headerlink" title="七、跨域相关"></a>七、跨域相关</h2><blockquote><p>一种浏览器安全策略</p><p>同源：协议，域名，端口号必须完全相同</p><p>违背同源策略就是跨域</p></blockquote><h3 id="1-jsonp"><a href="#1-jsonp" class="headerlink" title="1.jsonp"></a>1.jsonp</h3><blockquote><p>非官方</p><p>只支持get</p><p>借助script标签的跨域功能</p></blockquote><h4 id="原生jsonp"><a href="#原生jsonp" class="headerlink" title="原生jsonp"></a>原生jsonp</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> <span class="hljs-keyword">in</span> = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">const</span> p = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br>        <br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">            input.style.border = <span class="hljs-string">&#x27;solid 1px #f00&#x27;</span>;</span><br>            p.innerHTML = data.msg;<br>        &#125;<br><span class="javascript">        <span class="hljs-keyword">in</span>.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> username = <span class="hljs-built_in">this</span>.value;</span><br><span class="javascript">            <span class="hljs-comment">//检查用户名是否存在</span></span><br><span class="javascript">            <span class="hljs-comment">//发请求</span></span><br><span class="javascript">            <span class="hljs-comment">//1.创建script标签</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-comment">//2.设置标签scr属性</span></span><br><span class="javascript">            script.src = <span class="hljs-string">&#x27;url&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-comment">//3.将script标签插入</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.body.appendChild(script);</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//后端代码</span><br>app.all(<span class="hljs-string">&#x27;url&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request,response</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> data = &#123;<br>        exist:<span class="hljs-number">1</span>,<br>        msg:<span class="hljs-string">&#x27;存在&#x27;</span><br>    &#125;;<br>    <span class="hljs-comment">//转化为字符型</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringfy(data);<br>    <span class="hljs-comment">//返回结果,返回一个js执行代码</span><br>    response.end(<span class="hljs-string">`handle(<span class="hljs-subst">$&#123;str&#125;</span>)`</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="jQuery写jsonp"><a href="#jQuery写jsonp" class="headerlink" title="jQuery写jsonp"></a>jQuery写jsonp</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>&lt;div id=<span class="hljs-string">&quot;reslut&quot;</span>&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>       $(<span class="hljs-string">&quot;button&quot;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//getJSON() 方法使用 AJAX 的 HTTP GET 请求获取 JSON 数据。</span><br>        $.getJSON(<span class="hljs-string">&#x27;url&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            $.(<span class="hljs-string">&quot;#result&quot;</span>).html(<span class="hljs-string">`</span><br><span class="hljs-string">你好哈哈哈哈`</span>)<br>        &#125;)<br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//后端代码</span><br>app.all(<span class="hljs-string">&#x27;url&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request,response</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> data = &#123;<br>        exist:<span class="hljs-number">1</span>,<br>        msg:<span class="hljs-string">&#x27;存在&#x27;</span><br>    &#125;;<br>    <span class="hljs-comment">//转化为字符型</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringfy(data);<br>    <span class="hljs-comment">//接受回调函数jquery的回调函数</span><br>    <span class="hljs-keyword">let</span> cd = request.query.callback;<br>    <span class="hljs-comment">//返回结果,返回一个js执行代码</span><br>    response.end(<span class="hljs-string">`<span class="hljs-subst">$&#123;cd&#125;</span>(<span class="hljs-subst">$&#123;str&#125;</span>)`</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>jQuery扩展，发送ajax请求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax&#123;<br>  url:<span class="hljs-string">&quot;&quot;</span>,<br>  type:<span class="hljs-string">&quot;&quot;</span>,<br>  datatype:<span class="hljs-string">&quot;&quot;</span>,<br>  data:<span class="hljs-string">&quot;&quot;</span>,<br>  success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>)</span>&#123;<br>  &#125;<br>  error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-CORS"><a href="#2-CORS" class="headerlink" title="2.CORS"></a>2.CORS</h3><blockquote><p>CORS(Cross-Origin Resource Sharing)，跨域资源共享。</p><p>官方.</p><p>不需要在客户端做任何特殊的操作，完全在服务器中进行处理.</p><p>支持get和l post 请求。</p><p>新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。</p></blockquote><blockquote><p>工作原理：</p><p>通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p></blockquote><blockquote><p>CORS的使用</p><p>服务器端的设置:<br>router.get(“/testAJAX”, function (req , res){}</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>&lt;div id=<span class="hljs-string">&quot;reslut&quot;</span>&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;button&quot;</span>);<br>btn.onclick = =<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> x = <span class="hljs-keyword">new</span> XMLHttpRequst();<br>    x.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;url&#x27;</span>);<br>    x.send();<br>    x.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(x.readyState === <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">if</span>(x.status &gt;=<span class="hljs-number">200</span> &amp;&amp; x.status &lt; <span class="hljs-number">300</span>)&#123;<br>                <span class="hljs-built_in">console</span>.log(x.response);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//后端代码</span><br>app.all(<span class="hljs-string">&#x27;url&#x27;</span>,(request,response)=&gt;&#123;<br>    <span class="hljs-comment">//允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>    <span class="hljs-comment">//允许自定义响应头</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>    <span class="hljs-comment">//允许任何方式发送请求</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Method&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端技术基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>AJAX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【web技术】axios知识点梳理</title>
    <link href="/2021/03/10/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91axios%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/"/>
    <url>/2021/03/10/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91axios%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="【axios】axios知识点梳理"><a href="#【axios】axios知识点梳理" class="headerlink" title="【axios】axios知识点梳理"></a>【axios】axios知识点梳理</h1><h2 id="一、axios介绍"><a href="#一、axios介绍" class="headerlink" title="一、axios介绍"></a>一、axios介绍</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><p>基于promise对ajax的封装</p><blockquote><p>可以通过浏览器向远端服务器发送ajax请求</p><p>可以通过node向远端服务器发送HTTP请求</p></blockquote><h2 id="二、axios发送请求"><a href="#二、axios发送请求" class="headerlink" title="二、axios发送请求"></a>二、axios发送请求</h2><h3 id="1、作为函数发送请求"><a href="#1、作为函数发送请求" class="headerlink" title="1、作为函数发送请求"></a>1、作为函数发送请求</h3><blockquote><p>axios作为函数来发送请求 </p><p>传一个配置对象为参数</p></blockquote><blockquote><p>配置对象：①对象中属性名固定，②属性的作用固定</p></blockquote><h4 id="1-get"><a href="#1-get" class="headerlink" title="(1)get"></a>(1)get</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送get无参请求</span><br>axios(&#123;<br>    <span class="hljs-comment">//不写method默认GET方式</span><br>    method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送get有参请求</span><br><br><span class="hljs-comment">//1.直接拼接</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx?id=1&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br><br><span class="hljs-comment">//2.使用params</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx&#x27;</span>,<br>    params: &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> &#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-post"><a href="#2-post" class="headerlink" title="(2)post"></a>(2)post</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送post无参请求</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送post有参请求</span><br><br><span class="hljs-comment">//1.data:&#123;&#125;</span><br><span class="hljs-comment">//采用data对象默认以json格式请求</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx&#x27;</span>,<br>    data:&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>&#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br><br><span class="hljs-comment">//2.data:&quot;naem=lisi&amp;age=10&quot;</span><br><span class="hljs-comment">//以urlenocde格式发送</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;POST</span><br><span class="hljs-string">    url: &#x27;</span>xxxxx/xxxx<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#125;).then(res=&gt;&#123;</span><br><span class="hljs-string">    console.log(res);</span><br><span class="hljs-string">&#125;).catch(err=&gt;&#123;</span><br><span class="hljs-string">    console.log(err);</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><blockquote><p>总结：</p><p>axios发送post请求使用data对象默认发送的参数为json，有三种解决办法。</p><p>1.用params答题data</p><p>2.使用urlencode格式：data:”name=lisi&amp;age=100”</p><p>3.服务器端给接受的参数设置@requestBody</p></blockquote><h3 id="2、作为对象发送请求"><a href="#2、作为对象发送请求" class="headerlink" title="2、作为对象发送请求"></a>2、作为对象发送请求</h3><h4 id="1-get-1"><a href="#1-get-1" class="headerlink" title="(1)get"></a>(1)get</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送get无参请求</span><br>axios.get(<span class="hljs-string">&#x27;url&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送get有参请求</span><br>axios.get(<span class="hljs-string">&#x27;url&#x27;</span>,&#123;<span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>&#125;&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-post-1"><a href="#2-post-1" class="headerlink" title="(2)post"></a>(2)post</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送post无参请求</span><br>axios.post(<span class="hljs-string">&#x27;url&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送post有参请求</span><br>axios.get(<span class="hljs-string">&#x27;url&#x27;</span>,<span class="hljs-string">&#x27;name=lisi&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="三、并发请求"><a href="#三、并发请求" class="headerlink" title="三、并发请求"></a>三、并发请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.all([<br>    axios.get(<span class="hljs-string">&#x27;url1&#x27;</span>),<br>    axios.get(<span class="hljs-string">&#x27;urel2&#x27;</span>)<br>]).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="四、全局配置"><a href="#四、全局配置" class="headerlink" title="四、全局配置"></a>四、全局配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.defaults.baseURL = <span class="hljs-string">&#x27;url&#x27;</span>;<br>axios.defaults.timeoue = <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h2 id="五、axios实例"><a href="#五、axios实例" class="headerlink" title="五、axios实例"></a>五、axios实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建事例</span><br><span class="hljs-keyword">let</span> lat = axios.create(&#123;<br>    baseURL: <span class="hljs-string">&#x27;url&#x27;</span>,<br>    timeout: <span class="hljs-number">2000</span><br>&#125;);<br><span class="hljs-comment">//使用</span><br>lat(&#123;<br>    method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;url&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="六、拦截器"><a href="#六、拦截器" class="headerlink" title="六、拦截器"></a>六、拦截器</h2><blockquote><p>作用：在网络请求发起请求或者响应时对操作进行相应的处理，比如：</p><p>1.发送请求时添加加载动画</p><p>2.使用token认证时强制登录</p><p>3.响应时数据处理与过滤</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//请求拦截</span><br>axios.interceptor.request.use(<span class="hljs-function"><span class="hljs-params">config</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入请求拦截&quot;</span>);<br>    <span class="hljs-comment">//放行请求</span><br>    <span class="hljs-keyword">return</span> config;<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求失败&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br><br><span class="hljs-comment">//响应拦截</span><br>axios.interceptor.response.use(<span class="hljs-function"><span class="hljs-params">config</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入响应拦截&quot;</span>);<br>    <span class="hljs-comment">//放行响应</span><br>    <span class="hljs-keyword">return</span> config.data;<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求失败&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="七、axios在vue中的封装"><a href="#七、axios在vue中的封装" class="headerlink" title="七、axios在vue中的封装"></a>七、axios在vue中的封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//安装axios</span><br>npm install axios --save<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入后就可以使用了</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-comment">//使用</span><br>axios(&#123;<br>url:<span class="hljs-string">&#x27;http://xxxxxxxxxxxx&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第一种方式</span><br><span class="hljs-comment">//项目中创建js文件</span><br><span class="hljs-comment">//封装axios函数，传三个参数</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config,success,fail</span>)</span>&#123;<br>    axios(&#123;<br>        url:config<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        success(res)<br>    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>        fail(err);<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sds/dsa&#x27;</span><span class="hljs-comment">//文件位置</span><br>request(<span class="hljs-string">&#x27;http//xxxxx&#x27;</span>,<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(res);&#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(err);&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第二种方式</span><br><span class="hljs-comment">//项目中创建js文件</span><br><span class="hljs-comment">//封装axios函数，传一个参数对象</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>)</span>&#123;<br>  axios.defaults.baseURL:<span class="hljs-string">&#x27;http://xxxxx&#x27;</span>;<br>  axios(config.url).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>config.success(res);<br>  &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>        config.fail(res);<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sds/dsa&#x27;</span><span class="hljs-comment">//文件位置</span><br>request(&#123;<br>    url:<span class="hljs-string">&#x27;getAllStudent&#x27;</span>,<br>    success:<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res);<br>    &#125;,<br>    fail:<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第三种方式，promise</span><br><span class="hljs-comment">//项目中创建js文件</span><br><span class="hljs-comment">//封装axios函数，创建axios实例</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> newVar = axios.create(&#123;<br>        baseURL:<span class="hljs-string">&#x27;http://xxxxx&#x27;</span>,<br>        timeout:<span class="hljs-number">5000</span>;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> promise(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>        newVar(config).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>            resolve(res);<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>            reject(err);<br>        &#125;)<br>    &#125;)<br>&#125;<br><span class="hljs-comment">//在需要使用的地方引入</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sds/dsa&#x27;</span><span class="hljs-comment">//文件位置</span><br>request(&#123;<br>    url:<span class="hljs-string">&#x27;getAllStudent&#x27;</span>;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第四种</span><br><span class="hljs-comment">//推荐</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> newVar = axios.create(&#123;<br>        baseURL:<span class="hljs-string">&#x27;http://xxxx&#x27;</span>;<br>        timeout:<span class="hljs-number">5000</span>;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> newVar(config);<br>&#125;<br><span class="hljs-comment">//调用者位置</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sds/dsa&#x27;</span><span class="hljs-comment">//文件位置</span><br>request(&#123;<br>    url:<span class="hljs-string">&#x27;getAllStudent&#x27;</span>;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端技术基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【sql Server】知识点梳理</title>
    <link href="/2021/03/09/%E3%80%90sqlServer%E3%80%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/"/>
    <url>/2021/03/09/%E3%80%90sqlServer%E3%80%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库复习"><a href="#数据库复习" class="headerlink" title="数据库复习"></a>数据库复习</h1><h2 id="一、SQL语句-数据定义"><a href="#一、SQL语句-数据定义" class="headerlink" title="一、SQL语句-数据定义"></a>一、SQL语句-数据定义</h2><h3 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database stu_course<br>go<br><br>use stu_course<br></code></pre></td></tr></table></figure><h3 id="2、模式定义"><a href="#2、模式定义" class="headerlink" title="2、模式定义"></a>2、模式定义</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--为用户WANG定义了一个模式ST</span><br><span class="hljs-comment">--不指定模式名，自动将模式名设置为用户名</span><br><span class="hljs-keyword">CREATE</span> SCHEMA ST <span class="hljs-keyword">AUTHORIZATION</span> WANG;<br></code></pre></td></tr></table></figure><h3 id="3、删除模式"><a href="#3、删除模式" class="headerlink" title="3、删除模式"></a>3、删除模式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> SCHEMA<span class="hljs-operator">&lt;</span>模式名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>CASCADE<span class="hljs-operator">|</span>RESTRICT<span class="hljs-operator">&gt;</span>;<br><span class="hljs-comment">--CASCADE:删除模式及其所有数据库对象</span><br><span class="hljs-comment">--RESTRICT:如定义有对象，则拒绝执行该删除语句</span><br></code></pre></td></tr></table></figure><h3 id="4、表定义"><a href="#4、表定义" class="headerlink" title="4、表定义"></a>4、表定义</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--建立“学生”表Student，学号是主码，姓名取值唯一。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Student<br>(Sno <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-comment">/* 列级完整性约束条件*/</span><br>Sname <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">UNIQUE</span>, <span class="hljs-comment">/* Sname取唯一值*/</span><br>Ssex <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>Sage <span class="hljs-type">SMALLINT</span>,<br>Sdept <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>));<br><span class="hljs-comment">-- 建立一个“课程”表Course</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Course<br>( Cno <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>Cname <span class="hljs-type">CHAR</span>(<span class="hljs-number">40</span>),<br>Cpno <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) ,<br>Ccredit <span class="hljs-type">SMALLINT</span>，<br><span class="hljs-keyword">FOREIGN</span> KEY (Cpno) <span class="hljs-keyword">REFERENCES</span> Course(Cno); <span class="hljs-comment">/*Cpno是外码,被参照表是Course,被参照列是Cno*/</span><br></code></pre></td></tr></table></figure><h3 id="5、修改表"><a href="#5、修改表" class="headerlink" title="5、修改表"></a>5、修改表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--向Student表增加“入学时间”列，其数据类型为日期型。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">ADD</span> S_entrance <span class="hljs-type">DATE</span>;<br><span class="hljs-comment">--不论基本表中原来是否已有数据，新增加的列一律为空值。</span><br><br><span class="hljs-comment">--将年龄的数据类型由字符型（假设原来的数据类型是字符型）改为整数。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> Sage <span class="hljs-type">INT</span>;<br><br><span class="hljs-comment">--删除列</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tableName <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> columnName<br><br><span class="hljs-comment">--指定表中某列默认数据</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dbo.doc_exz <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> col_b_def <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">50</span> <span class="hljs-keyword">FOR</span> column_b ;<br><br><span class="hljs-comment">--增加课程名称必须取唯一值的约束条件。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Course <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span>(Cname); <br></code></pre></td></tr></table></figure><h3 id="6、删除表"><a href="#6、删除表" class="headerlink" title="6、删除表"></a>6、删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*DROP TABLE &lt;表名&gt;［RESTRICT|CASCADE］；</span><br><span class="hljs-comment">RESTRICT：删除表是有限制的。</span><br><span class="hljs-comment"> 欲删除的基本表不能被其他表的约束所引用</span><br><span class="hljs-comment"> 如果存在依赖该表的对象，则此表不能被删除</span><br><span class="hljs-comment">CASCADE：删除该表没有限制。</span><br><span class="hljs-comment"> 在删除基本表的同时，相关的依赖对象一起删除</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">--删除Student表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> Student CASCADE;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">基本表定义被删除，数据被删除</span><br><span class="hljs-comment">表上建立的索引、视图、触发器等一般也将被删除</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="7、建立、删除索引"><a href="#7、建立、删除索引" class="headerlink" title="7、建立、删除索引"></a>7、建立、删除索引</h3><p>P88</p><h2 id="二、SQL语句-数据查询"><a href="#二、SQL语句-数据查询" class="headerlink" title="二、SQL语句-数据查询"></a>二、SQL语句-数据查询</h2><h3 id="1、单表查询"><a href="#1、单表查询" class="headerlink" title="1、单表查询"></a>1、单表查询</h3><h4 id="1-、选择表中的若干列"><a href="#1-、选择表中的若干列" class="headerlink" title="(1)、选择表中的若干列"></a>(1)、选择表中的若干列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询全体学生的详细记录。</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname，Ssex，Sage，Sdept <span class="hljs-keyword">as</span> 系别<br><span class="hljs-keyword">FROM</span> Student;<br></code></pre></td></tr></table></figure><h4 id="2-、选择表中的若干元组"><a href="#2-、选择表中的若干元组" class="headerlink" title="(2)、选择表中的若干元组"></a>(2)、选择表中的若干元组</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--（1）消除取值重复的行</span><br><span class="hljs-comment">--查询选修了课程的学生学号。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Sno<br><span class="hljs-keyword">FROM</span> SC;<br><span class="hljs-comment">--（2）查询满足条件的元组 </span><br><span class="hljs-comment">--①比较大小：等于小于大于。。。</span><br><span class="hljs-comment">--查询计算机科学系全体学生的名单。</span><br><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span>;<br><span class="hljs-comment">--②确定范围</span><br><span class="hljs-comment">--查询年龄在20~23岁（包括20岁和23岁）之间的学生的姓名、系别和年龄</span><br><span class="hljs-keyword">SELECT</span> Sname,Sdept,Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sage <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">23</span>；<br><span class="hljs-comment">--查询年龄不在20~23岁之间的学生姓名、系别和年龄</span><br><span class="hljs-keyword">SELECT</span> Sname, Sdept, Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sage<span class="hljs-operator">&lt;</span><span class="hljs-number">20</span> <span class="hljs-keyword">or</span> Sage<span class="hljs-operator">&gt;</span><span class="hljs-number">23</span>;<br><span class="hljs-comment">--③确定集合</span><br><span class="hljs-comment">--查询信息系（IS）、数学系（MA）和计算机科学系（CS）学生的姓名和性别。</span><br><span class="hljs-keyword">SELECT</span> Sname,Ssex<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-keyword">IN</span> ( <span class="hljs-string">&#x27;IS&#x27;</span>,<span class="hljs-string">&#x27;MA&#x27;</span>,<span class="hljs-string">&#x27;CS&#x27;</span> );<br><span class="hljs-comment">--IN|NOT IN</span><br><span class="hljs-comment">--OR</span><br><span class="hljs-comment">--④字符匹配</span><br><span class="hljs-comment">--查询所有姓刘学生的姓名、学号和性别。</span><br><span class="hljs-keyword">SELECT</span> Sname, Sno, Ssex<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘%&#x27;</span>;<br><span class="hljs-comment">--查询姓&quot;欧阳&quot;且全名为三个汉字的学生的姓名。</span><br><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;欧阳__&#x27;</span>;<br><span class="hljs-comment">-- %:多个 _：一个</span><br><span class="hljs-comment">-- LIKE|NOT LIKE</span><br><span class="hljs-comment">--⑤涉及空值的查询</span><br><span class="hljs-comment">--谓词： IS NULL 或 IS NOT NULL</span><br><span class="hljs-comment">--“IS” 不能用 “=” 代替</span><br><span class="hljs-comment">--某些学生选修课程后没有参加考试，所以有选课记录，但没有考试成绩。查询缺少成绩的学生的学号和相应的课程号。</span><br><span class="hljs-keyword">SELECT</span> Sno, Cno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-comment">--查所有有成绩的学生学号和课程号。</span><br><span class="hljs-keyword">SELECT</span> Sno, Cno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">--查询向银行贷过款的法人代码</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> eno <span class="hljs-keyword">from</span> LoanT<br></code></pre></td></tr></table></figure><h4 id="3-ORDER-BY子句"><a href="#3-ORDER-BY子句" class="headerlink" title="(3)ORDER BY子句"></a>(3)ORDER BY子句</h4><p> 可以按一个或多个属性列排序 </p><p> 升序：ASC；缺省值为升序 （默认）</p><p> 降序：DESC； 当排序列含空值时</p><p> ASC：排序列为空值的元组最后显示 </p><p> DESC：排序列为空值的元组最先显示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询选修了3号课程的学生的学号及其成绩，查询结果按分数降序排列。</span><br><span class="hljs-keyword">SELECT</span> Sno, Grade<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span><br><br><span class="hljs-comment">--查询选修了3号课程，成绩最高的那位学生的学号及其成绩</span><br><span class="hljs-keyword">SELECT</span> top <span class="hljs-number">1</span> Sno, Grade<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><h4 id="4-聚集函数"><a href="#4-聚集函数" class="headerlink" title="(4)聚集函数"></a>(4)聚集函数</h4><p> 计数</p><p>​        COUNT（*）</p><p>​        COUNT（[DISTINCT|ALL] &lt;列名&gt;） </p><p> 计算总和</p><p>​        SUM（[DISTINCT|ALL] &lt;列名&gt;） </p><p> 计算平均值</p><p>​        AVG（[DISTINCT|ALL] &lt;列名&gt;） </p><p> 最大最小值 </p><p>​        MAX（[DISTINCT|ALL] &lt;列名&gt;</p><p>​        MIN（[DISTINCT|ALL] &lt;列名&gt;）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询学生总人数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 学生总人数<br><span class="hljs-keyword">FROM</span> Student；<br><span class="hljs-comment">--查询选修了课程的学生人数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> Sno) 学生人数<br><span class="hljs-keyword">FROM</span> SC;<br><span class="hljs-comment">--计算1号课程的学生平均成绩。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(Grade) 平均成绩<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; 1 &#x27;</span>;<br><span class="hljs-comment">--查询选修2号课程的学生最高分数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(Grade) 最高分数<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment">--查询学生200215122选修课程的总学分数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(Ccredit)总学分数<br><span class="hljs-keyword">FROM</span> SC,Course<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200215122&#x27;</span> <span class="hljs-keyword">AND</span> SC.Cno<span class="hljs-operator">=</span>Course.Cno; <br></code></pre></td></tr></table></figure><h4 id="5-、GROUP-BY子句"><a href="#5-、GROUP-BY子句" class="headerlink" title="(5)、GROUP BY子句"></a>(5)、GROUP BY子句</h4><p> 未对查询结果分组，聚集函数将作用于整个查询结果 </p><p> 对查询结果分组后，聚集函数将分别作用于每个组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--求各个课程号及相应的选课人数。</span><br><span class="hljs-keyword">SELECT</span> Cno,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 选课人数<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno<br><br><span class="hljs-comment">-- 查询选修了3门以上课程的学生学号</span><br><span class="hljs-keyword">SELECT</span> Sno, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 选课人数<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span><span class="hljs-number">3</span>;<br><span class="hljs-comment">--where筛选的是数据库表里面本来就有的字段，而having筛选的字段是从前筛选的字段筛选的。</span><br><br><br></code></pre></td></tr></table></figure><h3 id="2、连接查询"><a href="#2、连接查询" class="headerlink" title="2、连接查询"></a>2、连接查询</h3><h4 id="1-等值与非等值连接查询"><a href="#1-等值与非等值连接查询" class="headerlink" title="(1)等值与非等值连接查询"></a>(1)等值与非等值连接查询</h4><p>等值连接：连接运算符为=</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询每个学生及其选修课程的情况</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">join</span> SC <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span><br>SC.Sno<br></code></pre></td></tr></table></figure><p>自然连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade<br><span class="hljs-keyword">FROM</span> Student,SC<br><span class="hljs-keyword">WHERE</span> Student.Sno <span class="hljs-operator">=</span> SC.Sno;<br></code></pre></td></tr></table></figure><h4 id="2-自身连接"><a href="#2-自身连接" class="headerlink" title="(2)自身连接"></a>(2)自身连接</h4><p> 自身连接：一个表与其自己进行连接 </p><p> 需要给表起别名以示区别 </p><p> 由于所有属性名都是同名属性，因此必须使用别名前缀</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询每一门课的间接先修课（即先修课的先修课）</span><br><span class="hljs-keyword">SELECT</span> FIRST.Cno，SECOND.Cpno<br><span class="hljs-keyword">FROM</span> Course <span class="hljs-keyword">FIRST</span>，Course <span class="hljs-keyword">SECOND</span><br><span class="hljs-keyword">WHERE</span> FIRST.Cpno <span class="hljs-operator">=</span> SECOND.Cno;<br></code></pre></td></tr></table></figure><h4 id="3-外连接"><a href="#3-外连接" class="headerlink" title="(3)外连接"></a>(3)外连接</h4><p> 左外连接 </p><blockquote><p>列出左边关系（如本例Student）中所有的 元组 </p></blockquote><p>右外连接</p><blockquote><p>列出右边关系中所有的元组</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询没有贷过款的法人代表、法人名称及其经济性质</span><br><span class="hljs-keyword">select</span> le.eno,ename,Enature<br><span class="hljs-keyword">from</span> legalEntityT Le <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> LoanT L <span class="hljs-keyword">on</span> le.Eno<span class="hljs-operator">=</span>l.Eno<br><span class="hljs-keyword">where</span> Bno <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><h4 id="4-复合条件连接"><a href="#4-复合条件连接" class="headerlink" title="(4)复合条件连接"></a>(4)复合条件连接</h4><p>略</p><h3 id="3、嵌套查询"><a href="#3、嵌套查询" class="headerlink" title="3、嵌套查询"></a>3、嵌套查询</h3><p> 一个SELECT-FROM-WHERE语句称为一个查询块 </p><p> 将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询既选修了“1”号课又选修了“2”号课的学生学号</span><br><span class="hljs-comment">--1</span><br><span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> (Cno<span class="hljs-operator">=</span>‘<span class="hljs-number">1</span>’ <span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span>‘<span class="hljs-number">2</span>’);<br><span class="hljs-comment">--2</span><br><span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span>‘<span class="hljs-number">1</span>’ <span class="hljs-keyword">AND</span> Sno <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span>‘<span class="hljs-number">2</span>’);<br></code></pre></td></tr></table></figure><p>子查询的限制 </p><blockquote><p><strong>不能使用ORDER BY子句</strong> </p></blockquote><p>层层嵌套方式反映了 SQL语言的结构化 </p><p>有些嵌套查询可以用连接运算替代</p><h4 id="1-带有IN谓词的子查询"><a href="#1-带有IN谓词的子查询" class="headerlink" title="(1)带有IN谓词的子查询"></a>(1)带有IN谓词的子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询与“刘晨”在同一个系学习的学生</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname，Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname<span class="hljs-operator">=</span> ‘ 刘晨 ’);<br><span class="hljs-comment">/*此查询为不相关子查询。*/</span><br><br><span class="hljs-comment">--查询选修了课程名为“信息系统”的学生学号和姓名</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname <span class="hljs-comment">/*③ 最后在Student关系中*/</span><br><span class="hljs-keyword">FROM</span> Student <span class="hljs-comment">/*取出Sno和Sname*/</span><br><span class="hljs-keyword">WHERE</span> Sno <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Sno <span class="hljs-comment">/*② 然后在SC关系中找出选修了3号课程的学生学号*/</span><br><span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> Cno <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Cno <span class="hljs-comment">/*① 首先在Course关系中找出“信息系统”的课程号，为3号*/</span><br><span class="hljs-keyword">FROM</span> Course <br><span class="hljs-keyword">WHERE</span> Cname<span class="hljs-operator">=</span> ‘信息系统’<br>)<br>);<br></code></pre></td></tr></table></figure><h4 id="2-带有比较运算符的子查询"><a href="#2-带有比较运算符的子查询" class="headerlink" title="(2)带有比较运算符的子查询"></a>(2)带有比较运算符的子查询</h4><p> 当能确切知道内层查询返回单值时，可 用比较运算符（&gt;，&lt;，=，&gt;=， &lt;=，!=或&lt; &gt;）。 </p><p> 与ANY或ALL谓词配合使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--假设一个学生只可能在一个系学习，并且必须属于一个系，则在[例39]可以用 = 代替IN ：</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname，Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-operator">=</span><br>(<span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname<span class="hljs-operator">=</span> ‘刘晨’);<br></code></pre></td></tr></table></figure><h4 id="3-带有ANY（SOME）或ALL谓词的子查询"><a href="#3-带有ANY（SOME）或ALL谓词的子查询" class="headerlink" title="(3)带有ANY（SOME）或ALL谓词的子查询"></a>(3)带有ANY（SOME）或ALL谓词的子查询</h4><p>谓词语义 </p><p> ANY：任意一个值 </p><p> ALL：所有值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询其他系中比计算机科学某一学生年龄小的学生姓名和年龄</span><br><span class="hljs-keyword">SELECT</span> Sname，Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sage <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">ANY</span> <br>(<span class="hljs-keyword">SELECT</span> Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; CS &#x27;</span>)<br><span class="hljs-keyword">AND</span> Sdept <span class="hljs-operator">&lt;&gt;</span> ‘CS <span class="hljs-string">&#x27; ; /*父查询块中的条件:其他系 */</span><br></code></pre></td></tr></table></figure><h4 id="4-带有EXISTS谓词的子查询"><a href="#4-带有EXISTS谓词的子查询" class="headerlink" title="(4)带有EXISTS谓词的子查询"></a>(4)带有EXISTS谓词的子查询</h4><blockquote><p>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真 值“true”或逻辑假值“false”。</p><blockquote><p>若内层查询结果非空，则外层的WHERE子句返回真值</p><p>若内层查询结果为空，则外层的WHERE子句返回假值 </p></blockquote></blockquote><p>NOT EXISTS 与 EXISTS相反</p><p>由EXISTS引出的子查询，其目标列表达式通常都用* ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询所有选修了1号课程的学生姓名。</span><br><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span>Student.Sno <span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; 1</span><br><span class="hljs-string">&#x27;</span>);<br><span class="hljs-comment">--查询选修了全部课程的学生姓名。</span><br><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> Student.Sno<br><span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span> Course.Cno<br>)<br>);<br> <br><span class="hljs-comment">--不存在有一门课程没学过的同学</span><br><span class="hljs-keyword">SELECT</span> sname<br><span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> course<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> sc<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> Student.Sno<br><span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span> Course.Cno <span class="hljs-comment">--某学生学过的课程</span><br>)<span class="hljs-comment">--他没有学过的课程</span><br>)<span class="hljs-comment">--他不存在没有学过的课程</span><br></code></pre></td></tr></table></figure><h2 id="三、数据更新"><a href="#三、数据更新" class="headerlink" title="三、数据更新"></a>三、数据更新</h2><h3 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h3><h4 id="1-插入元祖"><a href="#1-插入元祖" class="headerlink" title="(1)插入元祖"></a>(1)插入元祖</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将一个新学生元组（学号：200215128；</span><br><span class="hljs-comment">--姓名：陈冬；性别：男；所在系：IS；年龄：18岁）插入到Student表中。</span><br><span class="hljs-keyword">INSERT</span>                   <br><span class="hljs-keyword">INTO</span> Student (Sno，Sname，Ssex，Sdept，Sage)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;200215128&#x27;</span>,<span class="hljs-string">&#x27;陈冬&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;IS&#x27;</span>,<span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><h4 id="2-插入子查询结果"><a href="#2-插入子查询结果" class="headerlink" title="(2)插入子查询结果"></a>(2)插入子查询结果</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--对每一个系，求学生的平均年龄，并把结果存入数据库。</span><br><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> Dept_age(Sdept，Avg_age)<br><span class="hljs-keyword">SELECT</span> Sdept，<span class="hljs-built_in">AVG</span>(Sage)<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sdept;<br></code></pre></td></tr></table></figure><h4 id="3-插入一列"><a href="#3-插入一列" class="headerlink" title="(3)插入一列"></a>(3)插入一列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--为“员工表”增加一列“性别”类型为nchar(1)</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 员工表 <span class="hljs-keyword">add</span> 性别 <span class="hljs-type">nchar</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="2、修改数据"><a href="#2、修改数据" class="headerlink" title="2、修改数据"></a>2、修改数据</h3><h4 id="1-修改某一个元组的值"><a href="#1-修改某一个元组的值" class="headerlink" title="(1) 修改某一个元组的值"></a>(1) 修改某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将学生200215121的年龄改为22岁</span><br>UPDATE Student<br><span class="hljs-keyword">SET</span> Sage<span class="hljs-operator">=</span><span class="hljs-number">22</span><br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27; 200215121 &#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-修改多个元组的值"><a href="#2-修改多个元组的值" class="headerlink" title="(2)修改多个元组的值"></a>(2)修改多个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将所有学生的年龄增加1岁</span><br>UPDATE Student<br><span class="hljs-keyword">SET</span> Sage<span class="hljs-operator">=</span> Sage<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="3-带子查询的修改语句"><a href="#3-带子查询的修改语句" class="headerlink" title="(3)带子查询的修改语句"></a>(3)带子查询的修改语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将计算机科学系全体学生的成绩置零。</span><br>UPDATE SC<br><span class="hljs-keyword">SET</span> Grade<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-string">&#x27;CS&#x27;</span><span class="hljs-operator">=</span><br>(<span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Student.Sno <span class="hljs-operator">=</span> SC.Sno);<br></code></pre></td></tr></table></figure><h3 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h3><h4 id="1-删除某一个元组的值"><a href="#1-删除某一个元组的值" class="headerlink" title="(1)删除某一个元组的值"></a>(1)删除某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除学号为200215128的学生记录。</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; 200215128 &#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-删除多个元组的值"><a href="#2-删除多个元组的值" class="headerlink" title="(2) 删除多个元组的值"></a>(2) 删除多个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除所有的学生选课记录。</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><h4 id="3-带子查询的删除语句"><a href="#3-带子查询的删除语句" class="headerlink" title="(3)带子查询的删除语句"></a>(3)带子查询的删除语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除计算机科学系所有学生的选课记录。</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> <span class="hljs-string">&#x27;CS&#x27;</span><span class="hljs-operator">=</span><br>(<span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Student.Sno<span class="hljs-operator">=</span>SC.Sno);<br></code></pre></td></tr></table></figure><h2 id="四、视图"><a href="#四、视图" class="headerlink" title="四、视图"></a>四、视图</h2><blockquote><p>虚表，是从一个或几个基本表（或视图）导出的表</p><p>数据库只存放视图的定义，不存放视图对应的数据 </p><p>基表中的数据发生变化，从视图中查询出的数据也随之改变</p></blockquote><h3 id="1、定义视图"><a href="#1、定义视图" class="headerlink" title="1、定义视图"></a>1、定义视图</h3><h4 id="1-建立视图"><a href="#1-建立视图" class="headerlink" title="(1)建立视图"></a>(1)建立视图</h4><blockquote><p>语句格式</p><blockquote><p>CREATE VIEW &lt;视图名&gt; [(&lt;列名&gt; [，&lt;列名&gt;]…)] AS &lt;子查询&gt; [WITH CHECK OPTION]；</p></blockquote><p>组成视图的属性列名：全部省略或全部指定 </p><p>子查询不允许含有ORDER BY子句和DISTINCT短语</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--建立信息系学生的视图。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> IS_Student<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno,Sname,Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span>;<br><br><span class="hljs-comment">--建立信息系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有信息系的学生 。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> IS_Student<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname,Sage,Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span><br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">对IS_Student视图的更新操作：</span><br><span class="hljs-comment"> 修改操作：自动加上Sdept= &#x27;IS&#x27;的条件</span><br><span class="hljs-comment"> 删除操作：自动加上Sdept= &#x27;IS&#x27;的条件</span><br><span class="hljs-comment"> 插入操作：自动检查Sdept属性值是否为&#x27;IS&#x27;</span><br><span class="hljs-comment">如果不是，则拒绝该插入操作</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">--基于多个基表的视图</span><br><span class="hljs-comment">--建立信息系选修了1号课程的学生视图。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> IS_S1(Sno，Sname，Grade)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Student.Sno,Sname,Grade<br><span class="hljs-keyword">FROM</span> Student,SC<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span> <span class="hljs-keyword">AND</span><br>Student.Sno<span class="hljs-operator">=</span>SC.Sno <span class="hljs-keyword">AND</span><br>SC.Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br><br><span class="hljs-comment">--基于视图的视图</span><br><span class="hljs-comment">--建立信息系选修了1号课程且成绩在90分以上的学生的视图。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> IS_S2<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname，Grade<br><span class="hljs-keyword">FROM</span> IS_S1<br><span class="hljs-keyword">WHERE</span> Grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br><br><span class="hljs-comment">--带表达式的视图</span><br><span class="hljs-comment">--定义一个反映学生出生年份的视图。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> BT_S(Sno,Sname,Sbirth)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno,Sname,<span class="hljs-number">2000</span><span class="hljs-operator">-</span>Sage<br><span class="hljs-keyword">FROM</span> Student;<br><br><span class="hljs-comment">--分组视图</span><br><span class="hljs-comment">-- 将学生的学号及他的平均成绩定义为一个视图，假设SC表中“成绩”列Grade为数字型</span><br>CREAT <span class="hljs-keyword">VIEW</span> S_G(Sno，Gavg)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno，<span class="hljs-built_in">AVG</span>(Grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno;<br><br><span class="hljs-comment">--不指定属性列</span><br><span class="hljs-comment">--将Student表中所有女生记录定义为一个视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> F_Student(F_Sno，name，sex，age，dept)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Ssex<span class="hljs-operator">=</span>‘女’;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">缺点：</span><br><span class="hljs-comment">修改基表Student的结构后，Student表与F_Student视图的映象关</span><br><span class="hljs-comment">系被破坏，导致该视图不能正确工作。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="2-删除视图"><a href="#2-删除视图" class="headerlink" title="(2)删除视图"></a>(2)删除视图</h4><blockquote><p>语句的格式： </p><blockquote><p>DROP VIEW &lt;视图名&gt;;</p><p>该语句从数据字典中删除指定的视图定义</p><p>如果该视图上还导出了其他视图，使用CASCADE级 联删除语句，把该视图和由它导出的所有视图一起 删除 </p><p>删除基表时，由该基表导出的所有视图定义都必须 显式地使用DROP VIEW语句删除</p></blockquote></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除视图BT_S： </span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> BT_S;<br><span class="hljs-comment">--删除视图IS_S1：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> IS_S1;<br><span class="hljs-comment">--拒绝执行</span><br><span class="hljs-comment">--级联删除：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> IS_S1 CASCADE;<br></code></pre></td></tr></table></figure><h3 id="2、查询视图"><a href="#2、查询视图" class="headerlink" title="2、查询视图"></a>2、查询视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--在S_G视图中查询平均成绩在90分以上的学生学号和平均成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> S_G<br><span class="hljs-keyword">WHERE</span> Gavg<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br><br><span class="hljs-comment">--S_G视图的子查询定义：</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> S_G (Sno，Gavg)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno，<span class="hljs-built_in">AVG</span>(Grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno;<br></code></pre></td></tr></table></figure><h3 id="3、更新视图"><a href="#3、更新视图" class="headerlink" title="3、更新视图"></a>3、更新视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将信息系学生视图IS_Student中学号200215122的学生姓名改为“刘辰”</span><br>UPDATE IS_Student<br><span class="hljs-keyword">SET</span> Sname<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;刘辰&#x27;</span><br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; 200215122 &#x27;</span>;<br></code></pre></td></tr></table></figure><p>更新视图的限制：一些视图是不可更新的，因为对这 些视图的更新不能唯一地有意义地转换成对相应基本表的更新</p><p>例：视图S_G为不可更新视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE S_G <br><span class="hljs-keyword">SET</span> Gavg<span class="hljs-operator">=</span><span class="hljs-number">90</span> <br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> ‘<span class="hljs-number">200215121</span>’;<br></code></pre></td></tr></table></figure><p> 这个对视图的更新无法转换成对基本表SC的 更新</p><h2 id="五、触发器"><a href="#五、触发器" class="headerlink" title="五、触发器"></a>五、触发器</h2><h3 id="1-创建触发器"><a href="#1-创建触发器" class="headerlink" title="1.创建触发器"></a>1.创建触发器</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">为Student表创建一个</span><br><span class="hljs-comment">INSERT触发器，当</span><br><span class="hljs-comment">有新的学生插入时，</span><br><span class="hljs-comment">需要及时更新</span><br><span class="hljs-comment">DeptStuNum表中该</span><br><span class="hljs-comment">系学生的人数（加1）。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">--1.创建触发器------insert</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tr_ins_stu<br><span class="hljs-keyword">ON</span> Student<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span> <br><span class="hljs-keyword">as</span><br><br><span class="hljs-comment">--2.声明变量</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@dept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><br><span class="hljs-comment">--3.获取变量的值</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@dept</span> <span class="hljs-operator">=</span> inserted.sdept<br><span class="hljs-keyword">from</span> inserted<br><br><span class="hljs-comment">--4.触发条件以及内容</span><br>if <span class="hljs-keyword">exists</span>(<br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> deptstunum<br>    <span class="hljs-keyword">where</span> deptstunum.sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@dept</span><br>)<br><span class="hljs-keyword">begin</span><br>update deptstunum<br><span class="hljs-keyword">set</span> stunum <span class="hljs-operator">=</span> stunum <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@dept</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> deptstunum<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@dept</span>, <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*为student表创建一个</span><br><span class="hljs-comment">UPDATE触发器，当</span><br><span class="hljs-comment">更新了某位学生的系</span><br><span class="hljs-comment">别时，就激活触发器</span><br><span class="hljs-comment">级联更新</span><br><span class="hljs-comment">DeptStuNum表中相</span><br><span class="hljs-comment">关系别中的学生人数*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tri_upd_student<span class="hljs-comment">-----update!Update涉及新增和删除两个动作</span><br><span class="hljs-keyword">on</span> student<br><span class="hljs-keyword">for</span> update<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@oldDept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>), <span class="hljs-variable">@newDept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@oldDept</span> <span class="hljs-operator">=</span> Sdept <span class="hljs-keyword">from</span> deleted<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@newDept</span> <span class="hljs-operator">=</span> Sdept <span class="hljs-keyword">from</span> inserted<br>update DeptStuNum <span class="hljs-keyword">set</span> StuNum <span class="hljs-operator">=</span> StuNum – <span class="hljs-number">1</span> <span class="hljs-keyword">where</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@oldDept</span><br>if <span class="hljs-keyword">exists</span>( <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> DeptStuNum<br><span class="hljs-keyword">where</span> DeptStuNum.sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@newDept</span><br>)<br><span class="hljs-keyword">begin</span><br>    update DeptStuNum<br>    <span class="hljs-keyword">set</span> StuNum <span class="hljs-operator">=</span> StuNum <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">where</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@newDept</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> deptstunum <span class="hljs-keyword">values</span>(<span class="hljs-variable">@newDept</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="after"><a href="#after" class="headerlink" title="after"></a>after</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*任务：</span><br><span class="hljs-comment">创建一个AFTER触发器</span><br><span class="hljs-comment">，当对LoanT表的贷款金</span><br><span class="hljs-comment">额（Lamount）进行修改</span><br><span class="hljs-comment">时，若金额减少了%及以</span><br><span class="hljs-comment">上，则将此次操作记录到</span><br><span class="hljs-comment">另外一张表L_U（Eno，</span><br><span class="hljs-comment">Bno，Oldamount，</span><br><span class="hljs-comment">Newamount）。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> L_U1 <span class="hljs-keyword">on</span> LoanT<br>after update<br><span class="hljs-keyword">as</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@oldamount</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@newamount</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@eno</span> <span class="hljs-type">char</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@bno</span> <span class="hljs-type">char</span>(<span class="hljs-number">5</span>)<br><span class="hljs-comment">----------------在deleted表和inserted表中取值</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@oldamount</span> <span class="hljs-operator">=</span> deleted.Lamount <span class="hljs-keyword">from</span> deleted<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@newamount</span> <span class="hljs-operator">=</span> inserted.Lamount,<span class="hljs-variable">@eno</span><span class="hljs-operator">=</span>inserted.Eno,<span class="hljs-variable">@bno</span><span class="hljs-operator">=</span>inserted.Bno <span class="hljs-keyword">from</span> inserted<br><span class="hljs-comment">----------------判断是否需要插入另外一张表L_U</span><br>if <span class="hljs-variable">@newamount</span><span class="hljs-operator">&lt;</span>(<span class="hljs-variable">@oldamount</span><span class="hljs-operator">*</span><span class="hljs-number">0.9</span>)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> L_U <span class="hljs-keyword">values</span>(<span class="hljs-variable">@eno</span>,<span class="hljs-variable">@bno</span>,<span class="hljs-variable">@oldamount</span>,<span class="hljs-variable">@newamount</span>)<br></code></pre></td></tr></table></figure><h4 id="instead-of"><a href="#instead-of" class="headerlink" title="instead of"></a>instead of</h4><p>在以下情形下使用Instead Of 触发器： </p><p>（1）数据库里的数据禁止修改 </p><p>（2）有可能要回滚修改的SQL语句 </p><p>（3）在视图中使用触发器 </p><p>（4）用自己的方式去修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">course表和SC表是主从表之间的关系，当对</span><br><span class="hljs-comment">course表进行删除操作时，首先应判断SC表中是</span><br><span class="hljs-comment">否有相关记录，如果有，则禁止删除，如果还有</span><br><span class="hljs-comment">其他课程以此课程为先行课，也禁止删除。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tr_del_cos<br><span class="hljs-keyword">on</span> course<br>instead <span class="hljs-keyword">of</span> <span class="hljs-keyword">delete</span><br><span class="hljs-keyword">as</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@cno</span> <span class="hljs-operator">=</span> cno <span class="hljs-keyword">from</span> deleted<br><br>if(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> SC <span class="hljs-keyword">where</span> cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><br>print<span class="hljs-string">&#x27;SC表中有相关记录，不能删除&#x27;</span><br><span class="hljs-keyword">else</span> if (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> course <span class="hljs-keyword">where</span> cpno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span>)<br>print <span class="hljs-string">&#x27;有课程以此为先行课，不能删除&#x27;</span><br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> course <span class="hljs-keyword">where</span> cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> deleted)<br></code></pre></td></tr></table></figure><h3 id="2-修改触发器"><a href="#2-修改触发器" class="headerlink" title="2.修改触发器"></a>2.修改触发器</h3><p>将create修改为alter</p><p>其他的参数与创建触发器一致</p><h3 id="3-删除触发器"><a href="#3-删除触发器" class="headerlink" title="3.删除触发器"></a>3.删除触发器</h3><p>删除触发器用DROP TRIGGER语句，可以同时 删除一个或多个触发器，语法如下：</p><p> DROP TRIGGER 触发器名[ ,…n ] ON { DATABASE | ALL SERVER } [ ; ]</p><h3 id="4-范式"><a href="#4-范式" class="headerlink" title="4.范式"></a>4.范式</h3><p><img src="/images/fans.png"></p><h2 id="六、游标"><a href="#六、游标" class="headerlink" title="六、游标"></a>六、游标</h2><h3 id="1-声明游标"><a href="#1-声明游标" class="headerlink" title="1.声明游标"></a>1.声明游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> 游标名 <span class="hljs-keyword">cursor</span><br><span class="hljs-keyword">for</span><br> <span class="hljs-keyword">select</span>语句<br></code></pre></td></tr></table></figure><h3 id="2-打开游标"><a href="#2-打开游标" class="headerlink" title="2.打开游标"></a>2.打开游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">open</span> 游标名<br></code></pre></td></tr></table></figure><h3 id="3-提取游标"><a href="#3-提取游标" class="headerlink" title="3.提取游标"></a>3.提取游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span><br>游标名<br>[<span class="hljs-keyword">into</span> @变量名 [...n]]<br></code></pre></td></tr></table></figure><p>@@fetch_status</p><p> 通过检测全局变量@@Fetch_Status的值， 可以得知FETCH语句是否取到最后一条记录。</p><p> 当@@Fetch_Status值为0时，表示提取正常； -1表示已经取到了结果集的末尾，而其他值均 表明操作出了问题。</p><h3 id="4-关闭游标"><a href="#4-关闭游标" class="headerlink" title="4.关闭游标"></a>4.关闭游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CLOSE</span> 游标名<br></code></pre></td></tr></table></figure><p>在使用CLOSE语句关闭某游标后，系统并没有 完全释放游标的资源，并且也没有改变游标的定 义，当再次使用OPEN语句时可以重新打开此游 标。</p><h3 id="5-释放游标"><a href="#5-释放游标" class="headerlink" title="5.释放游标"></a>5.释放游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DEALLOCATE</span> 游标名<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个SCROLL游标，并演示LAST、PRIOR、RELATIVE和ABSOLUTE选项的使用。</span><br><br><span class="hljs-comment">--声明存储从游标中提取的数据的变量</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@Bno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">5</span>),<span class="hljs-variable">@Bname</span> NVARCHAR(<span class="hljs-number">10</span>),<span class="hljs-variable">@Btel</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">8</span>)<br><span class="hljs-comment">--声明游标</span><br><span class="hljs-keyword">DECLARE</span> Bank_Scr_cursor <span class="hljs-keyword">SCROLL</span> <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> BankT<br><span class="hljs-comment">--打开游标</span><br><span class="hljs-keyword">OPEN</span> Bank_Scr_cursor<br><span class="hljs-comment">--提取游标中的最后一行</span><br><span class="hljs-keyword">FETCH</span> <span class="hljs-keyword">LAST</span> <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--提取游标现有行的前一行</span><br><span class="hljs-keyword">FETCH</span> PRIOR <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--提取游标数据中的第二行</span><br><span class="hljs-keyword">FETCH</span> ABSOLUTE <span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--提取现有游标后面的第二行</span><br><span class="hljs-keyword">FETCH</span> RELATIVE <span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--提取现有游标前面的第二行</span><br><span class="hljs-keyword">FETCH</span> RELATIVE <span class="hljs-number">-2</span> <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--关闭游标</span><br><span class="hljs-keyword">CLOSE</span> Bank_Scr_cursor<br><span class="hljs-comment">--释放游标</span><br><span class="hljs-keyword">DEALLOCATE</span> Bank_Scr_cursor<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">查询每家银行总贷款金额最多的前两名（包括并列的</span><br><span class="hljs-comment">情况）法人的贷款信息。列出银行名称、法人名称和</span><br><span class="hljs-comment">总贷款金额。报表形式大致如下：</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">--声明变量</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@ename</span> nvarchar(<span class="hljs-number">10</span>),<span class="hljs-variable">@eno</span> <span class="hljs-type">char</span>(<span class="hljs-number">5</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@bname</span> nvarchar(<span class="hljs-number">30</span>),<span class="hljs-variable">@bno</span> <span class="hljs-type">char</span>(<span class="hljs-number">5</span>),<span class="hljs-variable">@sun</span>_amount <span class="hljs-type">int</span><br><span class="hljs-comment">--声明第一个游标</span><br><span class="hljs-keyword">declare</span> bank_cursor <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>selsect Bno,Bname <span class="hljs-keyword">from</span> bankt<br><span class="hljs-comment">--打开第一个游标</span><br><span class="hljs-keyword">open</span> bank_cursor<br><span class="hljs-comment">--提取第一个游标</span><br><span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> bank_cursor <span class="hljs-keyword">into</span> <span class="hljs-variable">@bno</span>,<span class="hljs-variable">@bname</span><br>while @<span class="hljs-variable">@FETCH</span>_STATUS <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">begin</span><br>print <span class="hljs-variable">@bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;总贷款金额最多的前两名法人贷款信息：&#x27;</span><br>print <span class="hljs-string">&#x27;法人名称总贷款金额（万元）&#x27;</span><br><span class="hljs-comment">--声明第二个游标</span><br><span class="hljs-keyword">declare</span> bank_top_cursor <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br><span class="hljs-keyword">select</span> top <span class="hljs-number">2</span> <span class="hljs-keyword">with</span> ties eno,<span class="hljs-built_in">sum</span>(lamount)<br><span class="hljs-comment">--with ties:返回了前两名，若第三、四...名跟第二名同，也会返回（最后一条数据的额外返回值）</span><br><span class="hljs-keyword">from</span> Loant<br><span class="hljs-keyword">where</span> bno <span class="hljs-operator">=</span> <span class="hljs-variable">@bno</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> eno<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">sum</span>(lamount) <span class="hljs-keyword">desc</span><br><span class="hljs-comment">--打开第二个游标</span><br><span class="hljs-keyword">open</span> bank_top_cursor<br><span class="hljs-comment">--提取第二个游标</span><br><span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> bank_top_cursor <span class="hljs-keyword">into</span> <span class="hljs-variable">@eno</span>,<span class="hljs-variable">@sum</span>_amount<br>while @<span class="hljs-variable">@FETCH</span>_STATUS <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@ename</span> <span class="hljs-operator">=</span> ename <br><span class="hljs-keyword">from</span> legalEntityT <br><span class="hljs-keyword">where</span> eno <span class="hljs-operator">=</span> <span class="hljs-variable">@eno</span><br>print <span class="hljs-variable">@ename</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@sum</span>_amount <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">6</span>))<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> bank_top_cursor <span class="hljs-keyword">into</span> <span class="hljs-variable">@eno</span>,<span class="hljs-variable">@sum</span>_amount<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> bank_top_cursor<br><span class="hljs-keyword">deallocate</span> bank_top_cursor<br>print <span class="hljs-string">&#x27; &#x27;</span><br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> bank_cursor <span class="hljs-keyword">into</span> <span class="hljs-variable">@bno</span>,<span class="hljs-variable">@bname</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> bank_cursor<br><span class="hljs-keyword">deallocate</span> bank_cursor<br></code></pre></td></tr></table></figure><h2 id="七、存储过程"><a href="#七、存储过程" class="headerlink" title="七、存储过程"></a>七、存储过程</h2><p>存储过程的用户接口： </p><ol><li>创建存储过程 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">Procedure</span> 过程名（［参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span>，...］）<br><span class="hljs-keyword">AS</span><br><span class="hljs-operator">&lt;</span>PL<span class="hljs-operator">/</span><span class="hljs-keyword">SQL</span>块<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><ul><li><p>过程名：数据库服务器合法的对象标识 </p></li><li><p>参数列表：用名字来标识调用时给出的参数值，必须指定值 的数据类型。参数也可以定义输入参数、输出参数或输入/ 输出参数。默认为输入参数。</p></li><li><p>过程体：是一个。包括声明部分和可执行语句 部分</p></li></ul><ol start="2"><li><p>执行存储过程 </p></li><li><p>删除存储过程</p></li></ol><h3 id="1-简单存储过程"><a href="#1-简单存储过程" class="headerlink" title="1.简单存储过程"></a>1.简单存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询“工商银行北京A支行”的贷款情况，要求列出法人名称、贷款日期、贷款金额</span><br><span class="hljs-keyword">create</span> proc P_Loan<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> ename,ldate,lamount<br><span class="hljs-keyword">from</span> BankT B <span class="hljs-keyword">join</span> LoanT L <span class="hljs-keyword">on</span> B.Bno<span class="hljs-operator">=</span>l.Bno<br><span class="hljs-keyword">join</span> LegalEntityT le <span class="hljs-keyword">on</span> le.Eno<span class="hljs-operator">=</span>L.Eno<br><span class="hljs-keyword">where</span> Bname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;工商银行北京A支行&#x27;</span><br><span class="hljs-comment">--执行</span><br><span class="hljs-keyword">exec</span> p_loan<br><br></code></pre></td></tr></table></figure><h3 id="2-带输入变量的存储过程"><a href="#2-带输入变量的存储过程" class="headerlink" title="2.带输入变量的存储过程"></a>2.带输入变量的存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建带参数的存储过程。查询某家指定银行的贷款情况，要求列出法人名称、贷款日期和贷款金额</span><br><span class="hljs-keyword">create</span> proc P_in_loan<br><span class="hljs-variable">@bankname</span> nvarchar(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> ename,ldate,lamount<br><span class="hljs-keyword">from</span> BankT B <span class="hljs-keyword">join</span> LoanT L <span class="hljs-keyword">on</span> B.Bno<span class="hljs-operator">=</span>l.Bno<br><span class="hljs-keyword">join</span> LegalEntityT le <span class="hljs-keyword">on</span> le.Eno<span class="hljs-operator">=</span>L.Eno<br><span class="hljs-keyword">where</span> Bname<span class="hljs-operator">=</span><span class="hljs-variable">@bankname</span><br><span class="hljs-keyword">exec</span> p_in_loan <span class="hljs-string">&#x27;工商银行北京A支行&#x27;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建输入参数和默认值的存储过程。查询某家指定银行（银行默认值是&#x27;工商银行北京A支行&#x27;）</span><br><span class="hljs-comment">--的贷款情况，要求列出法人名称、贷款日期、贷款金额</span><br><span class="hljs-keyword">create</span> proc P_inde_loan<br><span class="hljs-variable">@bankname</span> nvarchar(<span class="hljs-number">10</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;工商银行北京A支行&#x27;</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> ename,ldate,lamount<br><span class="hljs-keyword">from</span> BankT B <span class="hljs-keyword">join</span> LoanT L <span class="hljs-keyword">on</span> B.Bno<span class="hljs-operator">=</span>l.Bno<br><span class="hljs-keyword">join</span> LegalEntityT le <span class="hljs-keyword">on</span> le.Eno<span class="hljs-operator">=</span>L.Eno<br><span class="hljs-keyword">where</span> Bname<span class="hljs-operator">=</span><span class="hljs-variable">@bankname</span><br><span class="hljs-keyword">exec</span> p_inde_loan<br></code></pre></td></tr></table></figure><h3 id="3-输入和输出参-数"><a href="#3-输入和输出参-数" class="headerlink" title="3.输入和输出参 数"></a>3.输入和输出参 数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个带有输入参数和输出参数的存储过程，proc_AVG，用于返回某一个学生所学课程的平均分。选课表名是SC，学号属性为Sno</span><br><span class="hljs-keyword">create</span> proc proc_AVG<br><span class="hljs-variable">@studentNo</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) ,<br><span class="hljs-variable">@avg</span> <span class="hljs-type">int</span> output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avg</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">avg</span>(Grade)<br><span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-variable">@studentNo</span><br>go<br><br><span class="hljs-comment">--运行这个存储过程</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@studentNo</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@studentNo</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;200215121&#x27;</span><br><span class="hljs-keyword">exec</span> proc_AVG <span class="hljs-variable">@studentNo</span>, <span class="hljs-variable">@avg</span> output<br><span class="hljs-comment">-- 显示存储过程的执行结果</span><br>print ‘学号为’ <span class="hljs-operator">+</span> <span class="hljs-variable">@studentNo</span> <span class="hljs-operator">+</span> ‘同学的平均分为’ <span class="hljs-operator">+</span><br><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@avg</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--统计指定城市的银行在指定日期以后的总贷款金额和平均贷款金额，将统计结果作为参数输出</span><br><span class="hljs-comment">--创建存储过程</span><br><span class="hljs-keyword">create</span> proc p_inout_loan<br><span class="hljs-variable">@city</span> <span class="hljs-type">nchar</span>(<span class="hljs-number">4</span>),<br><span class="hljs-variable">@date</span> smalldatetime ,<br><span class="hljs-variable">@sum</span>_amount <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@avg</span>_amount <span class="hljs-type">int</span> output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@sum</span>_amount<span class="hljs-operator">=</span><span class="hljs-built_in">sum</span>(lamount),<span class="hljs-variable">@avg</span>_amount<span class="hljs-operator">=</span><span class="hljs-built_in">avg</span>(lamount)<br><span class="hljs-keyword">from</span> bankt B <span class="hljs-keyword">join</span> Loant L <span class="hljs-keyword">on</span> b.bno<span class="hljs-operator">=</span>L.bno<br><span class="hljs-keyword">where</span>(bname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">+</span>rtrim(<span class="hljs-variable">@city</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span>) <span class="hljs-keyword">and</span> (Ldate<span class="hljs-operator">&gt;</span><span class="hljs-variable">@date</span>)<br><span class="hljs-comment">--运行存储过程</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@s</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@a</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">exec</span> p_inout_loan <span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;2005-12-31&#x27;</span>,<span class="hljs-variable">@s</span> output,<span class="hljs-variable">@a</span> output<br>print <span class="hljs-string">&#x27;上海的银行2005年月日之后的总贷款金额为：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@s</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)) <span class="hljs-operator">+</span><span class="hljs-string">&#x27;万元，平均贷款金额为：&#x27;</span> <span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@a</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">6</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27;万元。&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-插入操作"><a href="#4-插入操作" class="headerlink" title="4.插入操作"></a>4.插入操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个插入操作的存储过程proc_ins_s，用于向student表中插入一条记录。</span><br><span class="hljs-keyword">create</span> proc proc_ins_s<br><span class="hljs-variable">@no</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br><span class="hljs-variable">@name</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),<br><span class="hljs-variable">@sex</span> <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br><span class="hljs-variable">@age</span> <span class="hljs-type">smallint</span>,<br><span class="hljs-variable">@dept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-operator">=</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@no</span>, <span class="hljs-variable">@name</span>, <span class="hljs-variable">@sex</span>, <span class="hljs-variable">@age</span>, <span class="hljs-variable">@dept</span>)<br>go<br><br><span class="hljs-comment">--运行这个存储过程</span><br><span class="hljs-keyword">Declare</span> <span class="hljs-variable">@no</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@name</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>), <span class="hljs-variable">@sex</span> <span class="hljs-type">char</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">Declare</span> <span class="hljs-variable">@age</span> <span class="hljs-type">smallint</span>, <span class="hljs-variable">@dept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@no</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;wang&#x27;</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@sex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;m&#x27;</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@age</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;19&#x27;</span><br><span class="hljs-keyword">exec</span> proc_ins_s <span class="hljs-variable">@no</span>, <span class="hljs-variable">@name</span>, <span class="hljs-variable">@sex</span>, <span class="hljs-variable">@age</span>, <span class="hljs-variable">@dept</span><br><span class="hljs-comment">-- 验证</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student <span class="hljs-keyword">where</span> sno <span class="hljs-operator">=</span> <span class="hljs-variable">@no</span><br></code></pre></td></tr></table></figure><h3 id="5-创建执行更新操作的存储过程"><a href="#5-创建执行更新操作的存储过程" class="headerlink" title="5.创建执行更新操作的存储过程"></a>5.创建执行更新操作的存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个带有输入参数的基于更新的存储过程；proc_upd_sc，用于在SC表中为指定课程的成绩（介于55－59分）之间的学生成绩都修改为60分。</span><br><span class="hljs-keyword">create</span> proc proc_upd_sc<br><span class="hljs-variable">@course</span>_no <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">as</span><br>update SC<br><span class="hljs-keyword">set</span> Grade <span class="hljs-operator">=</span> <span class="hljs-number">60</span><br><span class="hljs-keyword">where</span> Cno <span class="hljs-operator">=</span> <span class="hljs-variable">@course</span>_no <span class="hljs-keyword">and</span> Grade <span class="hljs-keyword">between</span> <span class="hljs-number">55</span><br><span class="hljs-keyword">and</span> <span class="hljs-number">59</span><br>go<br><br><span class="hljs-comment">--运行这个存储过程</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@no</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@no</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">exec</span> proc_upd_sc <span class="hljs-variable">@no</span><br></code></pre></td></tr></table></figure><h3 id="6-创建执行删除操作的存储过程"><a href="#6-创建执行删除操作的存储过程" class="headerlink" title="6.创建执行删除操作的存储过程"></a>6.创建执行删除操作的存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个带有输入参数的存储过程proc_del_sno，用于删除student表中指定学号的学生信息。</span><br><span class="hljs-keyword">create</span> proc proc_del_sno<br><span class="hljs-variable">@stu</span>_no <span class="hljs-type">char</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-variable">@stu</span>_no<br>go<br><br><span class="hljs-comment">--运行这个存储过程</span><br><span class="hljs-keyword">exec</span> proc_del_sno <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="7-修改存储过程"><a href="#7-修改存储过程" class="headerlink" title="7.修改存储过程"></a>7.修改存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--修改任务前面创建的简单的存储过程proc_AVG，用于输出某门课程的平均分。</span><br><span class="hljs-keyword">ALTER</span> proc [dbo].[proc_AVG]<br><span class="hljs-variable">@courseNo</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br><span class="hljs-variable">@avg</span> <span class="hljs-type">int</span> output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avg</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">avg</span>(Grade)<br><span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Cno <span class="hljs-operator">=</span> <span class="hljs-variable">@courseNo</span><br></code></pre></td></tr></table></figure><h3 id="8-删除存储过程"><a href="#8-删除存储过程" class="headerlink" title="8.删除存储过程"></a>8.删除存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除存储过程的语法形式如下：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> ｛<span class="hljs-keyword">procedure</span>｝[<span class="hljs-number">1</span>…n]<br><span class="hljs-comment">--例如</span><br><span class="hljs-keyword">drop</span> proc proc_AVG <br></code></pre></td></tr></table></figure><h2 id="八、数据类型"><a href="#八、数据类型" class="headerlink" title="八、数据类型"></a>八、数据类型</h2><p><img src="/images/figure.png"></p><p><img src="/images/date.png"></p><p><img src="/images/string.png"></p><p><img src="/images/money.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>sqlServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【web技术】前端技术基础</title>
    <link href="/2021/03/09/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/03/09/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="【web技术】前端技术基础"><a href="#【web技术】前端技术基础" class="headerlink" title="【web技术】前端技术基础"></a>【web技术】前端技术基础</h1><blockquote><p>本篇主要用于技术性知识复习，所以对于某些历史发展不做叙述。</p></blockquote><h2 id="一、浏览器基础"><a href="#一、浏览器基础" class="headerlink" title="一、浏览器基础"></a>一、浏览器基础</h2><h3 id="1-浏览器组成"><a href="#1-浏览器组成" class="headerlink" title="1.浏览器组成"></a>1.浏览器组成</h3><ul><li>用户界面：地址输入框，打开书签，打来历史记录等用户可操作的功能选项。</li><li>网络：浏览器开启网络线程发送请求或下载资源文件。</li><li>浏览器引擎：在用户界面与渲染引擎之间传送指令或在客户端本地缓存中读写数据，是浏览器各部分之间通信的核心。</li><li>渲染引擎（排版引擎）：解析DOM文档和CSS规则，并在浏览器界面中排版显示样式。</li><li>UI后端：绘制基本的浏览器窗口内控件，如组合选择框、按钮等。</li><li>JavaScript解释器：解释执行javascript脚本。</li><li>持久化数据存储：cookie、localStroge等9种客户端存储技术。</li></ul><h3 id="2-内核"><a href="#2-内核" class="headerlink" title="2.内核"></a>2.内核</h3><blockquote><p>分为渲染引擎和js引擎</p><p>我们通常说的内核主要指渲染引擎</p></blockquote><h4 id="（1）渲染引擎"><a href="#（1）渲染引擎" class="headerlink" title="（1）渲染引擎"></a>（1）渲染引擎</h4><p>Chrome：webkit（弃用），Blink</p><p>Firefox：gecko</p><p>Opera：presto（弃用），Blink</p><p>safari：webkit</p><h4 id="（2）js引擎"><a href="#（2）js引擎" class="headerlink" title="（2）js引擎"></a>（2）js引擎</h4><p>IE8及以前：JScript</p><p>IE9：Chakra</p><p>Edge：Chakra</p><p>Firefox：monkey系列</p><p>Safari：SquirrelFish系列</p><p>Opera：Carakan</p><p>Chrome：V8引擎（nodejs就是对V8的封装）</p><h2 id="二、Internet概述"><a href="#二、Internet概述" class="headerlink" title="二、Internet概述"></a>二、Internet概述</h2><h3 id="1-TCP-IP网络协议"><a href="#1-TCP-IP网络协议" class="headerlink" title="1.TCP/IP网络协议"></a>1.TCP/IP网络协议</h3><blockquote><p>传输控制协议/网际协议。</p><p>Internet最基本的协议，是Internet的基础。</p></blockquote><blockquote><p>定义了主机如何连接互联网，数据如何在主机之间传输的标准，基本传输单位是数据包。</p><p>TCP负责把数据分成若干数据包，并标注序号和说明。</p><p>IP负责给数据包添加发送主机和接收主机的地址。</p></blockquote><blockquote><p>TCP负责数据传输的可靠性，IP负责数据传输的正确性。</p></blockquote><h3 id="2-主机和IP地址"><a href="#2-主机和IP地址" class="headerlink" title="2.主机和IP地址"></a>2.主机和IP地址</h3><blockquote><p>每台主机有唯一的网络地址，称为IP地址，目前是用32位二进制数表示。</p><p>IP地址是层次地址，由网络号和主机号组成。</p></blockquote><h4 id="IPv4与IPv6"><a href="#IPv4与IPv6" class="headerlink" title="IPv4与IPv6"></a>IPv4与IPv6</h4><table><thead><tr><th></th><th>ipv4</th><th>ipv6</th></tr></thead><tbody><tr><td>地址长度</td><td>32</td><td>128</td></tr><tr><td>最大地址个数</td><td>2^32（0-255，四个整数）</td><td>2^128（0-65536，八个整数）</td></tr></tbody></table><h3 id="3-域名与DNS"><a href="#3-域名与DNS" class="headerlink" title="3.域名与DNS"></a>3.域名与DNS</h3><blockquote><p>域名系统采用分层结构，由几个域组成，用 . 分开。</p></blockquote><h4 id="顶级域名分类"><a href="#顶级域名分类" class="headerlink" title="顶级域名分类"></a>顶级域名分类</h4><ul><li>地理顶级域名：243个国家和地区的代码。cn、jp、uk等。</li><li>类别顶级域名：com(公司)、net(网络机构)、org(组织机构)、edu(美国教育)等。</li><li>新增顶级域名：biz(商业)、coop(合作公司)、info(信息行业)等。</li></ul><blockquote><p>DNS（域名系统），由域名服务器组成，域名服务器中保存了该网络所有主机的域名和对应的IP地址，并能将域名转换为IP地址。</p></blockquote><h2 id="三、web服务器"><a href="#三、web服务器" class="headerlink" title="三、web服务器"></a>三、web服务器</h2><blockquote><p>又称为WWW服务器，主要功能是提供网上信息浏览服务</p></blockquote><h3 id="1-部分介绍"><a href="#1-部分介绍" class="headerlink" title="1.部分介绍"></a>1.部分介绍</h3><p>应用层：使用HTTP</p><p>信息内容：采用HTML文档格式</p><p>信息定位：使用URL</p><h3 id="2-工作本质"><a href="#2-工作本质" class="headerlink" title="2.工作本质"></a>2.工作本质</h3><p>接收浏览器发送的数据（根据HTTP协议格式打包好的） =&gt; HTTP解析 =&gt; 逻辑处理 =&gt; HTTP封包 =&gt; 发送数据</p><h3 id="3-处理请求的两种方式"><a href="#3-处理请求的两种方式" class="headerlink" title="3.处理请求的两种方式"></a>3.处理请求的两种方式</h3><h4 id="静态请求"><a href="#静态请求" class="headerlink" title="静态请求"></a>静态请求</h4><p>客户端请求页面无需刷新，直接作为HTTP响应返回，请求的网页称为静态网页。</p><h4 id="动态请求"><a href="#动态请求" class="headerlink" title="动态请求"></a>动态请求</h4><p>客户端请求页面需要服务器处理（如JSP、ASP、CGI等），处理后将结果作为HTTP响应返回，请求的网页称为静态网页。</p><h3 id="4-常用的web服务器"><a href="#4-常用的web服务器" class="headerlink" title="4.常用的web服务器"></a>4.常用的web服务器</h3><p>tomcat（基于java），tomcat为Apache组织的一个服务器项目</p><p>Microsoft IIS</p><p>Apache</p><h2 id="四、HTTP协议"><a href="#四、HTTP协议" class="headerlink" title="四、HTTP协议"></a>四、HTTP协议</h2><blockquote><p>超文本传输协议，是web服务器(WWW服务器)和用户请求代理(如浏览器)之间通过应答请求模式传输超文本内容的一种协议</p><p>定义了如何解析请求信息，服务器用响应信息回复请求</p><p>建立在TCP/IP之上</p></blockquote><h3 id="1-HTTP报文"><a href="#1-HTTP报文" class="headerlink" title="1.HTTP报文"></a>1.HTTP报文</h3><blockquote><p>完整的报文由头部、空行、正文三部分组成</p></blockquote><p><img src="/images/http.png"></p><h4 id="1-请求行"><a href="#1-请求行" class="headerlink" title="(1)请求行"></a>(1)请求行</h4><p>method / URL / 版本协议和扩展内容</p><h4 id="2-多个请求头"><a href="#2-多个请求头" class="headerlink" title="(2)多个请求头"></a>(2)多个请求头</h4><p>Host（区分不同站点）/cookie（储存在用户本地终端上的数据）/Content-Type（请求体内容的类型）</p><h5 id="常见的Content-Type"><a href="#常见的Content-Type" class="headerlink" title="常见的Content-Type"></a>常见的Content-Type</h5><h6 id="1-application-x-www-form-urlencoded"><a href="#1-application-x-www-form-urlencoded" class="headerlink" title="1.application/x-www-form-urlencoded"></a>1.application/x-www-form-urlencoded</h6><blockquote><p>最常见的post提交数据方式</p><p>键值对， key1=val1&amp;key2=val2</p><p>如果提交原生form不设置enctype属性，默认为此方式提交数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;form_action.asp&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;text/plain&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-multipart-form-data"><a href="#2-multipart-form-data" class="headerlink" title="2.multipart/form-data"></a>2.multipart/form-data</h6><blockquote><p>form 表单的 enctype 设为multipart/form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。</p><p>既可以上传键值对，也可以上传文件（Content-disposition）。</p><p>上传字段时以 –boundary 开始。</p><p>消息主体最后以 –boundary– 标示结束。</p></blockquote><h6 id="3-application-json"><a href="#3-application-json" class="headerlink" title="3.application/json"></a>3.application/json</h6><blockquote><p>json格式</p><p>Google 的 AngularJS 中的 Ajax 功能，默认提交 JSON 字符串</p></blockquote><h6 id="4-application-xml"><a href="#4-application-xml" class="headerlink" title="4.application/xml"></a>4.application/xml</h6><blockquote><p>以xml形式进行编码，会根据xml头指定的编码格式来编码。</p></blockquote><h6 id="5-text-xml"><a href="#5-text-xml" class="headerlink" title="5.text/xml"></a>5.text/xml</h6><blockquote><p>以xml形式进行编码，会忽略xml头所指定编码格式，默认采用US-ASCII编码。</p></blockquote><h6 id="6-text-html"><a href="#6-text-html" class="headerlink" title="6.text/html"></a>6.text/html</h6><blockquote><p>文本方式的网页，浏览器会调用html的解析器对文件进行处理。</p></blockquote><h6 id="7-text-plain"><a href="#7-text-plain" class="headerlink" title="7.text/plain"></a>7.text/plain</h6><blockquote><p>文件设置为纯文本形式，其中不含任何控件或格式字符。空格转换为 “+” 加号，但不对特殊字符编码。</p></blockquote><h4 id="3-请求体"><a href="#3-请求体" class="headerlink" title="(3)请求体"></a>(3)请求体</h4><blockquote><p>body</p><p>post请求有</p></blockquote><blockquote><p>拓展：</p><p>body：请求体中的数据</p><p>query：请求的参数，以？拼接</p><p>params：请求的参数，以 / 拼接</p></blockquote><h4 id="4-响应状态行"><a href="#4-响应状态行" class="headerlink" title="(4)响应状态行"></a>(4)响应状态行</h4><p>协议/版本 响应状态码 状态码描述</p><p>​                                                                                    <strong>HTTP状态码分类</strong></p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h4 id="5-多个响应头"><a href="#5-多个响应头" class="headerlink" title="(5)多个响应头"></a>(5)多个响应头</h4><p>Allow/Content-Encoding/Content-Type/Date/server….</p><p><img src="/images/response.png"></p><h4 id="6-响应体"><a href="#6-响应体" class="headerlink" title="(6)响应体"></a>(6)响应体</h4><p>html/css/js/img….</p><h3 id="2-HTTP文件缓存"><a href="#2-HTTP文件缓存" class="headerlink" title="2.HTTP文件缓存"></a>2.HTTP文件缓存</h3><p>是基于HTTP协议的浏览器端文件级缓存机制。在文件重复请求的情况下，浏览器根据HTTP响应的协议头信息判断是从服务器请求文件还是从本地读取文件。</p><p>查询Cache-Control（相对过期时间，Expires则是绝对过期时间）判断内容是否过期，未过期，直接读取，过期了则会进行HTTP请求。</p><h2 id="五、MIME"><a href="#五、MIME" class="headerlink" title="五、MIME"></a>五、MIME</h2><blockquote><p>多用途Internet邮件扩展</p><p>一个开放的多语言、多媒体电子邮件标准</p></blockquote><p>格式：主类型、子类型</p><p>访问网页时，帮助浏览器识别一个HTTP请求返回的是什么内容的数据，应该如何打开、显示。</p>]]></content>
    
    
    <categories>
      
      <category>前端技术基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaScript】作用域与闭包</title>
    <link href="/2021/03/07/%E3%80%90JavaScript%E3%80%91%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <url>/2021/03/07/%E3%80%90JavaScript%E3%80%91%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaScript】作用域与闭包"><a href="#【JavaScript】作用域与闭包" class="headerlink" title="【JavaScript】作用域与闭包"></a>【JavaScript】作用域与闭包</h1><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><h3 id="1、全局作用域"><a href="#1、全局作用域" class="headerlink" title="1、全局作用域"></a>1、全局作用域</h3><blockquote><p> 全局变量在整个全局环境都可使用</p><p>如果没有声明就给变量赋值，该变量会被认为是全局变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">let</span> n =<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、函数作用域"><a href="#2、函数作用域" class="headerlink" title="2、函数作用域"></a>2、函数作用域</h3><blockquote><p>在函数内部使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(n);<span class="hljs-comment">// n is not defined</span><br></code></pre></td></tr></table></figure><h3 id="3、块作用域"><a href="#3、块作用域" class="headerlink" title="3、块作用域"></a>3、块作用域</h3><blockquote><p>在各自的作用域中有效，不会有命名冲突</p><p>对let和const有效，var无效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>;<br>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//12</span><br>&#125;<br>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//10</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><h3 id="4、for循环中定义变量"><a href="#4、for循环中定义变量" class="headerlink" title="4、for循环中定义变量"></a>4、for循环中定义变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br><span class="hljs-built_in">console</span>.log(i);<span class="hljs-comment">//4</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br><span class="hljs-built_in">console</span>.log(i);<span class="hljs-comment">// i is not defined</span><br></code></pre></td></tr></table></figure><blockquote><p>for循环中使用定时器的情况</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//for循环中使用定时器</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;<span class="hljs-comment">//4,4,4,4</span><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;<span class="hljs-comment">//0,1,2,3</span><br><br></code></pre></td></tr></table></figure><p>解释：</p><p>for循环是同步的，计时器是异步的，所以先执行for循环，再执行定时器。</p><p>情况一：使用var时，i是定义在全局作用域内的,执行完for循环后，会生成4个定时器，打印i时，会在定时器内部找，没有找到，于是去父级作用域中找，此时找到的就是全局作用域中的i，值为4，所以打印了4个4。</p><p><img src="/images/situation1.png"></p><p>情况二：使用let时，i是在快中定义的，同理，4个定时器会在父级作用域中去找i，在每个块中可以找到对应的i，所以打印的是0，1，2，3。</p><p><img src="/images/situation2.png"></p><h4 id="模拟var的块级作用域"><a href="#模拟var的块级作用域" class="headerlink" title="模拟var的块级作用域"></a>模拟var的块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>    &#125;)(i)<br>&#125;<span class="hljs-comment">//0,1,2,3</span><br></code></pre></td></tr></table></figure><p>通俗的来说：如果这个作用域会被使用，就会被留下来，不然会被清除。（闭包的原理）</p><h2 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h2><blockquote><p>闭包( closure )指有权访问另一个函数作用域中变量的函数。—– JavaScript高级程序设计</p><p>作用：延伸变量的作用范围</p><p>闭包是一个典型的高阶函数</p></blockquote><h3 id="1、闭包使用"><a href="#1、闭包使用" class="headerlink" title="1、闭包使用"></a>1、闭包使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//闭包：fun函数的作用域访问了 另一个函数fn的局部变量n,fn就是一个闭包</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(n++);<br>      &#125;<br>    &#125;<br><br><span class="hljs-keyword">let</span> a = fn();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    a();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、闭包内存泄漏"><a href="#2、闭包内存泄漏" class="headerlink" title="2、闭包内存泄漏"></a>2、闭包内存泄漏</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;1244S&quot;</span>&gt;</span>敲击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> divs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;button&quot;</span>);</span><br><span class="javascript">    divs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">//1.需要的值单独取出</span></span><br><span class="javascript">      <span class="hljs-keyword">let</span> num = item.getAttribute(<span class="hljs-string">&quot;class&quot;</span>);</span><br><span class="javascript">      item.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(num)</span><br>      &#125;);<br><span class="javascript">      <span class="hljs-comment">//2.整个赋值为null</span></span><br><span class="javascript">      item = <span class="hljs-literal">null</span>;</span><br>    &#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、闭包中this指向问题"><a href="#3、闭包中this指向问题" class="headerlink" title="3、闭包中this指向问题"></a>3、闭包中this指向问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> lat = &#123;<br>     user:<span class="hljs-string">&quot;冷傲天&quot;</span>,<br>    get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = lat.get();<br><span class="hljs-built_in">console</span>.log(a());<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><blockquote><p>因为这里的this会指向window，而window没有user，所以undefined</p><p>可以用箭头函数解决</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> lat = &#123;<br>     user:<span class="hljs-string">&quot;冷傲天&quot;</span>,<br>    get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = lat.get();<br><span class="hljs-built_in">console</span>.log(a());<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaScript】构造函数 原型对象 实例复习</title>
    <link href="/2021/03/07/%E3%80%90JavaScript%E3%80%91%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/03/07/%E3%80%90JavaScript%E3%80%91%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaScript】构造函数-原型对象-实例复习"><a href="#【JavaScript】构造函数-原型对象-实例复习" class="headerlink" title="【JavaScript】构造函数 原型对象 实例复习"></a>【JavaScript】构造函数 原型对象 实例复习</h1><h2 id="一、构造函数"><a href="#一、构造函数" class="headerlink" title="一、构造函数"></a>一、构造函数</h2><blockquote><p>es6之前，没有引入类的概念，对象是通过构造函数来定义的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造函数名大写</span><br><span class="hljs-comment">//要与new一起使用才有意义</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-comment">//实例成员，通过对象访问</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//静态成员，通过构造函数访问</span><br>Father.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="二、原型对象"><a href="#二、原型对象" class="headerlink" title="二、原型对象"></a>二、原型对象</h2><blockquote><p>每一个构造函数上都有一个原型对象prototype</p><p>原型对象的作用：共享方法</p><p>一般公共的方法会放在原型对象上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">ather.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我会唱歌&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三、对象实例的原型属性"><a href="#三、对象实例的原型属性" class="headerlink" title="三、对象实例的原型属性"></a>三、对象实例的原型属性</h2><blockquote><p>每个实例对象都有一个属性_<em>prop</em>_</p><p>__prop__不能直接复制</p><p>指向构造函数的原型对象prototype</p></blockquote><h2 id="四、方法查找与关系"><a href="#四、方法查找与关系" class="headerlink" title="四、方法查找与关系"></a>四、方法查找与关系</h2><blockquote><p>方法的查找规则:</p><p>首先看对象实例身上是否有 某方法,如果有就执行这个对象上的，如果没有,因为有__proto__的存在,就去构造函数原型对象prototype身上去查找这个方法</p></blockquote><p><img src="/images/relative.png"></p><h2 id="五、constructor属性"><a href="#五、constructor属性" class="headerlink" title="五、constructor属性"></a>五、constructor属性</h2><blockquote><p>原型对象和__prop__属性上都有一个construcor，指向原来的构造函数</p><p>若修改了原型对象，给原型对象赋值的了一个对象，会覆盖原来的，必须利用constructor指回原来的构造函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">Father.prototype = &#123;<br>    <span class="hljs-comment">//手动指回</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Father</span>;<br>    <span class="hljs-comment">//修改添加</span><br>    dance:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            consoloe.log(<span class="hljs-string">&quot;我会跳舞&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、原型链"><a href="#六、原型链" class="headerlink" title="六、原型链"></a>六、原型链</h2><p><img src="/images/prototype-chain.png"></p><h2 id="七、继承"><a href="#七、继承" class="headerlink" title="七、继承"></a>七、继承</h2><blockquote><p>es6之前没有提供类的继承</p><p>采用组合继承的方式</p></blockquote><h3 id="1-继承属性"><a href="#1-继承属性" class="headerlink" title="1.继承属性"></a>1.继承属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//子类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">name,age,grade</span>)</span>&#123;<br>    <span class="hljs-comment">//1.调用父类的构造方法</span><br>    <span class="hljs-comment">//this是指向当前的Son</span><br>    Father.call(<span class="hljs-built_in">this</span>,name,age);<br>    <span class="hljs-comment">//子类自己的成员变量</span><br>    <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-继承方法"><a href="#2-继承方法" class="headerlink" title="2.继承方法"></a>2.继承方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//用父类重写子类的prototype</span><br>Son.prototype = <span class="hljs-keyword">new</span> Father;<br><span class="hljs-comment">//手动指回</span><br>Son.prototype.constructor = Son;<br></code></pre></td></tr></table></figure><h2 id="八、扩展"><a href="#八、扩展" class="headerlink" title="八、扩展"></a>八、扩展</h2><table><thead><tr><th align="center">函数</th><th align="center">主要作用</th><th align="center">是否调用</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">call()</td><td align="center">用于继承属性</td><td align="center">是</td><td align="center">参数arguments形式</td></tr><tr><td align="center">bind()</td><td align="center">定时器等不需要调用的地方</td><td align="center">否</td><td align="center"></td></tr><tr><td align="center">apply()</td><td align="center">与数组有关的地方</td><td align="center">是</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaScript复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【报错信息】React：yarn eject报错</title>
    <link href="/2021/03/05/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91React%EF%BC%9Ayarn%20eject%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91React%EF%BC%9Ayarn%20eject%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【报错信息】React：yarn-eject报错-md"><a href="#【报错信息】React：yarn-eject报错-md" class="headerlink" title="【报错信息】React：yarn eject报错.md"></a>【报错信息】React：yarn eject报错.md</h1><h2 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h2><p>create-react-app项目使用yarn eject暴露webpack相关配置时，报错</p><p><img src="/images/yarn-eject.png"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>提交git</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m -xxx<br>复制代码<br></code></pre></td></tr></table></figure><p>提交后问题解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>报错信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【报错信息】React：less报错</title>
    <link href="/2021/03/05/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91React%EF%BC%9Aless%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91React%EF%BC%9Aless%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【报错信息】React：less报错"><a href="#【报错信息】React：less报错" class="headerlink" title="【报错信息】React：less报错"></a>【报错信息】React：less报错</h1><h2 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h2><p>在项目组中使用antd组件，自定义配置后，使用create-react-app启动项目报错</p><p>TypeError: this.getOptions is not a function</p><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><p>less-loader版本过高</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>1、卸载原版本</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yarn <span class="hljs-keyword">remove</span> <span class="hljs-keyword">less</span>-loader<br>复制代码<br></code></pre></td></tr></table></figure><p>2、安装新版本</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">yarn <span class="hljs-keyword">add</span> less-loader<span class="hljs-subst">@5</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>复制代码<br></code></pre></td></tr></table></figure><p>完成后报错解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>报错信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【报错信息】React：antd自定义配置报错.md</title>
    <link href="/2021/03/05/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91React%EF%BC%9Aantd%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91React%EF%BC%9Aantd%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【报错信息】React：antd自定义配置报错"><a href="#【报错信息】React：antd自定义配置报错" class="headerlink" title="【报错信息】React：antd自定义配置报错"></a>【报错信息】React：antd自定义配置报错</h1><h2 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h2><p>create-react-app项目使用antd自定义配置后，启动项目报错</p><p>Error: Cannot find module ‘react-scripts/package.json”</p><p><img src="/images/antd1.png"></p><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><p>缺少react-script类库文件</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>安装react-script</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yarn <span class="hljs-keyword">add </span>react-<span class="hljs-keyword">script </span>-dev<br></code></pre></td></tr></table></figure><p><img src="/images/antd2.png"></p><p>安装完成可以正常启动</p>]]></content>
    
    
    
    <tags>
      
      <tag>报错信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【报错信息】hexo：clean命令报错</title>
    <link href="/2021/03/05/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91hexo%EF%BC%9Aclean%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E3%80%91hexo%EF%BC%9Aclean%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【报错信息】hexo：clean命令报错"><a href="#【报错信息】hexo：clean命令报错" class="headerlink" title="【报错信息】hexo：clean命令报错"></a>【报错信息】hexo：clean命令报错</h1><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>在使用hexo clean命令时发生错误，报错信息如下</p><p>FATAL YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key (107:16)</p><p><img src="/images/hexo-clean.png"></p><p>发现所有hexo命令都会报此错误，如hexo g,hexo d。</p><h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><p>配置hexo的_config.yml文件时，冒号后面少了空格，或者重复写了键。我就是重复写了language键。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>添加上空格或者删除重复的键。</p>]]></content>
    
    
    
    <tags>
      
      <tag>报错信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
