<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【web技术】前端技术基础</title>
    <link href="/2021/03/09/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/03/09/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="【web技术】前端技术基础"><a href="#【web技术】前端技术基础" class="headerlink" title="【web技术】前端技术基础"></a>【web技术】前端技术基础</h1><blockquote><p>本篇主要用于技术性知识复习，所以对于某些历史发展不做叙述。</p></blockquote><h2 id="一、浏览器基础"><a href="#一、浏览器基础" class="headerlink" title="一、浏览器基础"></a>一、浏览器基础</h2><h3 id="1-浏览器组成"><a href="#1-浏览器组成" class="headerlink" title="1.浏览器组成"></a>1.浏览器组成</h3><ul><li>用户界面：地址输入框，打开书签，打来历史记录等用户可操作的功能选项。</li><li>网络：浏览器开启网络线程发送请求或下载资源文件。</li><li>浏览器引擎：在用户界面与渲染引擎之间传送指令或在客户端本地缓存中读写数据，是浏览器各部分之间通信的核心。</li><li>渲染引擎（排版引擎）：解析DOM文档和CSS规则，并在浏览器界面中排版显示样式。</li><li>UI后端：绘制基本的浏览器窗口内控件，如组合选择框、按钮等。</li><li>JavaScript解释器：解释执行javascript脚本。</li><li>持久化数据存储：cookie、localStroge等9种客户端存储技术。</li></ul><h3 id="2-内核"><a href="#2-内核" class="headerlink" title="2.内核"></a>2.内核</h3><blockquote><p>分为渲染引擎和js引擎</p><p>我们通常说的内核主要指渲染引擎</p></blockquote><h4 id="（1）渲染引擎"><a href="#（1）渲染引擎" class="headerlink" title="（1）渲染引擎"></a>（1）渲染引擎</h4><p>Chrome：webkit（弃用），Blink</p><p>Firefox：gecko</p><p>Opera：presto（弃用），Blink</p><p>safari：webkit</p><h4 id="（2）js引擎"><a href="#（2）js引擎" class="headerlink" title="（2）js引擎"></a>（2）js引擎</h4><p>IE8及以前：JScript</p><p>IE9：Chakra</p><p>Edge：Chakra</p><p>Firefox：monkey系列</p><p>Safari：SquirrelFish系列</p><p>Opera：Carakan</p><p>Chrome：V8引擎（nodejs就是对V8的封装）</p><h2 id="二、Internet概述"><a href="#二、Internet概述" class="headerlink" title="二、Internet概述"></a>二、Internet概述</h2><h3 id="1-TCP-IP网络协议"><a href="#1-TCP-IP网络协议" class="headerlink" title="1.TCP/IP网络协议"></a>1.TCP/IP网络协议</h3><blockquote><p>传输控制协议/网际协议。</p><p>Internet最基本的协议，是Internet的基础。</p></blockquote><blockquote><p>定义了主机如何连接互联网，数据如何在主机之间传输的标准，基本传输单位是数据包。</p><p>TCP负责把数据分成若干数据包，并标注序号和说明。</p><p>IP负责给数据包添加发送主机和接收主机的地址。</p></blockquote><blockquote><p>TCP负责数据传输的可靠性，IP负责数据传输的正确性。</p></blockquote><h3 id="2-主机和IP地址"><a href="#2-主机和IP地址" class="headerlink" title="2.主机和IP地址"></a>2.主机和IP地址</h3><blockquote><p>每台主机有唯一的网络地址，称为IP地址，目前是用32位二进制数表示。</p><p>IP地址是层次地址，由网络号和主机号组成。</p></blockquote><h4 id="IPv4与IPv6"><a href="#IPv4与IPv6" class="headerlink" title="IPv4与IPv6"></a>IPv4与IPv6</h4><table><thead><tr><th></th><th>ipv4</th><th>ipv6</th></tr></thead><tbody><tr><td>地址长度</td><td>32</td><td>128</td></tr><tr><td>最大地址个数</td><td>2^32（0-255，四个整数）</td><td>2^128（0-65536，八个整数）</td></tr></tbody></table><h3 id="3-域名与DNS"><a href="#3-域名与DNS" class="headerlink" title="3.域名与DNS"></a>3.域名与DNS</h3><blockquote><p>域名系统采用分层结构，由几个域组成，用 . 分开。</p></blockquote><h4 id="顶级域名分类"><a href="#顶级域名分类" class="headerlink" title="顶级域名分类"></a>顶级域名分类</h4><ul><li>地理顶级域名：243个国家和地区的代码。cn、jp、uk等。</li><li>类别顶级域名：com(公司)、net(网络机构)、org(组织机构)、edu(美国教育)等。</li><li>新增顶级域名：biz(商业)、coop(合作公司)、info(信息行业)等。</li></ul><blockquote><p>DNS（域名系统），由域名服务器组成，域名服务器中保存了该网络所有主机的域名和对应的IP地址，并能将域名转换为IP地址。</p></blockquote><h2 id="三、web服务器"><a href="#三、web服务器" class="headerlink" title="三、web服务器"></a>三、web服务器</h2><blockquote><p>又称为WWW服务器，主要功能是提供网上信息浏览服务</p></blockquote><h3 id="1-部分介绍"><a href="#1-部分介绍" class="headerlink" title="1.部分介绍"></a>1.部分介绍</h3><p>应用层：使用HTTP</p><p>信息内容：采用HTML文档格式</p><p>信息定位：使用URL</p><h3 id="2-工作本质"><a href="#2-工作本质" class="headerlink" title="2.工作本质"></a>2.工作本质</h3><p>接收浏览器发送的数据（根据HTTP协议格式打包好的） =&gt; HTTP解析 =&gt; 逻辑处理 =&gt; HTTP封包 =&gt; 发送数据</p><h3 id="3-处理请求的两种方式"><a href="#3-处理请求的两种方式" class="headerlink" title="3.处理请求的两种方式"></a>3.处理请求的两种方式</h3><h4 id="静态请求"><a href="#静态请求" class="headerlink" title="静态请求"></a>静态请求</h4><p>客户端请求页面无需刷新，直接作为HTTP响应返回，请求的网页称为静态网页。</p><h4 id="动态请求"><a href="#动态请求" class="headerlink" title="动态请求"></a>动态请求</h4><p>客户端请求页面需要服务器处理（如JSP、ASP、CGI等），处理后将结果作为HTTP响应返回，请求的网页称为静态网页。</p><h3 id="4-常用的web服务器"><a href="#4-常用的web服务器" class="headerlink" title="4.常用的web服务器"></a>4.常用的web服务器</h3><p>tomcat（基于java），tomcat为Apache组织的一个服务器项目</p><p>Microsoft IIS</p><p>Apache</p><h2 id="四、HTTP协议"><a href="#四、HTTP协议" class="headerlink" title="四、HTTP协议"></a>四、HTTP协议</h2><blockquote><p>超文本传输协议，是web服务器(WWW服务器)和用户请求代理(如浏览器)之间通过应答请求模式传输超文本内容的一种协议</p><p>定义了如何解析请求信息，服务器用响应信息回复请求</p><p>建立在TCP/IP之上</p></blockquote><h3 id="1-HTTP报文"><a href="#1-HTTP报文" class="headerlink" title="1.HTTP报文"></a>1.HTTP报文</h3><blockquote><p>完整的报文由头部、空行、正文三部分组成</p></blockquote><p><img src="/images/http.png"></p><h4 id="1-请求行"><a href="#1-请求行" class="headerlink" title="(1)请求行"></a>(1)请求行</h4><p>method / URL / 版本协议和扩展内容</p><h4 id="2-多个请求头"><a href="#2-多个请求头" class="headerlink" title="(2)多个请求头"></a>(2)多个请求头</h4><p>Host（区分不同站点）/cookie（储存在用户本地终端上的数据）/Content-Type（请求体内容的类型）</p><h5 id="常见的Content-Type"><a href="#常见的Content-Type" class="headerlink" title="常见的Content-Type"></a>常见的Content-Type</h5><h6 id="1-application-x-www-form-urlencoded"><a href="#1-application-x-www-form-urlencoded" class="headerlink" title="1.application/x-www-form-urlencoded"></a>1.application/x-www-form-urlencoded</h6><blockquote><p>最常见的post提交数据方式</p><p>键值对， key1=val1&amp;key2=val2</p><p>如果提交原生form不设置enctype属性，默认为此方式提交数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;form_action.asp&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;text/plain&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-multipart-form-data"><a href="#2-multipart-form-data" class="headerlink" title="2.multipart/form-data"></a>2.multipart/form-data</h6><blockquote><p>form 表单的 enctype 设为multipart/form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。</p><p>既可以上传键值对，也可以上传文件（Content-disposition）。</p><p>上传字段时以 –boundary 开始。</p><p>消息主体最后以 –boundary– 标示结束。</p></blockquote><h6 id="3-application-json"><a href="#3-application-json" class="headerlink" title="3.application/json"></a>3.application/json</h6><blockquote><p>json格式</p><p>Google 的 AngularJS 中的 Ajax 功能，默认提交 JSON 字符串</p></blockquote><h6 id="4-application-xml"><a href="#4-application-xml" class="headerlink" title="4.application/xml"></a>4.application/xml</h6><blockquote><p>以xml形式进行编码，会根据xml头指定的编码格式来编码。</p></blockquote><h6 id="5-text-xml"><a href="#5-text-xml" class="headerlink" title="5.text/xml"></a>5.text/xml</h6><blockquote><p>以xml形式进行编码，会忽略xml头所指定编码格式，默认采用US-ASCII编码。</p></blockquote><h6 id="6-text-html"><a href="#6-text-html" class="headerlink" title="6.text/html"></a>6.text/html</h6><blockquote><p>文本方式的网页，浏览器会调用html的解析器对文件进行处理。</p></blockquote><h6 id="7-text-plain"><a href="#7-text-plain" class="headerlink" title="7.text/plain"></a>7.text/plain</h6><blockquote><p>文件设置为纯文本形式，其中不含任何控件或格式字符。空格转换为 “+” 加号，但不对特殊字符编码。</p></blockquote><h4 id="3-请求体"><a href="#3-请求体" class="headerlink" title="(3)请求体"></a>(3)请求体</h4><blockquote><p>body</p><p>post请求有</p></blockquote><blockquote><p>拓展：</p><p>body：请求体中的数据</p><p>query：请求的参数，以？拼接</p><p>params：请求的参数，以 / 拼接</p></blockquote><h4 id="4-响应状态行"><a href="#4-响应状态行" class="headerlink" title="(4)响应状态行"></a>(4)响应状态行</h4><p>协议/版本 响应状态码 状态码描述</p><p>​                                                                                    <strong>HTTP状态码分类</strong></p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h4 id="5-多个响应头"><a href="#5-多个响应头" class="headerlink" title="(5)多个响应头"></a>(5)多个响应头</h4><p>Allow/Content-Encoding/Content-Type/Date/server….</p><p><img src="/images/response.png"></p><h4 id="6-响应体"><a href="#6-响应体" class="headerlink" title="(6)响应体"></a>(6)响应体</h4><p>html/css/js/img….</p><h3 id="2-HTTP文件缓存"><a href="#2-HTTP文件缓存" class="headerlink" title="2.HTTP文件缓存"></a>2.HTTP文件缓存</h3><p>是基于HTTP协议的浏览器端文件级缓存机制。在文件重复请求的情况下，浏览器根据HTTP响应的协议头信息判断是从服务器请求文件还是从本地读取文件。</p><p>查询Cache-Control（相对过期时间，Expires则是绝对过期时间）判断内容是否过期，未过期，直接读取，过期了则会进行HTTP请求。</p><h2 id="五、MIME"><a href="#五、MIME" class="headerlink" title="五、MIME"></a>五、MIME</h2><blockquote><p>多用途Internet邮件扩展</p><p>一个开放的多语言、多媒体电子邮件标准</p></blockquote><p>格式：主类型、子类型</p><p>访问网页时，帮助浏览器识别一个HTTP请求返回的是什么内容的数据，应该如何打开、显示。</p>]]></content>
    
    
    <categories>
      
      <category>前端技术基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaScript】作用域与闭包</title>
    <link href="/2021/03/07/%E3%80%90JavaScript%E3%80%91%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <url>/2021/03/07/%E3%80%90JavaScript%E3%80%91%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaScript】作用域与闭包"><a href="#【JavaScript】作用域与闭包" class="headerlink" title="【JavaScript】作用域与闭包"></a>【JavaScript】作用域与闭包</h1><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><h3 id="1、全局作用域"><a href="#1、全局作用域" class="headerlink" title="1、全局作用域"></a>1、全局作用域</h3><blockquote><p> 全局变量在整个全局环境都可使用</p><p>如果没有声明就给变量赋值，该变量会被认为是全局变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">let</span> n =<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、函数作用域"><a href="#2、函数作用域" class="headerlink" title="2、函数作用域"></a>2、函数作用域</h3><blockquote><p>在函数内部使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(n);<span class="hljs-comment">// n is not defined</span><br></code></pre></td></tr></table></figure><h3 id="3、块作用域"><a href="#3、块作用域" class="headerlink" title="3、块作用域"></a>3、块作用域</h3><blockquote><p>在各自的作用域中有效，不会有命名冲突</p><p>对let和const有效，var无效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>;<br>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//12</span><br>&#125;<br>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//10</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><h3 id="4、for循环中定义变量"><a href="#4、for循环中定义变量" class="headerlink" title="4、for循环中定义变量"></a>4、for循环中定义变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br><span class="hljs-built_in">console</span>.log(i);<span class="hljs-comment">//4</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br><span class="hljs-built_in">console</span>.log(i);<span class="hljs-comment">// i is not defined</span><br></code></pre></td></tr></table></figure><blockquote><p>for循环中使用定时器的情况</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//for循环中使用定时器</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;<span class="hljs-comment">//4,4,4,4</span><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;<span class="hljs-comment">//0,1,2,3</span><br><br></code></pre></td></tr></table></figure><p>解释：</p><p>for循环是同步的，计时器是异步的，所以先执行for循环，再执行定时器。</p><p>情况一：使用var时，i是定义在全局作用域内的,执行完for循环后，会生成4个定时器，打印i时，会在定时器内部找，没有找到，于是去父级作用域中找，此时找到的就是全局作用域中的i，值为4，所以打印了4个4。</p><p><img src="/images/situation1.png"></p><p>情况二：使用let时，i是在快中定义的，同理，4个定时器会在父级作用域中去找i，在每个块中可以找到对应的i，所以打印的是0，1，2，3。</p><p><img src="/images/situation2.png"></p><h4 id="模拟var的块级作用域"><a href="#模拟var的块级作用域" class="headerlink" title="模拟var的块级作用域"></a>模拟var的块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>    &#125;)(i)<br>&#125;<span class="hljs-comment">//0,1,2,3</span><br></code></pre></td></tr></table></figure><p>通俗的来说：如果这个作用域会被使用，就会被留下来，不然会被清除。（闭包的原理）</p><h2 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h2><blockquote><p>闭包( closure )指有权访问另一个函数作用域中变量的函数。—– JavaScript高级程序设计</p><p>作用：延伸变量的作用范围</p><p>闭包是一个典型的高阶函数</p></blockquote><h3 id="1、闭包使用"><a href="#1、闭包使用" class="headerlink" title="1、闭包使用"></a>1、闭包使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//闭包：fun函数的作用域访问了 另一个函数fn的局部变量n,fn就是一个闭包</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(n++);<br>      &#125;<br>    &#125;<br><br><span class="hljs-keyword">let</span> a = fn();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    a();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、闭包内存泄漏"><a href="#2、闭包内存泄漏" class="headerlink" title="2、闭包内存泄漏"></a>2、闭包内存泄漏</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;1244S&quot;</span>&gt;</span>敲击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> divs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;button&quot;</span>);</span><br><span class="javascript">    divs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">//1.需要的值单独取出</span></span><br><span class="javascript">      <span class="hljs-keyword">let</span> num = item.getAttribute(<span class="hljs-string">&quot;class&quot;</span>);</span><br><span class="javascript">      item.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(num)</span><br>      &#125;);<br><span class="javascript">      <span class="hljs-comment">//2.整个赋值为null</span></span><br><span class="javascript">      item = <span class="hljs-literal">null</span>;</span><br>    &#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、闭包中this指向问题"><a href="#3、闭包中this指向问题" class="headerlink" title="3、闭包中this指向问题"></a>3、闭包中this指向问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> lat = &#123;<br>     user:<span class="hljs-string">&quot;冷傲天&quot;</span>,<br>    get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = lat.get();<br><span class="hljs-built_in">console</span>.log(a());<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><blockquote><p>因为这里的this会指向window，而window没有user，所以undefined</p><p>可以用箭头函数解决</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> lat = &#123;<br>     user:<span class="hljs-string">&quot;冷傲天&quot;</span>,<br>    get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = lat.get();<br><span class="hljs-built_in">console</span>.log(a());<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaScript】构造函数 原型对象 实例复习</title>
    <link href="/2021/03/07/%E3%80%90JavaScript%E3%80%91%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/03/07/%E3%80%90JavaScript%E3%80%91%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaScript】构造函数-原型对象-实例复习"><a href="#【JavaScript】构造函数-原型对象-实例复习" class="headerlink" title="【JavaScript】构造函数 原型对象 实例复习"></a>【JavaScript】构造函数 原型对象 实例复习</h1><h2 id="一、构造函数"><a href="#一、构造函数" class="headerlink" title="一、构造函数"></a>一、构造函数</h2><blockquote><p>es6之前，没有引入类的概念，对象是通过构造函数来定义的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造函数名大写</span><br><span class="hljs-comment">//要与new一起使用才有意义</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-comment">//实例成员，通过对象访问</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//静态成员，通过构造函数访问</span><br>Father.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="二、原型对象"><a href="#二、原型对象" class="headerlink" title="二、原型对象"></a>二、原型对象</h2><blockquote><p>每一个构造函数上都有一个原型对象prototype</p><p>原型对象的作用：共享方法</p><p>一般公共的方法会放在原型对象上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">ather.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我会唱歌&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三、对象实例的原型属性"><a href="#三、对象实例的原型属性" class="headerlink" title="三、对象实例的原型属性"></a>三、对象实例的原型属性</h2><blockquote><p>每个实例对象都有一个属性_<em>prop</em>_</p><p>__prop__不能直接复制</p><p>指向构造函数的原型对象prototype</p></blockquote><h2 id="四、方法查找与关系"><a href="#四、方法查找与关系" class="headerlink" title="四、方法查找与关系"></a>四、方法查找与关系</h2><blockquote><p>方法的查找规则:</p><p>首先看对象实例身上是否有 某方法,如果有就执行这个对象上的，如果没有,因为有__proto__的存在,就去构造函数原型对象prototype身上去查找这个方法</p></blockquote><p><img src="/images/relative.png"></p><h2 id="五、constructor属性"><a href="#五、constructor属性" class="headerlink" title="五、constructor属性"></a>五、constructor属性</h2><blockquote><p>原型对象和__prop__属性上都有一个construcor，指向原来的构造函数</p><p>若修改了原型对象，给原型对象赋值的了一个对象，会覆盖原来的，必须利用constructor指回原来的构造函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">Father.prototype = &#123;<br>    <span class="hljs-comment">//手动指回</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Father</span>;<br>    <span class="hljs-comment">//修改添加</span><br>    dance:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            consoloe.log(<span class="hljs-string">&quot;我会跳舞&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、原型链"><a href="#六、原型链" class="headerlink" title="六、原型链"></a>六、原型链</h2><p><img src="/images/prototype-chain.png"></p><h2 id="七、继承"><a href="#七、继承" class="headerlink" title="七、继承"></a>七、继承</h2><blockquote><p>es6之前没有提供类的继承</p><p>采用组合继承的方式</p></blockquote><h3 id="1-继承属性"><a href="#1-继承属性" class="headerlink" title="1.继承属性"></a>1.继承属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//子类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">name,age,grade</span>)</span>&#123;<br>    <span class="hljs-comment">//1.调用父类的构造方法</span><br>    <span class="hljs-comment">//this是指向当前的Son</span><br>    Father.call(<span class="hljs-built_in">this</span>,name,age);<br>    <span class="hljs-comment">//子类自己的成员变量</span><br>    <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-继承方法"><a href="#2-继承方法" class="headerlink" title="2.继承方法"></a>2.继承方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//用父类重写子类的prototype</span><br>Son.prototype = <span class="hljs-keyword">new</span> Father;<br><span class="hljs-comment">//手动指回</span><br>Son.prototype.constructor = Son;<br></code></pre></td></tr></table></figure><h2 id="八、扩展"><a href="#八、扩展" class="headerlink" title="八、扩展"></a>八、扩展</h2><table><thead><tr><th align="center">函数</th><th align="center">主要作用</th><th align="center">是否调用</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">call()</td><td align="center">用于继承属性</td><td align="center">是</td><td align="center">参数arguments形式</td></tr><tr><td align="center">bind()</td><td align="center">定时器等不需要调用的地方</td><td align="center">否</td><td align="center"></td></tr><tr><td align="center">apply()</td><td align="center">与数组有关的地方</td><td align="center">是</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaScript复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】yarn eject报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91yarn%20eject%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91yarn%20eject%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】yarn-eject报错"><a href="#【React】yarn-eject报错" class="headerlink" title="【React】yarn eject报错"></a>【React】yarn eject报错</h1><h2 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h2><p>create-react-app项目使用yarn eject暴露webpack相关配置时，报错</p><p><img src="/images/yarn-eject.png"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>提交git</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m -xxx<br>复制代码<br></code></pre></td></tr></table></figure><p>提交后问题解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】项目启动less报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91less%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91less%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】create-react-app项目启动关于less报错"><a href="#【React】create-react-app项目启动关于less报错" class="headerlink" title="【React】create-react-app项目启动关于less报错"></a>【React】create-react-app项目启动关于less报错</h1><h2 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h2><p>在项目组中使用antd组件，自定义配置后，启动项目报错</p><p>TypeError: this.getOptions is not a function</p><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><p>less-loader版本过高</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>1、卸载原版本</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yarn <span class="hljs-keyword">remove</span> <span class="hljs-keyword">less</span>-loader<br>复制代码<br></code></pre></td></tr></table></figure><p>2、安装新版本</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">yarn <span class="hljs-keyword">add</span> less-loader<span class="hljs-subst">@5</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>复制代码<br></code></pre></td></tr></table></figure><p>完成后报错解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】antd自定义配置后报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91antd%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91antd%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】create-react-app项目使用antd自定义配置后，启动项目报错"><a href="#【React】create-react-app项目使用antd自定义配置后，启动项目报错" class="headerlink" title="【React】create-react-app项目使用antd自定义配置后，启动项目报错"></a>【React】create-react-app项目使用antd自定义配置后，启动项目报错</h1><h2 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h2><p>Error: Cannot find module ‘react-scripts/package.json”</p><p><img src="/images/antd1.png"></p><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><p>缺少react-script类库文件</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>安装react-script</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yarn <span class="hljs-keyword">add </span>react-<span class="hljs-keyword">script </span>-dev<br></code></pre></td></tr></table></figure><p><img src="/images/antd2.png"></p><p>安装完成可以正常启动</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hexo】--hexo clean命令报错</title>
    <link href="/2021/03/05/%E3%80%90hexo%E3%80%91hexo%20clean%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90hexo%E3%80%91hexo%20clean%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【hexo】–hexo-clean命令报错"><a href="#【hexo】–hexo-clean命令报错" class="headerlink" title="【hexo】–hexo clean命令报错"></a>【hexo】–hexo clean命令报错</h1><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>在使用hexo clean命令时发生错误，报错信息如下</p><p>FATAL YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key (107:16)</p><p><img src="/images/hexo-clean.png"></p><p>发现所有hexo命令都会报此错误，如hexo g,hexo d。</p><h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><p>配置hexo的_config.yml文件时，冒号后面少了空格，或者重复写了键。我就是重复写了language键。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>添加上空格或者删除重复的键。</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
