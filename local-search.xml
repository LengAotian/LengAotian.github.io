<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【axios】axios知识点梳理</title>
    <link href="/2021/03/10/%E3%80%90axios%E3%80%91axios%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/"/>
    <url>/2021/03/10/%E3%80%90axios%E3%80%91axios%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="【axios】axios知识点梳理"><a href="#【axios】axios知识点梳理" class="headerlink" title="【axios】axios知识点梳理"></a>【axios】axios知识点梳理</h1><h2 id="一、axios介绍"><a href="#一、axios介绍" class="headerlink" title="一、axios介绍"></a>一、axios介绍</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><p>基于promise对ajax的封装</p><blockquote><p>可以通过浏览器向远端服务器发送ajax请求</p><p>可以通过node向远端服务器发送HTTP请求</p></blockquote><h2 id="二、axios发送请求"><a href="#二、axios发送请求" class="headerlink" title="二、axios发送请求"></a>二、axios发送请求</h2><h3 id="1、作为函数发送请求"><a href="#1、作为函数发送请求" class="headerlink" title="1、作为函数发送请求"></a>1、作为函数发送请求</h3><blockquote><p>axios作为函数来发送请求 </p><p>传一个配置对象为参数</p></blockquote><blockquote><p>配置对象：①对象中属性名固定，②属性的作用固定</p></blockquote><h4 id="1-get"><a href="#1-get" class="headerlink" title="(1)get"></a>(1)get</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送get无参请求</span><br>axios(&#123;<br>    <span class="hljs-comment">//不写method默认GET方式</span><br>    method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送get有参请求</span><br><br><span class="hljs-comment">//1.直接拼接</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx?id=1&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br><br><span class="hljs-comment">//2.使用params</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx&#x27;</span>,<br>    params: &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> &#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-post"><a href="#2-post" class="headerlink" title="(2)post"></a>(2)post</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送post无参请求</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送post有参请求</span><br><br><span class="hljs-comment">//1.data:&#123;&#125;</span><br><span class="hljs-comment">//采用data对象默认以json格式请求</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;xxxxx/xxxx&#x27;</span>,<br>    data:&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>&#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br><br><span class="hljs-comment">//2.data:&quot;naem=lisi&amp;age=10&quot;</span><br><span class="hljs-comment">//以urlenocde格式发送</span><br>axios(&#123;<br>    method: <span class="hljs-string">&#x27;POST</span><br><span class="hljs-string">    url: &#x27;</span>xxxxx/xxxx<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#125;).then(res=&gt;&#123;</span><br><span class="hljs-string">    console.log(res);</span><br><span class="hljs-string">&#125;).catch(err=&gt;&#123;</span><br><span class="hljs-string">    console.log(err);</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><blockquote><p>总结：</p><p>axios发送post请求使用data对象默认发送的参数为json，有三种解决办法。</p><p>1.用params答题data</p><p>2.使用urlencode格式：data:”name=lisi&amp;age=100”</p><p>3.服务器端给接受的参数设置@requestBody</p></blockquote><h3 id="2、作为对象发送请求"><a href="#2、作为对象发送请求" class="headerlink" title="2、作为对象发送请求"></a>2、作为对象发送请求</h3><h4 id="1-get-1"><a href="#1-get-1" class="headerlink" title="(1)get"></a>(1)get</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送get无参请求</span><br>axios.get(<span class="hljs-string">&#x27;url&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送get有参请求</span><br>axios.get(<span class="hljs-string">&#x27;url&#x27;</span>,&#123;<span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>&#125;&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-post-1"><a href="#2-post-1" class="headerlink" title="(2)post"></a>(2)post</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送post无参请求</span><br>axios.post(<span class="hljs-string">&#x27;url&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送post有参请求</span><br>axios.get(<span class="hljs-string">&#x27;url&#x27;</span>,<span class="hljs-string">&#x27;name=lisi&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="三、并发请求"><a href="#三、并发请求" class="headerlink" title="三、并发请求"></a>三、并发请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.all([<br>    axios.get(<span class="hljs-string">&#x27;url1&#x27;</span>),<br>    axios.get(<span class="hljs-string">&#x27;urel2&#x27;</span>)<br>]).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="四、全局配置"><a href="#四、全局配置" class="headerlink" title="四、全局配置"></a>四、全局配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.defaults.baseURL = <span class="hljs-string">&#x27;url&#x27;</span>;<br>axios.defaults.timeoue = <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h2 id="五、axios实例"><a href="#五、axios实例" class="headerlink" title="五、axios实例"></a>五、axios实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建事例</span><br><span class="hljs-keyword">let</span> lat = axios.create(&#123;<br>    baseURL: <span class="hljs-string">&#x27;url&#x27;</span>,<br>    timeout: <span class="hljs-number">2000</span><br>&#125;);<br><span class="hljs-comment">//使用</span><br>lat(&#123;<br>    method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;url&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="六、拦截器"><a href="#六、拦截器" class="headerlink" title="六、拦截器"></a>六、拦截器</h2><blockquote><p>作用：在网络请求发起请求或者响应时对操作进行相应的处理，比如：</p><p>1.发送请求时添加加载动画</p><p>2.使用token认证时强制登录</p><p>3.响应时数据处理与过滤</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//请求拦截</span><br>axios.interceptor.request.use(<span class="hljs-function"><span class="hljs-params">config</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入请求拦截&quot;</span>);<br>    <span class="hljs-comment">//放行请求</span><br>    <span class="hljs-keyword">return</span> config;<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求失败&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br><br><span class="hljs-comment">//响应拦截</span><br>axios.interceptor.request.use(<span class="hljs-function"><span class="hljs-params">config</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入响应拦截&quot;</span>);<br>    <span class="hljs-comment">//放行响应</span><br>    <span class="hljs-keyword">return</span> config.data;<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求失败&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="七、axios在vue中的封装"><a href="#七、axios在vue中的封装" class="headerlink" title="七、axios在vue中的封装"></a>七、axios在vue中的封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//安装axios</span><br>npm install axios --save<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入后就可以使用了</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-comment">//使用</span><br>axios(&#123;<br>url:<span class="hljs-string">&#x27;http://xxxxxxxxxxxx&#x27;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第一种方式</span><br><span class="hljs-comment">//项目中创建js文件</span><br><span class="hljs-comment">//封装axios函数，传三个参数</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config,success,fail</span>)</span>&#123;<br>    axios(&#123;<br>        url:config<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        success(res)<br>    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>        fail(err);<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sds/dsa&#x27;</span><span class="hljs-comment">//文件位置</span><br>request(<span class="hljs-string">&#x27;http//xxxxx&#x27;</span>,<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(res);&#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(err);&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第二种方式</span><br><span class="hljs-comment">//项目中创建js文件</span><br><span class="hljs-comment">//封装axios函数，传一个参数对象</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>)</span>&#123;<br>  axios.defaults.baseURL:<span class="hljs-string">&#x27;http://xxxxx&#x27;</span>;<br>  axios(config.url).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>config.success(res);<br>  &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>        config.fail(res);<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sds/dsa&#x27;</span><span class="hljs-comment">//文件位置</span><br>request(&#123;<br>    url:<span class="hljs-string">&#x27;getAllStudent&#x27;</span>,<br>    success:<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res);<br>    &#125;,<br>    fail:<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第三种方式，promise</span><br><span class="hljs-comment">//项目中创建js文件</span><br><span class="hljs-comment">//封装axios函数，创建axios实例</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> newVar = axios.create(&#123;<br>        baseURL:<span class="hljs-string">&#x27;http://xxxxx&#x27;</span>,<br>        timeout:<span class="hljs-number">5000</span>;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> promise(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>        newVar(config).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>            resolve(res);<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>            reject(err);<br>        &#125;)<br>    &#125;)<br>&#125;<br><span class="hljs-comment">//在需要使用的地方引入</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sds/dsa&#x27;</span><span class="hljs-comment">//文件位置</span><br>request(&#123;<br>    url:<span class="hljs-string">&#x27;getAllStudent&#x27;</span>;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第四种</span><br><span class="hljs-comment">//推荐</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> newVar = axios.create(&#123;<br>        baseURL:<span class="hljs-string">&#x27;http://xxxx&#x27;</span>;<br>        timeout:<span class="hljs-number">5000</span>;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> newVar(config);<br>&#125;<br><span class="hljs-comment">//调用者位置</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sds/dsa&#x27;</span><span class="hljs-comment">//文件位置</span><br>request(&#123;<br>    url:<span class="hljs-string">&#x27;getAllStudent&#x27;</span>;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>发送请求相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>axios</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【sql Server】知识点梳理</title>
    <link href="/2021/03/09/%E3%80%90sqlServer%E3%80%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/"/>
    <url>/2021/03/09/%E3%80%90sqlServer%E3%80%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库复习"><a href="#数据库复习" class="headerlink" title="数据库复习"></a>数据库复习</h1><h2 id="一、SQL语句-数据定义"><a href="#一、SQL语句-数据定义" class="headerlink" title="一、SQL语句-数据定义"></a>一、SQL语句-数据定义</h2><h3 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database stu_course<br>go<br><br>use stu_course<br></code></pre></td></tr></table></figure><h3 id="2、模式定义"><a href="#2、模式定义" class="headerlink" title="2、模式定义"></a>2、模式定义</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--为用户WANG定义了一个模式ST</span><br><span class="hljs-comment">--不指定模式名，自动将模式名设置为用户名</span><br><span class="hljs-keyword">CREATE</span> SCHEMA ST <span class="hljs-keyword">AUTHORIZATION</span> WANG;<br></code></pre></td></tr></table></figure><h3 id="3、删除模式"><a href="#3、删除模式" class="headerlink" title="3、删除模式"></a>3、删除模式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> SCHEMA<span class="hljs-operator">&lt;</span>模式名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>CASCADE<span class="hljs-operator">|</span>RESTRICT<span class="hljs-operator">&gt;</span>;<br><span class="hljs-comment">--CASCADE:删除模式及其所有数据库对象</span><br><span class="hljs-comment">--RESTRICT:如定义有对象，则拒绝执行该删除语句</span><br></code></pre></td></tr></table></figure><h3 id="4、表定义"><a href="#4、表定义" class="headerlink" title="4、表定义"></a>4、表定义</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--建立“学生”表Student，学号是主码，姓名取值唯一。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Student<br>(Sno <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-comment">/* 列级完整性约束条件*/</span><br>Sname <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">UNIQUE</span>, <span class="hljs-comment">/* Sname取唯一值*/</span><br>Ssex <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>Sage <span class="hljs-type">SMALLINT</span>,<br>Sdept <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>));<br><span class="hljs-comment">-- 建立一个“课程”表Course</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Course<br>( Cno <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>Cname <span class="hljs-type">CHAR</span>(<span class="hljs-number">40</span>),<br>Cpno <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) ,<br>Ccredit <span class="hljs-type">SMALLINT</span>，<br><span class="hljs-keyword">FOREIGN</span> KEY (Cpno) <span class="hljs-keyword">REFERENCES</span> Course(Cno); <span class="hljs-comment">/*Cpno是外码,被参照表是Course,被参照列是Cno*/</span><br></code></pre></td></tr></table></figure><h3 id="5、修改表"><a href="#5、修改表" class="headerlink" title="5、修改表"></a>5、修改表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--向Student表增加“入学时间”列，其数据类型为日期型。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">ADD</span> S_entrance <span class="hljs-type">DATE</span>;<br><span class="hljs-comment">--不论基本表中原来是否已有数据，新增加的列一律为空值。</span><br><br><span class="hljs-comment">--将年龄的数据类型由字符型（假设原来的数据类型是字符型）改为整数。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> Sage <span class="hljs-type">INT</span>;<br><br><span class="hljs-comment">--删除列</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tableName <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> columnName<br><br><span class="hljs-comment">--指定表中某列默认数据</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dbo.doc_exz <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> col_b_def <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">50</span> <span class="hljs-keyword">FOR</span> column_b ;<br><br><span class="hljs-comment">--增加课程名称必须取唯一值的约束条件。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Course <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span>(Cname); <br></code></pre></td></tr></table></figure><h3 id="6、删除表"><a href="#6、删除表" class="headerlink" title="6、删除表"></a>6、删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*DROP TABLE &lt;表名&gt;［RESTRICT|CASCADE］；</span><br><span class="hljs-comment">RESTRICT：删除表是有限制的。</span><br><span class="hljs-comment"> 欲删除的基本表不能被其他表的约束所引用</span><br><span class="hljs-comment"> 如果存在依赖该表的对象，则此表不能被删除</span><br><span class="hljs-comment">CASCADE：删除该表没有限制。</span><br><span class="hljs-comment"> 在删除基本表的同时，相关的依赖对象一起删除</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">--删除Student表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> Student CASCADE;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">基本表定义被删除，数据被删除</span><br><span class="hljs-comment">表上建立的索引、视图、触发器等一般也将被删除</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="7、建立、删除索引"><a href="#7、建立、删除索引" class="headerlink" title="7、建立、删除索引"></a>7、建立、删除索引</h3><p>P88</p><h2 id="二、SQL语句-数据查询"><a href="#二、SQL语句-数据查询" class="headerlink" title="二、SQL语句-数据查询"></a>二、SQL语句-数据查询</h2><h3 id="1、单表查询"><a href="#1、单表查询" class="headerlink" title="1、单表查询"></a>1、单表查询</h3><h4 id="1-、选择表中的若干列"><a href="#1-、选择表中的若干列" class="headerlink" title="(1)、选择表中的若干列"></a>(1)、选择表中的若干列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询全体学生的详细记录。</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname，Ssex，Sage，Sdept <span class="hljs-keyword">as</span> 系别<br><span class="hljs-keyword">FROM</span> Student;<br></code></pre></td></tr></table></figure><h4 id="2-、选择表中的若干元组"><a href="#2-、选择表中的若干元组" class="headerlink" title="(2)、选择表中的若干元组"></a>(2)、选择表中的若干元组</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--（1）消除取值重复的行</span><br><span class="hljs-comment">--查询选修了课程的学生学号。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Sno<br><span class="hljs-keyword">FROM</span> SC;<br><span class="hljs-comment">--（2）查询满足条件的元组 </span><br><span class="hljs-comment">--①比较大小：等于小于大于。。。</span><br><span class="hljs-comment">--查询计算机科学系全体学生的名单。</span><br><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span>;<br><span class="hljs-comment">--②确定范围</span><br><span class="hljs-comment">--查询年龄在20~23岁（包括20岁和23岁）之间的学生的姓名、系别和年龄</span><br><span class="hljs-keyword">SELECT</span> Sname,Sdept,Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sage <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">23</span>；<br><span class="hljs-comment">--查询年龄不在20~23岁之间的学生姓名、系别和年龄</span><br><span class="hljs-keyword">SELECT</span> Sname, Sdept, Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sage<span class="hljs-operator">&lt;</span><span class="hljs-number">20</span> <span class="hljs-keyword">or</span> Sage<span class="hljs-operator">&gt;</span><span class="hljs-number">23</span>;<br><span class="hljs-comment">--③确定集合</span><br><span class="hljs-comment">--查询信息系（IS）、数学系（MA）和计算机科学系（CS）学生的姓名和性别。</span><br><span class="hljs-keyword">SELECT</span> Sname,Ssex<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-keyword">IN</span> ( <span class="hljs-string">&#x27;IS&#x27;</span>,<span class="hljs-string">&#x27;MA&#x27;</span>,<span class="hljs-string">&#x27;CS&#x27;</span> );<br><span class="hljs-comment">--IN|NOT IN</span><br><span class="hljs-comment">--OR</span><br><span class="hljs-comment">--④字符匹配</span><br><span class="hljs-comment">--查询所有姓刘学生的姓名、学号和性别。</span><br><span class="hljs-keyword">SELECT</span> Sname, Sno, Ssex<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘%&#x27;</span>;<br><span class="hljs-comment">--查询姓&quot;欧阳&quot;且全名为三个汉字的学生的姓名。</span><br><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;欧阳__&#x27;</span>;<br><span class="hljs-comment">-- %:多个 _：一个</span><br><span class="hljs-comment">-- LIKE|NOT LIKE</span><br><span class="hljs-comment">--⑤涉及空值的查询</span><br><span class="hljs-comment">--谓词： IS NULL 或 IS NOT NULL</span><br><span class="hljs-comment">--“IS” 不能用 “=” 代替</span><br><span class="hljs-comment">--某些学生选修课程后没有参加考试，所以有选课记录，但没有考试成绩。查询缺少成绩的学生的学号和相应的课程号。</span><br><span class="hljs-keyword">SELECT</span> Sno, Cno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-comment">--查所有有成绩的学生学号和课程号。</span><br><span class="hljs-keyword">SELECT</span> Sno, Cno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">--查询向银行贷过款的法人代码</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> eno <span class="hljs-keyword">from</span> LoanT<br></code></pre></td></tr></table></figure><h4 id="3-ORDER-BY子句"><a href="#3-ORDER-BY子句" class="headerlink" title="(3)ORDER BY子句"></a>(3)ORDER BY子句</h4><p> 可以按一个或多个属性列排序 </p><p> 升序：ASC；缺省值为升序 （默认）</p><p> 降序：DESC； 当排序列含空值时</p><p> ASC：排序列为空值的元组最后显示 </p><p> DESC：排序列为空值的元组最先显示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询选修了3号课程的学生的学号及其成绩，查询结果按分数降序排列。</span><br><span class="hljs-keyword">SELECT</span> Sno, Grade<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span><br><br><span class="hljs-comment">--查询选修了3号课程，成绩最高的那位学生的学号及其成绩</span><br><span class="hljs-keyword">SELECT</span> top <span class="hljs-number">1</span> Sno, Grade<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><h4 id="4-聚集函数"><a href="#4-聚集函数" class="headerlink" title="(4)聚集函数"></a>(4)聚集函数</h4><p> 计数</p><p>​        COUNT（*）</p><p>​        COUNT（[DISTINCT|ALL] &lt;列名&gt;） </p><p> 计算总和</p><p>​        SUM（[DISTINCT|ALL] &lt;列名&gt;） </p><p> 计算平均值</p><p>​        AVG（[DISTINCT|ALL] &lt;列名&gt;） </p><p> 最大最小值 </p><p>​        MAX（[DISTINCT|ALL] &lt;列名&gt;</p><p>​        MIN（[DISTINCT|ALL] &lt;列名&gt;）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询学生总人数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 学生总人数<br><span class="hljs-keyword">FROM</span> Student；<br><span class="hljs-comment">--查询选修了课程的学生人数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> Sno) 学生人数<br><span class="hljs-keyword">FROM</span> SC;<br><span class="hljs-comment">--计算1号课程的学生平均成绩。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(Grade) 平均成绩<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; 1 &#x27;</span>;<br><span class="hljs-comment">--查询选修2号课程的学生最高分数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(Grade) 最高分数<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment">--查询学生200215122选修课程的总学分数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(Ccredit)总学分数<br><span class="hljs-keyword">FROM</span> SC,Course<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200215122&#x27;</span> <span class="hljs-keyword">AND</span> SC.Cno<span class="hljs-operator">=</span>Course.Cno; <br></code></pre></td></tr></table></figure><h4 id="5-、GROUP-BY子句"><a href="#5-、GROUP-BY子句" class="headerlink" title="(5)、GROUP BY子句"></a>(5)、GROUP BY子句</h4><p> 未对查询结果分组，聚集函数将作用于整个查询结果 </p><p> 对查询结果分组后，聚集函数将分别作用于每个组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--求各个课程号及相应的选课人数。</span><br><span class="hljs-keyword">SELECT</span> Cno,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 选课人数<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno<br><br><span class="hljs-comment">-- 查询选修了3门以上课程的学生学号</span><br><span class="hljs-keyword">SELECT</span> Sno, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 选课人数<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span><span class="hljs-number">3</span>;<br><span class="hljs-comment">--where筛选的是数据库表里面本来就有的字段，而having筛选的字段是从前筛选的字段筛选的。</span><br><br><br></code></pre></td></tr></table></figure><h3 id="2、连接查询"><a href="#2、连接查询" class="headerlink" title="2、连接查询"></a>2、连接查询</h3><h4 id="1-等值与非等值连接查询"><a href="#1-等值与非等值连接查询" class="headerlink" title="(1)等值与非等值连接查询"></a>(1)等值与非等值连接查询</h4><p>等值连接：连接运算符为=</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询每个学生及其选修课程的情况</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">join</span> SC <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span><br>SC.Sno<br></code></pre></td></tr></table></figure><p>自然连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade<br><span class="hljs-keyword">FROM</span> Student,SC<br><span class="hljs-keyword">WHERE</span> Student.Sno <span class="hljs-operator">=</span> SC.Sno;<br></code></pre></td></tr></table></figure><h4 id="2-自身连接"><a href="#2-自身连接" class="headerlink" title="(2)自身连接"></a>(2)自身连接</h4><p> 自身连接：一个表与其自己进行连接 </p><p> 需要给表起别名以示区别 </p><p> 由于所有属性名都是同名属性，因此必须使用别名前缀</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询每一门课的间接先修课（即先修课的先修课）</span><br><span class="hljs-keyword">SELECT</span> FIRST.Cno，SECOND.Cpno<br><span class="hljs-keyword">FROM</span> Course <span class="hljs-keyword">FIRST</span>，Course <span class="hljs-keyword">SECOND</span><br><span class="hljs-keyword">WHERE</span> FIRST.Cpno <span class="hljs-operator">=</span> SECOND.Cno;<br></code></pre></td></tr></table></figure><h4 id="3-外连接"><a href="#3-外连接" class="headerlink" title="(3)外连接"></a>(3)外连接</h4><p> 左外连接 </p><blockquote><p>列出左边关系（如本例Student）中所有的 元组 </p></blockquote><p>右外连接</p><blockquote><p>列出右边关系中所有的元组</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询没有贷过款的法人代表、法人名称及其经济性质</span><br><span class="hljs-keyword">select</span> le.eno,ename,Enature<br><span class="hljs-keyword">from</span> legalEntityT Le <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> LoanT L <span class="hljs-keyword">on</span> le.Eno<span class="hljs-operator">=</span>l.Eno<br><span class="hljs-keyword">where</span> Bno <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><h4 id="4-复合条件连接"><a href="#4-复合条件连接" class="headerlink" title="(4)复合条件连接"></a>(4)复合条件连接</h4><p>略</p><h3 id="3、嵌套查询"><a href="#3、嵌套查询" class="headerlink" title="3、嵌套查询"></a>3、嵌套查询</h3><p> 一个SELECT-FROM-WHERE语句称为一个查询块 </p><p> 将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询既选修了“1”号课又选修了“2”号课的学生学号</span><br><span class="hljs-comment">--1</span><br><span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> (Cno<span class="hljs-operator">=</span>‘<span class="hljs-number">1</span>’ <span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span>‘<span class="hljs-number">2</span>’);<br><span class="hljs-comment">--2</span><br><span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span>‘<span class="hljs-number">1</span>’ <span class="hljs-keyword">AND</span> Sno <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span>‘<span class="hljs-number">2</span>’);<br></code></pre></td></tr></table></figure><p>子查询的限制 </p><blockquote><p><strong>不能使用ORDER BY子句</strong> </p></blockquote><p>层层嵌套方式反映了 SQL语言的结构化 </p><p>有些嵌套查询可以用连接运算替代</p><h4 id="1-带有IN谓词的子查询"><a href="#1-带有IN谓词的子查询" class="headerlink" title="(1)带有IN谓词的子查询"></a>(1)带有IN谓词的子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询与“刘晨”在同一个系学习的学生</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname，Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname<span class="hljs-operator">=</span> ‘ 刘晨 ’);<br><span class="hljs-comment">/*此查询为不相关子查询。*/</span><br><br><span class="hljs-comment">--查询选修了课程名为“信息系统”的学生学号和姓名</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname <span class="hljs-comment">/*③ 最后在Student关系中*/</span><br><span class="hljs-keyword">FROM</span> Student <span class="hljs-comment">/*取出Sno和Sname*/</span><br><span class="hljs-keyword">WHERE</span> Sno <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Sno <span class="hljs-comment">/*② 然后在SC关系中找出选修了3号课程的学生学号*/</span><br><span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> Cno <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Cno <span class="hljs-comment">/*① 首先在Course关系中找出“信息系统”的课程号，为3号*/</span><br><span class="hljs-keyword">FROM</span> Course <br><span class="hljs-keyword">WHERE</span> Cname<span class="hljs-operator">=</span> ‘信息系统’<br>)<br>);<br></code></pre></td></tr></table></figure><h4 id="2-带有比较运算符的子查询"><a href="#2-带有比较运算符的子查询" class="headerlink" title="(2)带有比较运算符的子查询"></a>(2)带有比较运算符的子查询</h4><p> 当能确切知道内层查询返回单值时，可 用比较运算符（&gt;，&lt;，=，&gt;=， &lt;=，!=或&lt; &gt;）。 </p><p> 与ANY或ALL谓词配合使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--假设一个学生只可能在一个系学习，并且必须属于一个系，则在[例39]可以用 = 代替IN ：</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname，Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-operator">=</span><br>(<span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname<span class="hljs-operator">=</span> ‘刘晨’);<br></code></pre></td></tr></table></figure><h4 id="3-带有ANY（SOME）或ALL谓词的子查询"><a href="#3-带有ANY（SOME）或ALL谓词的子查询" class="headerlink" title="(3)带有ANY（SOME）或ALL谓词的子查询"></a>(3)带有ANY（SOME）或ALL谓词的子查询</h4><p>谓词语义 </p><p> ANY：任意一个值 </p><p> ALL：所有值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询其他系中比计算机科学某一学生年龄小的学生姓名和年龄</span><br><span class="hljs-keyword">SELECT</span> Sname，Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sage <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">ANY</span> <br>(<span class="hljs-keyword">SELECT</span> Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; CS &#x27;</span>)<br><span class="hljs-keyword">AND</span> Sdept <span class="hljs-operator">&lt;&gt;</span> ‘CS <span class="hljs-string">&#x27; ; /*父查询块中的条件:其他系 */</span><br></code></pre></td></tr></table></figure><h4 id="4-带有EXISTS谓词的子查询"><a href="#4-带有EXISTS谓词的子查询" class="headerlink" title="(4)带有EXISTS谓词的子查询"></a>(4)带有EXISTS谓词的子查询</h4><blockquote><p>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真 值“true”或逻辑假值“false”。</p><blockquote><p>若内层查询结果非空，则外层的WHERE子句返回真值</p><p>若内层查询结果为空，则外层的WHERE子句返回假值 </p></blockquote></blockquote><p>NOT EXISTS 与 EXISTS相反</p><p>由EXISTS引出的子查询，其目标列表达式通常都用* ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询所有选修了1号课程的学生姓名。</span><br><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span>Student.Sno <span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; 1</span><br><span class="hljs-string">&#x27;</span>);<br><span class="hljs-comment">--查询选修了全部课程的学生姓名。</span><br><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> Student.Sno<br><span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span> Course.Cno<br>)<br>);<br> <br><span class="hljs-comment">--不存在有一门课程没学过的同学</span><br><span class="hljs-keyword">SELECT</span> sname<br><span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> course<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> sc<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> Student.Sno<br><span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span> Course.Cno <span class="hljs-comment">--某学生学过的课程</span><br>)<span class="hljs-comment">--他没有学过的课程</span><br>)<span class="hljs-comment">--他不存在没有学过的课程</span><br></code></pre></td></tr></table></figure><h2 id="三、数据更新"><a href="#三、数据更新" class="headerlink" title="三、数据更新"></a>三、数据更新</h2><h3 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h3><h4 id="1-插入元祖"><a href="#1-插入元祖" class="headerlink" title="(1)插入元祖"></a>(1)插入元祖</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将一个新学生元组（学号：200215128；</span><br><span class="hljs-comment">--姓名：陈冬；性别：男；所在系：IS；年龄：18岁）插入到Student表中。</span><br><span class="hljs-keyword">INSERT</span>                   <br><span class="hljs-keyword">INTO</span> Student (Sno，Sname，Ssex，Sdept，Sage)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;200215128&#x27;</span>,<span class="hljs-string">&#x27;陈冬&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;IS&#x27;</span>,<span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><h4 id="2-插入子查询结果"><a href="#2-插入子查询结果" class="headerlink" title="(2)插入子查询结果"></a>(2)插入子查询结果</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--对每一个系，求学生的平均年龄，并把结果存入数据库。</span><br><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> Dept_age(Sdept，Avg_age)<br><span class="hljs-keyword">SELECT</span> Sdept，<span class="hljs-built_in">AVG</span>(Sage)<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sdept;<br></code></pre></td></tr></table></figure><h4 id="3-插入一列"><a href="#3-插入一列" class="headerlink" title="(3)插入一列"></a>(3)插入一列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--为“员工表”增加一列“性别”类型为nchar(1)</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 员工表 <span class="hljs-keyword">add</span> 性别 <span class="hljs-type">nchar</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="2、修改数据"><a href="#2、修改数据" class="headerlink" title="2、修改数据"></a>2、修改数据</h3><h4 id="1-修改某一个元组的值"><a href="#1-修改某一个元组的值" class="headerlink" title="(1) 修改某一个元组的值"></a>(1) 修改某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将学生200215121的年龄改为22岁</span><br>UPDATE Student<br><span class="hljs-keyword">SET</span> Sage<span class="hljs-operator">=</span><span class="hljs-number">22</span><br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27; 200215121 &#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-修改多个元组的值"><a href="#2-修改多个元组的值" class="headerlink" title="(2)修改多个元组的值"></a>(2)修改多个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将所有学生的年龄增加1岁</span><br>UPDATE Student<br><span class="hljs-keyword">SET</span> Sage<span class="hljs-operator">=</span> Sage<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="3-带子查询的修改语句"><a href="#3-带子查询的修改语句" class="headerlink" title="(3)带子查询的修改语句"></a>(3)带子查询的修改语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将计算机科学系全体学生的成绩置零。</span><br>UPDATE SC<br><span class="hljs-keyword">SET</span> Grade<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-string">&#x27;CS&#x27;</span><span class="hljs-operator">=</span><br>(<span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Student.Sno <span class="hljs-operator">=</span> SC.Sno);<br></code></pre></td></tr></table></figure><h3 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h3><h4 id="1-删除某一个元组的值"><a href="#1-删除某一个元组的值" class="headerlink" title="(1)删除某一个元组的值"></a>(1)删除某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除学号为200215128的学生记录。</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; 200215128 &#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-删除多个元组的值"><a href="#2-删除多个元组的值" class="headerlink" title="(2) 删除多个元组的值"></a>(2) 删除多个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除所有的学生选课记录。</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><h4 id="3-带子查询的删除语句"><a href="#3-带子查询的删除语句" class="headerlink" title="(3)带子查询的删除语句"></a>(3)带子查询的删除语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除计算机科学系所有学生的选课记录。</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> <span class="hljs-string">&#x27;CS&#x27;</span><span class="hljs-operator">=</span><br>(<span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Student.Sno<span class="hljs-operator">=</span>SC.Sno);<br></code></pre></td></tr></table></figure><h2 id="四、视图"><a href="#四、视图" class="headerlink" title="四、视图"></a>四、视图</h2><blockquote><p>虚表，是从一个或几个基本表（或视图）导出的表</p><p>数据库只存放视图的定义，不存放视图对应的数据 </p><p>基表中的数据发生变化，从视图中查询出的数据也随之改变</p></blockquote><h3 id="1、定义视图"><a href="#1、定义视图" class="headerlink" title="1、定义视图"></a>1、定义视图</h3><h4 id="1-建立视图"><a href="#1-建立视图" class="headerlink" title="(1)建立视图"></a>(1)建立视图</h4><blockquote><p>语句格式</p><blockquote><p>CREATE VIEW &lt;视图名&gt; [(&lt;列名&gt; [，&lt;列名&gt;]…)] AS &lt;子查询&gt; [WITH CHECK OPTION]；</p></blockquote><p>组成视图的属性列名：全部省略或全部指定 </p><p>子查询不允许含有ORDER BY子句和DISTINCT短语</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--建立信息系学生的视图。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> IS_Student<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno,Sname,Sage<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span>;<br><br><span class="hljs-comment">--建立信息系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有信息系的学生 。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> IS_Student<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname,Sage,Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span><br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">对IS_Student视图的更新操作：</span><br><span class="hljs-comment"> 修改操作：自动加上Sdept= &#x27;IS&#x27;的条件</span><br><span class="hljs-comment"> 删除操作：自动加上Sdept= &#x27;IS&#x27;的条件</span><br><span class="hljs-comment"> 插入操作：自动检查Sdept属性值是否为&#x27;IS&#x27;</span><br><span class="hljs-comment">如果不是，则拒绝该插入操作</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">--基于多个基表的视图</span><br><span class="hljs-comment">--建立信息系选修了1号课程的学生视图。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> IS_S1(Sno，Sname，Grade)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Student.Sno,Sname,Grade<br><span class="hljs-keyword">FROM</span> Student,SC<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span> <span class="hljs-keyword">AND</span><br>Student.Sno<span class="hljs-operator">=</span>SC.Sno <span class="hljs-keyword">AND</span><br>SC.Cno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br><br><span class="hljs-comment">--基于视图的视图</span><br><span class="hljs-comment">--建立信息系选修了1号课程且成绩在90分以上的学生的视图。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> IS_S2<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno，Sname，Grade<br><span class="hljs-keyword">FROM</span> IS_S1<br><span class="hljs-keyword">WHERE</span> Grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br><br><span class="hljs-comment">--带表达式的视图</span><br><span class="hljs-comment">--定义一个反映学生出生年份的视图。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> BT_S(Sno,Sname,Sbirth)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno,Sname,<span class="hljs-number">2000</span><span class="hljs-operator">-</span>Sage<br><span class="hljs-keyword">FROM</span> Student;<br><br><span class="hljs-comment">--分组视图</span><br><span class="hljs-comment">-- 将学生的学号及他的平均成绩定义为一个视图，假设SC表中“成绩”列Grade为数字型</span><br>CREAT <span class="hljs-keyword">VIEW</span> S_G(Sno，Gavg)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno，<span class="hljs-built_in">AVG</span>(Grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno;<br><br><span class="hljs-comment">--不指定属性列</span><br><span class="hljs-comment">--将Student表中所有女生记录定义为一个视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> F_Student(F_Sno，name，sex，age，dept)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Ssex<span class="hljs-operator">=</span>‘女’;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">缺点：</span><br><span class="hljs-comment">修改基表Student的结构后，Student表与F_Student视图的映象关</span><br><span class="hljs-comment">系被破坏，导致该视图不能正确工作。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="2-删除视图"><a href="#2-删除视图" class="headerlink" title="(2)删除视图"></a>(2)删除视图</h4><blockquote><p>语句的格式： </p><blockquote><p>DROP VIEW &lt;视图名&gt;;</p><p>该语句从数据字典中删除指定的视图定义</p><p>如果该视图上还导出了其他视图，使用CASCADE级 联删除语句，把该视图和由它导出的所有视图一起 删除 </p><p>删除基表时，由该基表导出的所有视图定义都必须 显式地使用DROP VIEW语句删除</p></blockquote></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除视图BT_S： </span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> BT_S;<br><span class="hljs-comment">--删除视图IS_S1：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> IS_S1;<br><span class="hljs-comment">--拒绝执行</span><br><span class="hljs-comment">--级联删除：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> IS_S1 CASCADE;<br></code></pre></td></tr></table></figure><h3 id="2、查询视图"><a href="#2、查询视图" class="headerlink" title="2、查询视图"></a>2、查询视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--在S_G视图中查询平均成绩在90分以上的学生学号和平均成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> S_G<br><span class="hljs-keyword">WHERE</span> Gavg<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br><br><span class="hljs-comment">--S_G视图的子查询定义：</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> S_G (Sno，Gavg)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> Sno，<span class="hljs-built_in">AVG</span>(Grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno;<br></code></pre></td></tr></table></figure><h3 id="3、更新视图"><a href="#3、更新视图" class="headerlink" title="3、更新视图"></a>3、更新视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--将信息系学生视图IS_Student中学号200215122的学生姓名改为“刘辰”</span><br>UPDATE IS_Student<br><span class="hljs-keyword">SET</span> Sname<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;刘辰&#x27;</span><br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> <span class="hljs-string">&#x27; 200215122 &#x27;</span>;<br></code></pre></td></tr></table></figure><p>更新视图的限制：一些视图是不可更新的，因为对这 些视图的更新不能唯一地有意义地转换成对相应基本表的更新</p><p>例：视图S_G为不可更新视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE S_G <br><span class="hljs-keyword">SET</span> Gavg<span class="hljs-operator">=</span><span class="hljs-number">90</span> <br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span> ‘<span class="hljs-number">200215121</span>’;<br></code></pre></td></tr></table></figure><p> 这个对视图的更新无法转换成对基本表SC的 更新</p><h2 id="五、触发器"><a href="#五、触发器" class="headerlink" title="五、触发器"></a>五、触发器</h2><h3 id="1-创建触发器"><a href="#1-创建触发器" class="headerlink" title="1.创建触发器"></a>1.创建触发器</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">为Student表创建一个</span><br><span class="hljs-comment">INSERT触发器，当</span><br><span class="hljs-comment">有新的学生插入时，</span><br><span class="hljs-comment">需要及时更新</span><br><span class="hljs-comment">DeptStuNum表中该</span><br><span class="hljs-comment">系学生的人数（加1）。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">--1.创建触发器------insert</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tr_ins_stu<br><span class="hljs-keyword">ON</span> Student<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span> <br><span class="hljs-keyword">as</span><br><br><span class="hljs-comment">--2.声明变量</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@dept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><br><span class="hljs-comment">--3.获取变量的值</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@dept</span> <span class="hljs-operator">=</span> inserted.sdept<br><span class="hljs-keyword">from</span> inserted<br><br><span class="hljs-comment">--4.触发条件以及内容</span><br>if <span class="hljs-keyword">exists</span>(<br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> deptstunum<br>    <span class="hljs-keyword">where</span> deptstunum.sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@dept</span><br>)<br><span class="hljs-keyword">begin</span><br>update deptstunum<br><span class="hljs-keyword">set</span> stunum <span class="hljs-operator">=</span> stunum <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@dept</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> deptstunum<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@dept</span>, <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*为student表创建一个</span><br><span class="hljs-comment">UPDATE触发器，当</span><br><span class="hljs-comment">更新了某位学生的系</span><br><span class="hljs-comment">别时，就激活触发器</span><br><span class="hljs-comment">级联更新</span><br><span class="hljs-comment">DeptStuNum表中相</span><br><span class="hljs-comment">关系别中的学生人数*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tri_upd_student<span class="hljs-comment">-----update!Update涉及新增和删除两个动作</span><br><span class="hljs-keyword">on</span> student<br><span class="hljs-keyword">for</span> update<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@oldDept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>), <span class="hljs-variable">@newDept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@oldDept</span> <span class="hljs-operator">=</span> Sdept <span class="hljs-keyword">from</span> deleted<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@newDept</span> <span class="hljs-operator">=</span> Sdept <span class="hljs-keyword">from</span> inserted<br>update DeptStuNum <span class="hljs-keyword">set</span> StuNum <span class="hljs-operator">=</span> StuNum – <span class="hljs-number">1</span> <span class="hljs-keyword">where</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@oldDept</span><br>if <span class="hljs-keyword">exists</span>( <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> DeptStuNum<br><span class="hljs-keyword">where</span> DeptStuNum.sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@newDept</span><br>)<br><span class="hljs-keyword">begin</span><br>    update DeptStuNum<br>    <span class="hljs-keyword">set</span> StuNum <span class="hljs-operator">=</span> StuNum <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">where</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@newDept</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> deptstunum <span class="hljs-keyword">values</span>(<span class="hljs-variable">@newDept</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="after"><a href="#after" class="headerlink" title="after"></a>after</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*任务：</span><br><span class="hljs-comment">创建一个AFTER触发器</span><br><span class="hljs-comment">，当对LoanT表的贷款金</span><br><span class="hljs-comment">额（Lamount）进行修改</span><br><span class="hljs-comment">时，若金额减少了%及以</span><br><span class="hljs-comment">上，则将此次操作记录到</span><br><span class="hljs-comment">另外一张表L_U（Eno，</span><br><span class="hljs-comment">Bno，Oldamount，</span><br><span class="hljs-comment">Newamount）。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> L_U1 <span class="hljs-keyword">on</span> LoanT<br>after update<br><span class="hljs-keyword">as</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@oldamount</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@newamount</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@eno</span> <span class="hljs-type">char</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@bno</span> <span class="hljs-type">char</span>(<span class="hljs-number">5</span>)<br><span class="hljs-comment">----------------在deleted表和inserted表中取值</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@oldamount</span> <span class="hljs-operator">=</span> deleted.Lamount <span class="hljs-keyword">from</span> deleted<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@newamount</span> <span class="hljs-operator">=</span> inserted.Lamount,<span class="hljs-variable">@eno</span><span class="hljs-operator">=</span>inserted.Eno,<span class="hljs-variable">@bno</span><span class="hljs-operator">=</span>inserted.Bno <span class="hljs-keyword">from</span> inserted<br><span class="hljs-comment">----------------判断是否需要插入另外一张表L_U</span><br>if <span class="hljs-variable">@newamount</span><span class="hljs-operator">&lt;</span>(<span class="hljs-variable">@oldamount</span><span class="hljs-operator">*</span><span class="hljs-number">0.9</span>)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> L_U <span class="hljs-keyword">values</span>(<span class="hljs-variable">@eno</span>,<span class="hljs-variable">@bno</span>,<span class="hljs-variable">@oldamount</span>,<span class="hljs-variable">@newamount</span>)<br></code></pre></td></tr></table></figure><h4 id="instead-of"><a href="#instead-of" class="headerlink" title="instead of"></a>instead of</h4><p>在以下情形下使用Instead Of 触发器： </p><p>（1）数据库里的数据禁止修改 </p><p>（2）有可能要回滚修改的SQL语句 </p><p>（3）在视图中使用触发器 </p><p>（4）用自己的方式去修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">course表和SC表是主从表之间的关系，当对</span><br><span class="hljs-comment">course表进行删除操作时，首先应判断SC表中是</span><br><span class="hljs-comment">否有相关记录，如果有，则禁止删除，如果还有</span><br><span class="hljs-comment">其他课程以此课程为先行课，也禁止删除。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tr_del_cos<br><span class="hljs-keyword">on</span> course<br>instead <span class="hljs-keyword">of</span> <span class="hljs-keyword">delete</span><br><span class="hljs-keyword">as</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@cno</span> <span class="hljs-operator">=</span> cno <span class="hljs-keyword">from</span> deleted<br><br>if(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> SC <span class="hljs-keyword">where</span> cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><br>print<span class="hljs-string">&#x27;SC表中有相关记录，不能删除&#x27;</span><br><span class="hljs-keyword">else</span> if (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> course <span class="hljs-keyword">where</span> cpno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span>)<br>print <span class="hljs-string">&#x27;有课程以此为先行课，不能删除&#x27;</span><br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> course <span class="hljs-keyword">where</span> cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> deleted)<br></code></pre></td></tr></table></figure><h3 id="2-修改触发器"><a href="#2-修改触发器" class="headerlink" title="2.修改触发器"></a>2.修改触发器</h3><p>将create修改为alter</p><p>其他的参数与创建触发器一致</p><h3 id="3-删除触发器"><a href="#3-删除触发器" class="headerlink" title="3.删除触发器"></a>3.删除触发器</h3><p>删除触发器用DROP TRIGGER语句，可以同时 删除一个或多个触发器，语法如下：</p><p> DROP TRIGGER 触发器名[ ,…n ] ON { DATABASE | ALL SERVER } [ ; ]</p><h3 id="4-范式"><a href="#4-范式" class="headerlink" title="4.范式"></a>4.范式</h3><p><img src="/images/fans.png"></p><h2 id="六、游标"><a href="#六、游标" class="headerlink" title="六、游标"></a>六、游标</h2><h3 id="1-声明游标"><a href="#1-声明游标" class="headerlink" title="1.声明游标"></a>1.声明游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> 游标名 <span class="hljs-keyword">cursor</span><br><span class="hljs-keyword">for</span><br> <span class="hljs-keyword">select</span>语句<br></code></pre></td></tr></table></figure><h3 id="2-打开游标"><a href="#2-打开游标" class="headerlink" title="2.打开游标"></a>2.打开游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">open</span> 游标名<br></code></pre></td></tr></table></figure><h3 id="3-提取游标"><a href="#3-提取游标" class="headerlink" title="3.提取游标"></a>3.提取游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span><br>游标名<br>[<span class="hljs-keyword">into</span> @变量名 [...n]]<br></code></pre></td></tr></table></figure><p>@@fetch_status</p><p> 通过检测全局变量@@Fetch_Status的值， 可以得知FETCH语句是否取到最后一条记录。</p><p> 当@@Fetch_Status值为0时，表示提取正常； -1表示已经取到了结果集的末尾，而其他值均 表明操作出了问题。</p><h3 id="4-关闭游标"><a href="#4-关闭游标" class="headerlink" title="4.关闭游标"></a>4.关闭游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CLOSE</span> 游标名<br></code></pre></td></tr></table></figure><p>在使用CLOSE语句关闭某游标后，系统并没有 完全释放游标的资源，并且也没有改变游标的定 义，当再次使用OPEN语句时可以重新打开此游 标。</p><h3 id="5-释放游标"><a href="#5-释放游标" class="headerlink" title="5.释放游标"></a>5.释放游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DEALLOCATE</span> 游标名<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个SCROLL游标，并演示LAST、PRIOR、RELATIVE和ABSOLUTE选项的使用。</span><br><br><span class="hljs-comment">--声明存储从游标中提取的数据的变量</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@Bno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">5</span>),<span class="hljs-variable">@Bname</span> NVARCHAR(<span class="hljs-number">10</span>),<span class="hljs-variable">@Btel</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">8</span>)<br><span class="hljs-comment">--声明游标</span><br><span class="hljs-keyword">DECLARE</span> Bank_Scr_cursor <span class="hljs-keyword">SCROLL</span> <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> BankT<br><span class="hljs-comment">--打开游标</span><br><span class="hljs-keyword">OPEN</span> Bank_Scr_cursor<br><span class="hljs-comment">--提取游标中的最后一行</span><br><span class="hljs-keyword">FETCH</span> <span class="hljs-keyword">LAST</span> <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--提取游标现有行的前一行</span><br><span class="hljs-keyword">FETCH</span> PRIOR <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--提取游标数据中的第二行</span><br><span class="hljs-keyword">FETCH</span> ABSOLUTE <span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--提取现有游标后面的第二行</span><br><span class="hljs-keyword">FETCH</span> RELATIVE <span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--提取现有游标前面的第二行</span><br><span class="hljs-keyword">FETCH</span> RELATIVE <span class="hljs-number">-2</span> <span class="hljs-keyword">FROM</span> Bank_Scr_cursor <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@Bno</span>,<span class="hljs-variable">@Bname</span>,<span class="hljs-variable">@Btel</span><br>Print <span class="hljs-variable">@Bno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@Btel</span><br><span class="hljs-comment">--关闭游标</span><br><span class="hljs-keyword">CLOSE</span> Bank_Scr_cursor<br><span class="hljs-comment">--释放游标</span><br><span class="hljs-keyword">DEALLOCATE</span> Bank_Scr_cursor<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">查询每家银行总贷款金额最多的前两名（包括并列的</span><br><span class="hljs-comment">情况）法人的贷款信息。列出银行名称、法人名称和</span><br><span class="hljs-comment">总贷款金额。报表形式大致如下：</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">--声明变量</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@ename</span> nvarchar(<span class="hljs-number">10</span>),<span class="hljs-variable">@eno</span> <span class="hljs-type">char</span>(<span class="hljs-number">5</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@bname</span> nvarchar(<span class="hljs-number">30</span>),<span class="hljs-variable">@bno</span> <span class="hljs-type">char</span>(<span class="hljs-number">5</span>),<span class="hljs-variable">@sun</span>_amount <span class="hljs-type">int</span><br><span class="hljs-comment">--声明第一个游标</span><br><span class="hljs-keyword">declare</span> bank_cursor <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>selsect Bno,Bname <span class="hljs-keyword">from</span> bankt<br><span class="hljs-comment">--打开第一个游标</span><br><span class="hljs-keyword">open</span> bank_cursor<br><span class="hljs-comment">--提取第一个游标</span><br><span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> bank_cursor <span class="hljs-keyword">into</span> <span class="hljs-variable">@bno</span>,<span class="hljs-variable">@bname</span><br>while @<span class="hljs-variable">@FETCH</span>_STATUS <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">begin</span><br>print <span class="hljs-variable">@bname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;总贷款金额最多的前两名法人贷款信息：&#x27;</span><br>print <span class="hljs-string">&#x27;法人名称总贷款金额（万元）&#x27;</span><br><span class="hljs-comment">--声明第二个游标</span><br><span class="hljs-keyword">declare</span> bank_top_cursor <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br><span class="hljs-keyword">select</span> top <span class="hljs-number">2</span> <span class="hljs-keyword">with</span> ties eno,<span class="hljs-built_in">sum</span>(lamount)<br><span class="hljs-comment">--with ties:返回了前两名，若第三、四...名跟第二名同，也会返回（最后一条数据的额外返回值）</span><br><span class="hljs-keyword">from</span> Loant<br><span class="hljs-keyword">where</span> bno <span class="hljs-operator">=</span> <span class="hljs-variable">@bno</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> eno<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">sum</span>(lamount) <span class="hljs-keyword">desc</span><br><span class="hljs-comment">--打开第二个游标</span><br><span class="hljs-keyword">open</span> bank_top_cursor<br><span class="hljs-comment">--提取第二个游标</span><br><span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> bank_top_cursor <span class="hljs-keyword">into</span> <span class="hljs-variable">@eno</span>,<span class="hljs-variable">@sum</span>_amount<br>while @<span class="hljs-variable">@FETCH</span>_STATUS <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@ename</span> <span class="hljs-operator">=</span> ename <br><span class="hljs-keyword">from</span> legalEntityT <br><span class="hljs-keyword">where</span> eno <span class="hljs-operator">=</span> <span class="hljs-variable">@eno</span><br>print <span class="hljs-variable">@ename</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@sum</span>_amount <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">6</span>))<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> bank_top_cursor <span class="hljs-keyword">into</span> <span class="hljs-variable">@eno</span>,<span class="hljs-variable">@sum</span>_amount<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> bank_top_cursor<br><span class="hljs-keyword">deallocate</span> bank_top_cursor<br>print <span class="hljs-string">&#x27; &#x27;</span><br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> bank_cursor <span class="hljs-keyword">into</span> <span class="hljs-variable">@bno</span>,<span class="hljs-variable">@bname</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> bank_cursor<br><span class="hljs-keyword">deallocate</span> bank_cursor<br></code></pre></td></tr></table></figure><h2 id="七、存储过程"><a href="#七、存储过程" class="headerlink" title="七、存储过程"></a>七、存储过程</h2><p>存储过程的用户接口： </p><ol><li>创建存储过程 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">Procedure</span> 过程名（［参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span>，...］）<br><span class="hljs-keyword">AS</span><br><span class="hljs-operator">&lt;</span>PL<span class="hljs-operator">/</span><span class="hljs-keyword">SQL</span>块<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><ul><li><p>过程名：数据库服务器合法的对象标识 </p></li><li><p>参数列表：用名字来标识调用时给出的参数值，必须指定值 的数据类型。参数也可以定义输入参数、输出参数或输入/ 输出参数。默认为输入参数。</p></li><li><p>过程体：是一个。包括声明部分和可执行语句 部分</p></li></ul><ol start="2"><li><p>执行存储过程 </p></li><li><p>删除存储过程</p></li></ol><h3 id="1-简单存储过程"><a href="#1-简单存储过程" class="headerlink" title="1.简单存储过程"></a>1.简单存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询“工商银行北京A支行”的贷款情况，要求列出法人名称、贷款日期、贷款金额</span><br><span class="hljs-keyword">create</span> proc P_Loan<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> ename,ldate,lamount<br><span class="hljs-keyword">from</span> BankT B <span class="hljs-keyword">join</span> LoanT L <span class="hljs-keyword">on</span> B.Bno<span class="hljs-operator">=</span>l.Bno<br><span class="hljs-keyword">join</span> LegalEntityT le <span class="hljs-keyword">on</span> le.Eno<span class="hljs-operator">=</span>L.Eno<br><span class="hljs-keyword">where</span> Bname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;工商银行北京A支行&#x27;</span><br><span class="hljs-comment">--执行</span><br><span class="hljs-keyword">exec</span> p_loan<br><br></code></pre></td></tr></table></figure><h3 id="2-带输入变量的存储过程"><a href="#2-带输入变量的存储过程" class="headerlink" title="2.带输入变量的存储过程"></a>2.带输入变量的存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建带参数的存储过程。查询某家指定银行的贷款情况，要求列出法人名称、贷款日期和贷款金额</span><br><span class="hljs-keyword">create</span> proc P_in_loan<br><span class="hljs-variable">@bankname</span> nvarchar(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> ename,ldate,lamount<br><span class="hljs-keyword">from</span> BankT B <span class="hljs-keyword">join</span> LoanT L <span class="hljs-keyword">on</span> B.Bno<span class="hljs-operator">=</span>l.Bno<br><span class="hljs-keyword">join</span> LegalEntityT le <span class="hljs-keyword">on</span> le.Eno<span class="hljs-operator">=</span>L.Eno<br><span class="hljs-keyword">where</span> Bname<span class="hljs-operator">=</span><span class="hljs-variable">@bankname</span><br><span class="hljs-keyword">exec</span> p_in_loan <span class="hljs-string">&#x27;工商银行北京A支行&#x27;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建输入参数和默认值的存储过程。查询某家指定银行（银行默认值是&#x27;工商银行北京A支行&#x27;）</span><br><span class="hljs-comment">--的贷款情况，要求列出法人名称、贷款日期、贷款金额</span><br><span class="hljs-keyword">create</span> proc P_inde_loan<br><span class="hljs-variable">@bankname</span> nvarchar(<span class="hljs-number">10</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;工商银行北京A支行&#x27;</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> ename,ldate,lamount<br><span class="hljs-keyword">from</span> BankT B <span class="hljs-keyword">join</span> LoanT L <span class="hljs-keyword">on</span> B.Bno<span class="hljs-operator">=</span>l.Bno<br><span class="hljs-keyword">join</span> LegalEntityT le <span class="hljs-keyword">on</span> le.Eno<span class="hljs-operator">=</span>L.Eno<br><span class="hljs-keyword">where</span> Bname<span class="hljs-operator">=</span><span class="hljs-variable">@bankname</span><br><span class="hljs-keyword">exec</span> p_inde_loan<br></code></pre></td></tr></table></figure><h3 id="3-输入和输出参-数"><a href="#3-输入和输出参-数" class="headerlink" title="3.输入和输出参 数"></a>3.输入和输出参 数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个带有输入参数和输出参数的存储过程，proc_AVG，用于返回某一个学生所学课程的平均分。选课表名是SC，学号属性为Sno</span><br><span class="hljs-keyword">create</span> proc proc_AVG<br><span class="hljs-variable">@studentNo</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) ,<br><span class="hljs-variable">@avg</span> <span class="hljs-type">int</span> output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avg</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">avg</span>(Grade)<br><span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-variable">@studentNo</span><br>go<br><br><span class="hljs-comment">--运行这个存储过程</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@studentNo</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@studentNo</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;200215121&#x27;</span><br><span class="hljs-keyword">exec</span> proc_AVG <span class="hljs-variable">@studentNo</span>, <span class="hljs-variable">@avg</span> output<br><span class="hljs-comment">-- 显示存储过程的执行结果</span><br>print ‘学号为’ <span class="hljs-operator">+</span> <span class="hljs-variable">@studentNo</span> <span class="hljs-operator">+</span> ‘同学的平均分为’ <span class="hljs-operator">+</span><br><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@avg</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--统计指定城市的银行在指定日期以后的总贷款金额和平均贷款金额，将统计结果作为参数输出</span><br><span class="hljs-comment">--创建存储过程</span><br><span class="hljs-keyword">create</span> proc p_inout_loan<br><span class="hljs-variable">@city</span> <span class="hljs-type">nchar</span>(<span class="hljs-number">4</span>),<br><span class="hljs-variable">@date</span> smalldatetime ,<br><span class="hljs-variable">@sum</span>_amount <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@avg</span>_amount <span class="hljs-type">int</span> output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@sum</span>_amount<span class="hljs-operator">=</span><span class="hljs-built_in">sum</span>(lamount),<span class="hljs-variable">@avg</span>_amount<span class="hljs-operator">=</span><span class="hljs-built_in">avg</span>(lamount)<br><span class="hljs-keyword">from</span> bankt B <span class="hljs-keyword">join</span> Loant L <span class="hljs-keyword">on</span> b.bno<span class="hljs-operator">=</span>L.bno<br><span class="hljs-keyword">where</span>(bname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">+</span>rtrim(<span class="hljs-variable">@city</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span>) <span class="hljs-keyword">and</span> (Ldate<span class="hljs-operator">&gt;</span><span class="hljs-variable">@date</span>)<br><span class="hljs-comment">--运行存储过程</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@s</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@a</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">exec</span> p_inout_loan <span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;2005-12-31&#x27;</span>,<span class="hljs-variable">@s</span> output,<span class="hljs-variable">@a</span> output<br>print <span class="hljs-string">&#x27;上海的银行2005年月日之后的总贷款金额为：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@s</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)) <span class="hljs-operator">+</span><span class="hljs-string">&#x27;万元，平均贷款金额为：&#x27;</span> <span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@a</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">6</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27;万元。&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-插入操作"><a href="#4-插入操作" class="headerlink" title="4.插入操作"></a>4.插入操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个插入操作的存储过程proc_ins_s，用于向student表中插入一条记录。</span><br><span class="hljs-keyword">create</span> proc proc_ins_s<br><span class="hljs-variable">@no</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br><span class="hljs-variable">@name</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),<br><span class="hljs-variable">@sex</span> <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br><span class="hljs-variable">@age</span> <span class="hljs-type">smallint</span>,<br><span class="hljs-variable">@dept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-operator">=</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@no</span>, <span class="hljs-variable">@name</span>, <span class="hljs-variable">@sex</span>, <span class="hljs-variable">@age</span>, <span class="hljs-variable">@dept</span>)<br>go<br><br><span class="hljs-comment">--运行这个存储过程</span><br><span class="hljs-keyword">Declare</span> <span class="hljs-variable">@no</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@name</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>), <span class="hljs-variable">@sex</span> <span class="hljs-type">char</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">Declare</span> <span class="hljs-variable">@age</span> <span class="hljs-type">smallint</span>, <span class="hljs-variable">@dept</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@no</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;wang&#x27;</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@sex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;m&#x27;</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@age</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;19&#x27;</span><br><span class="hljs-keyword">exec</span> proc_ins_s <span class="hljs-variable">@no</span>, <span class="hljs-variable">@name</span>, <span class="hljs-variable">@sex</span>, <span class="hljs-variable">@age</span>, <span class="hljs-variable">@dept</span><br><span class="hljs-comment">-- 验证</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student <span class="hljs-keyword">where</span> sno <span class="hljs-operator">=</span> <span class="hljs-variable">@no</span><br></code></pre></td></tr></table></figure><h3 id="5-创建执行更新操作的存储过程"><a href="#5-创建执行更新操作的存储过程" class="headerlink" title="5.创建执行更新操作的存储过程"></a>5.创建执行更新操作的存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个带有输入参数的基于更新的存储过程；proc_upd_sc，用于在SC表中为指定课程的成绩（介于55－59分）之间的学生成绩都修改为60分。</span><br><span class="hljs-keyword">create</span> proc proc_upd_sc<br><span class="hljs-variable">@course</span>_no <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">as</span><br>update SC<br><span class="hljs-keyword">set</span> Grade <span class="hljs-operator">=</span> <span class="hljs-number">60</span><br><span class="hljs-keyword">where</span> Cno <span class="hljs-operator">=</span> <span class="hljs-variable">@course</span>_no <span class="hljs-keyword">and</span> Grade <span class="hljs-keyword">between</span> <span class="hljs-number">55</span><br><span class="hljs-keyword">and</span> <span class="hljs-number">59</span><br>go<br><br><span class="hljs-comment">--运行这个存储过程</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@no</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@no</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">exec</span> proc_upd_sc <span class="hljs-variable">@no</span><br></code></pre></td></tr></table></figure><h3 id="6-创建执行删除操作的存储过程"><a href="#6-创建执行删除操作的存储过程" class="headerlink" title="6.创建执行删除操作的存储过程"></a>6.创建执行删除操作的存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建一个带有输入参数的存储过程proc_del_sno，用于删除student表中指定学号的学生信息。</span><br><span class="hljs-keyword">create</span> proc proc_del_sno<br><span class="hljs-variable">@stu</span>_no <span class="hljs-type">char</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-variable">@stu</span>_no<br>go<br><br><span class="hljs-comment">--运行这个存储过程</span><br><span class="hljs-keyword">exec</span> proc_del_sno <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="7-修改存储过程"><a href="#7-修改存储过程" class="headerlink" title="7.修改存储过程"></a>7.修改存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--修改任务前面创建的简单的存储过程proc_AVG，用于输出某门课程的平均分。</span><br><span class="hljs-keyword">ALTER</span> proc [dbo].[proc_AVG]<br><span class="hljs-variable">@courseNo</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br><span class="hljs-variable">@avg</span> <span class="hljs-type">int</span> output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avg</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">avg</span>(Grade)<br><span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Cno <span class="hljs-operator">=</span> <span class="hljs-variable">@courseNo</span><br></code></pre></td></tr></table></figure><h3 id="8-删除存储过程"><a href="#8-删除存储过程" class="headerlink" title="8.删除存储过程"></a>8.删除存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除存储过程的语法形式如下：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> ｛<span class="hljs-keyword">procedure</span>｝[<span class="hljs-number">1</span>…n]<br><span class="hljs-comment">--例如</span><br><span class="hljs-keyword">drop</span> proc proc_AVG <br></code></pre></td></tr></table></figure><h2 id="八、数据类型"><a href="#八、数据类型" class="headerlink" title="八、数据类型"></a>八、数据类型</h2><p><img src="/images/figure.png"></p><p><img src="/images/date.png"></p><p><img src="/images/string.png"></p><p><img src="/images/money.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>sqlServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【web技术】前端技术基础</title>
    <link href="/2021/03/09/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/03/09/%E3%80%90web%E6%8A%80%E6%9C%AF%E3%80%91%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="【web技术】前端技术基础"><a href="#【web技术】前端技术基础" class="headerlink" title="【web技术】前端技术基础"></a>【web技术】前端技术基础</h1><blockquote><p>本篇主要用于技术性知识复习，所以对于某些历史发展不做叙述。</p></blockquote><h2 id="一、浏览器基础"><a href="#一、浏览器基础" class="headerlink" title="一、浏览器基础"></a>一、浏览器基础</h2><h3 id="1-浏览器组成"><a href="#1-浏览器组成" class="headerlink" title="1.浏览器组成"></a>1.浏览器组成</h3><ul><li>用户界面：地址输入框，打开书签，打来历史记录等用户可操作的功能选项。</li><li>网络：浏览器开启网络线程发送请求或下载资源文件。</li><li>浏览器引擎：在用户界面与渲染引擎之间传送指令或在客户端本地缓存中读写数据，是浏览器各部分之间通信的核心。</li><li>渲染引擎（排版引擎）：解析DOM文档和CSS规则，并在浏览器界面中排版显示样式。</li><li>UI后端：绘制基本的浏览器窗口内控件，如组合选择框、按钮等。</li><li>JavaScript解释器：解释执行javascript脚本。</li><li>持久化数据存储：cookie、localStroge等9种客户端存储技术。</li></ul><h3 id="2-内核"><a href="#2-内核" class="headerlink" title="2.内核"></a>2.内核</h3><blockquote><p>分为渲染引擎和js引擎</p><p>我们通常说的内核主要指渲染引擎</p></blockquote><h4 id="（1）渲染引擎"><a href="#（1）渲染引擎" class="headerlink" title="（1）渲染引擎"></a>（1）渲染引擎</h4><p>Chrome：webkit（弃用），Blink</p><p>Firefox：gecko</p><p>Opera：presto（弃用），Blink</p><p>safari：webkit</p><h4 id="（2）js引擎"><a href="#（2）js引擎" class="headerlink" title="（2）js引擎"></a>（2）js引擎</h4><p>IE8及以前：JScript</p><p>IE9：Chakra</p><p>Edge：Chakra</p><p>Firefox：monkey系列</p><p>Safari：SquirrelFish系列</p><p>Opera：Carakan</p><p>Chrome：V8引擎（nodejs就是对V8的封装）</p><h2 id="二、Internet概述"><a href="#二、Internet概述" class="headerlink" title="二、Internet概述"></a>二、Internet概述</h2><h3 id="1-TCP-IP网络协议"><a href="#1-TCP-IP网络协议" class="headerlink" title="1.TCP/IP网络协议"></a>1.TCP/IP网络协议</h3><blockquote><p>传输控制协议/网际协议。</p><p>Internet最基本的协议，是Internet的基础。</p></blockquote><blockquote><p>定义了主机如何连接互联网，数据如何在主机之间传输的标准，基本传输单位是数据包。</p><p>TCP负责把数据分成若干数据包，并标注序号和说明。</p><p>IP负责给数据包添加发送主机和接收主机的地址。</p></blockquote><blockquote><p>TCP负责数据传输的可靠性，IP负责数据传输的正确性。</p></blockquote><h3 id="2-主机和IP地址"><a href="#2-主机和IP地址" class="headerlink" title="2.主机和IP地址"></a>2.主机和IP地址</h3><blockquote><p>每台主机有唯一的网络地址，称为IP地址，目前是用32位二进制数表示。</p><p>IP地址是层次地址，由网络号和主机号组成。</p></blockquote><h4 id="IPv4与IPv6"><a href="#IPv4与IPv6" class="headerlink" title="IPv4与IPv6"></a>IPv4与IPv6</h4><table><thead><tr><th></th><th>ipv4</th><th>ipv6</th></tr></thead><tbody><tr><td>地址长度</td><td>32</td><td>128</td></tr><tr><td>最大地址个数</td><td>2^32（0-255，四个整数）</td><td>2^128（0-65536，八个整数）</td></tr></tbody></table><h3 id="3-域名与DNS"><a href="#3-域名与DNS" class="headerlink" title="3.域名与DNS"></a>3.域名与DNS</h3><blockquote><p>域名系统采用分层结构，由几个域组成，用 . 分开。</p></blockquote><h4 id="顶级域名分类"><a href="#顶级域名分类" class="headerlink" title="顶级域名分类"></a>顶级域名分类</h4><ul><li>地理顶级域名：243个国家和地区的代码。cn、jp、uk等。</li><li>类别顶级域名：com(公司)、net(网络机构)、org(组织机构)、edu(美国教育)等。</li><li>新增顶级域名：biz(商业)、coop(合作公司)、info(信息行业)等。</li></ul><blockquote><p>DNS（域名系统），由域名服务器组成，域名服务器中保存了该网络所有主机的域名和对应的IP地址，并能将域名转换为IP地址。</p></blockquote><h2 id="三、web服务器"><a href="#三、web服务器" class="headerlink" title="三、web服务器"></a>三、web服务器</h2><blockquote><p>又称为WWW服务器，主要功能是提供网上信息浏览服务</p></blockquote><h3 id="1-部分介绍"><a href="#1-部分介绍" class="headerlink" title="1.部分介绍"></a>1.部分介绍</h3><p>应用层：使用HTTP</p><p>信息内容：采用HTML文档格式</p><p>信息定位：使用URL</p><h3 id="2-工作本质"><a href="#2-工作本质" class="headerlink" title="2.工作本质"></a>2.工作本质</h3><p>接收浏览器发送的数据（根据HTTP协议格式打包好的） =&gt; HTTP解析 =&gt; 逻辑处理 =&gt; HTTP封包 =&gt; 发送数据</p><h3 id="3-处理请求的两种方式"><a href="#3-处理请求的两种方式" class="headerlink" title="3.处理请求的两种方式"></a>3.处理请求的两种方式</h3><h4 id="静态请求"><a href="#静态请求" class="headerlink" title="静态请求"></a>静态请求</h4><p>客户端请求页面无需刷新，直接作为HTTP响应返回，请求的网页称为静态网页。</p><h4 id="动态请求"><a href="#动态请求" class="headerlink" title="动态请求"></a>动态请求</h4><p>客户端请求页面需要服务器处理（如JSP、ASP、CGI等），处理后将结果作为HTTP响应返回，请求的网页称为静态网页。</p><h3 id="4-常用的web服务器"><a href="#4-常用的web服务器" class="headerlink" title="4.常用的web服务器"></a>4.常用的web服务器</h3><p>tomcat（基于java），tomcat为Apache组织的一个服务器项目</p><p>Microsoft IIS</p><p>Apache</p><h2 id="四、HTTP协议"><a href="#四、HTTP协议" class="headerlink" title="四、HTTP协议"></a>四、HTTP协议</h2><blockquote><p>超文本传输协议，是web服务器(WWW服务器)和用户请求代理(如浏览器)之间通过应答请求模式传输超文本内容的一种协议</p><p>定义了如何解析请求信息，服务器用响应信息回复请求</p><p>建立在TCP/IP之上</p></blockquote><h3 id="1-HTTP报文"><a href="#1-HTTP报文" class="headerlink" title="1.HTTP报文"></a>1.HTTP报文</h3><blockquote><p>完整的报文由头部、空行、正文三部分组成</p></blockquote><p><img src="/images/http.png"></p><h4 id="1-请求行"><a href="#1-请求行" class="headerlink" title="(1)请求行"></a>(1)请求行</h4><p>method / URL / 版本协议和扩展内容</p><h4 id="2-多个请求头"><a href="#2-多个请求头" class="headerlink" title="(2)多个请求头"></a>(2)多个请求头</h4><p>Host（区分不同站点）/cookie（储存在用户本地终端上的数据）/Content-Type（请求体内容的类型）</p><h5 id="常见的Content-Type"><a href="#常见的Content-Type" class="headerlink" title="常见的Content-Type"></a>常见的Content-Type</h5><h6 id="1-application-x-www-form-urlencoded"><a href="#1-application-x-www-form-urlencoded" class="headerlink" title="1.application/x-www-form-urlencoded"></a>1.application/x-www-form-urlencoded</h6><blockquote><p>最常见的post提交数据方式</p><p>键值对， key1=val1&amp;key2=val2</p><p>如果提交原生form不设置enctype属性，默认为此方式提交数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;form_action.asp&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;text/plain&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-multipart-form-data"><a href="#2-multipart-form-data" class="headerlink" title="2.multipart/form-data"></a>2.multipart/form-data</h6><blockquote><p>form 表单的 enctype 设为multipart/form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。</p><p>既可以上传键值对，也可以上传文件（Content-disposition）。</p><p>上传字段时以 –boundary 开始。</p><p>消息主体最后以 –boundary– 标示结束。</p></blockquote><h6 id="3-application-json"><a href="#3-application-json" class="headerlink" title="3.application/json"></a>3.application/json</h6><blockquote><p>json格式</p><p>Google 的 AngularJS 中的 Ajax 功能，默认提交 JSON 字符串</p></blockquote><h6 id="4-application-xml"><a href="#4-application-xml" class="headerlink" title="4.application/xml"></a>4.application/xml</h6><blockquote><p>以xml形式进行编码，会根据xml头指定的编码格式来编码。</p></blockquote><h6 id="5-text-xml"><a href="#5-text-xml" class="headerlink" title="5.text/xml"></a>5.text/xml</h6><blockquote><p>以xml形式进行编码，会忽略xml头所指定编码格式，默认采用US-ASCII编码。</p></blockquote><h6 id="6-text-html"><a href="#6-text-html" class="headerlink" title="6.text/html"></a>6.text/html</h6><blockquote><p>文本方式的网页，浏览器会调用html的解析器对文件进行处理。</p></blockquote><h6 id="7-text-plain"><a href="#7-text-plain" class="headerlink" title="7.text/plain"></a>7.text/plain</h6><blockquote><p>文件设置为纯文本形式，其中不含任何控件或格式字符。空格转换为 “+” 加号，但不对特殊字符编码。</p></blockquote><h4 id="3-请求体"><a href="#3-请求体" class="headerlink" title="(3)请求体"></a>(3)请求体</h4><blockquote><p>body</p><p>post请求有</p></blockquote><blockquote><p>拓展：</p><p>body：请求体中的数据</p><p>query：请求的参数，以？拼接</p><p>params：请求的参数，以 / 拼接</p></blockquote><h4 id="4-响应状态行"><a href="#4-响应状态行" class="headerlink" title="(4)响应状态行"></a>(4)响应状态行</h4><p>协议/版本 响应状态码 状态码描述</p><p>​                                                                                    <strong>HTTP状态码分类</strong></p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h4 id="5-多个响应头"><a href="#5-多个响应头" class="headerlink" title="(5)多个响应头"></a>(5)多个响应头</h4><p>Allow/Content-Encoding/Content-Type/Date/server….</p><p><img src="/images/response.png"></p><h4 id="6-响应体"><a href="#6-响应体" class="headerlink" title="(6)响应体"></a>(6)响应体</h4><p>html/css/js/img….</p><h3 id="2-HTTP文件缓存"><a href="#2-HTTP文件缓存" class="headerlink" title="2.HTTP文件缓存"></a>2.HTTP文件缓存</h3><p>是基于HTTP协议的浏览器端文件级缓存机制。在文件重复请求的情况下，浏览器根据HTTP响应的协议头信息判断是从服务器请求文件还是从本地读取文件。</p><p>查询Cache-Control（相对过期时间，Expires则是绝对过期时间）判断内容是否过期，未过期，直接读取，过期了则会进行HTTP请求。</p><h2 id="五、MIME"><a href="#五、MIME" class="headerlink" title="五、MIME"></a>五、MIME</h2><blockquote><p>多用途Internet邮件扩展</p><p>一个开放的多语言、多媒体电子邮件标准</p></blockquote><p>格式：主类型、子类型</p><p>访问网页时，帮助浏览器识别一个HTTP请求返回的是什么内容的数据，应该如何打开、显示。</p>]]></content>
    
    
    <categories>
      
      <category>前端技术基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaScript】作用域与闭包</title>
    <link href="/2021/03/07/%E3%80%90JavaScript%E3%80%91%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <url>/2021/03/07/%E3%80%90JavaScript%E3%80%91%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaScript】作用域与闭包"><a href="#【JavaScript】作用域与闭包" class="headerlink" title="【JavaScript】作用域与闭包"></a>【JavaScript】作用域与闭包</h1><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><h3 id="1、全局作用域"><a href="#1、全局作用域" class="headerlink" title="1、全局作用域"></a>1、全局作用域</h3><blockquote><p> 全局变量在整个全局环境都可使用</p><p>如果没有声明就给变量赋值，该变量会被认为是全局变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">let</span> n =<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、函数作用域"><a href="#2、函数作用域" class="headerlink" title="2、函数作用域"></a>2、函数作用域</h3><blockquote><p>在函数内部使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(n);<span class="hljs-comment">// n is not defined</span><br></code></pre></td></tr></table></figure><h3 id="3、块作用域"><a href="#3、块作用域" class="headerlink" title="3、块作用域"></a>3、块作用域</h3><blockquote><p>在各自的作用域中有效，不会有命名冲突</p><p>对let和const有效，var无效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>;<br>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//12</span><br>&#125;<br>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//10</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><h3 id="4、for循环中定义变量"><a href="#4、for循环中定义变量" class="headerlink" title="4、for循环中定义变量"></a>4、for循环中定义变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br><span class="hljs-built_in">console</span>.log(i);<span class="hljs-comment">//4</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br><span class="hljs-built_in">console</span>.log(i);<span class="hljs-comment">// i is not defined</span><br></code></pre></td></tr></table></figure><blockquote><p>for循环中使用定时器的情况</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//for循环中使用定时器</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;<span class="hljs-comment">//4,4,4,4</span><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;<span class="hljs-comment">//0,1,2,3</span><br><br></code></pre></td></tr></table></figure><p>解释：</p><p>for循环是同步的，计时器是异步的，所以先执行for循环，再执行定时器。</p><p>情况一：使用var时，i是定义在全局作用域内的,执行完for循环后，会生成4个定时器，打印i时，会在定时器内部找，没有找到，于是去父级作用域中找，此时找到的就是全局作用域中的i，值为4，所以打印了4个4。</p><p><img src="/images/situation1.png"></p><p>情况二：使用let时，i是在快中定义的，同理，4个定时器会在父级作用域中去找i，在每个块中可以找到对应的i，所以打印的是0，1，2，3。</p><p><img src="/images/situation2.png"></p><h4 id="模拟var的块级作用域"><a href="#模拟var的块级作用域" class="headerlink" title="模拟var的块级作用域"></a>模拟var的块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;,<span class="hljs-number">1000</span>);<br>    &#125;)(i)<br>&#125;<span class="hljs-comment">//0,1,2,3</span><br></code></pre></td></tr></table></figure><p>通俗的来说：如果这个作用域会被使用，就会被留下来，不然会被清除。（闭包的原理）</p><h2 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h2><blockquote><p>闭包( closure )指有权访问另一个函数作用域中变量的函数。—– JavaScript高级程序设计</p><p>作用：延伸变量的作用范围</p><p>闭包是一个典型的高阶函数</p></blockquote><h3 id="1、闭包使用"><a href="#1、闭包使用" class="headerlink" title="1、闭包使用"></a>1、闭包使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//闭包：fun函数的作用域访问了 另一个函数fn的局部变量n,fn就是一个闭包</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(n++);<br>      &#125;<br>    &#125;<br><br><span class="hljs-keyword">let</span> a = fn();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    a();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、闭包内存泄漏"><a href="#2、闭包内存泄漏" class="headerlink" title="2、闭包内存泄漏"></a>2、闭包内存泄漏</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;1244S&quot;</span>&gt;</span>敲击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> divs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;button&quot;</span>);</span><br><span class="javascript">    divs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">//1.需要的值单独取出</span></span><br><span class="javascript">      <span class="hljs-keyword">let</span> num = item.getAttribute(<span class="hljs-string">&quot;class&quot;</span>);</span><br><span class="javascript">      item.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(num)</span><br>      &#125;);<br><span class="javascript">      <span class="hljs-comment">//2.整个赋值为null</span></span><br><span class="javascript">      item = <span class="hljs-literal">null</span>;</span><br>    &#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、闭包中this指向问题"><a href="#3、闭包中this指向问题" class="headerlink" title="3、闭包中this指向问题"></a>3、闭包中this指向问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> lat = &#123;<br>     user:<span class="hljs-string">&quot;冷傲天&quot;</span>,<br>    get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = lat.get();<br><span class="hljs-built_in">console</span>.log(a());<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><blockquote><p>因为这里的this会指向window，而window没有user，所以undefined</p><p>可以用箭头函数解决</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> lat = &#123;<br>     user:<span class="hljs-string">&quot;冷傲天&quot;</span>,<br>    get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = lat.get();<br><span class="hljs-built_in">console</span>.log(a());<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【JavaScript】构造函数 原型对象 实例复习</title>
    <link href="/2021/03/07/%E3%80%90JavaScript%E3%80%91%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/03/07/%E3%80%90JavaScript%E3%80%91%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaScript】构造函数-原型对象-实例复习"><a href="#【JavaScript】构造函数-原型对象-实例复习" class="headerlink" title="【JavaScript】构造函数 原型对象 实例复习"></a>【JavaScript】构造函数 原型对象 实例复习</h1><h2 id="一、构造函数"><a href="#一、构造函数" class="headerlink" title="一、构造函数"></a>一、构造函数</h2><blockquote><p>es6之前，没有引入类的概念，对象是通过构造函数来定义的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造函数名大写</span><br><span class="hljs-comment">//要与new一起使用才有意义</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-comment">//实例成员，通过对象访问</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//静态成员，通过构造函数访问</span><br>Father.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="二、原型对象"><a href="#二、原型对象" class="headerlink" title="二、原型对象"></a>二、原型对象</h2><blockquote><p>每一个构造函数上都有一个原型对象prototype</p><p>原型对象的作用：共享方法</p><p>一般公共的方法会放在原型对象上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">ather.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我会唱歌&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三、对象实例的原型属性"><a href="#三、对象实例的原型属性" class="headerlink" title="三、对象实例的原型属性"></a>三、对象实例的原型属性</h2><blockquote><p>每个实例对象都有一个属性_<em>prop</em>_</p><p>__prop__不能直接复制</p><p>指向构造函数的原型对象prototype</p></blockquote><h2 id="四、方法查找与关系"><a href="#四、方法查找与关系" class="headerlink" title="四、方法查找与关系"></a>四、方法查找与关系</h2><blockquote><p>方法的查找规则:</p><p>首先看对象实例身上是否有 某方法,如果有就执行这个对象上的，如果没有,因为有__proto__的存在,就去构造函数原型对象prototype身上去查找这个方法</p></blockquote><p><img src="/images/relative.png"></p><h2 id="五、constructor属性"><a href="#五、constructor属性" class="headerlink" title="五、constructor属性"></a>五、constructor属性</h2><blockquote><p>原型对象和__prop__属性上都有一个construcor，指向原来的构造函数</p><p>若修改了原型对象，给原型对象赋值的了一个对象，会覆盖原来的，必须利用constructor指回原来的构造函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">Father.prototype = &#123;<br>    <span class="hljs-comment">//手动指回</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Father</span>;<br>    <span class="hljs-comment">//修改添加</span><br>    dance:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            consoloe.log(<span class="hljs-string">&quot;我会跳舞&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、原型链"><a href="#六、原型链" class="headerlink" title="六、原型链"></a>六、原型链</h2><p><img src="/images/prototype-chain.png"></p><h2 id="七、继承"><a href="#七、继承" class="headerlink" title="七、继承"></a>七、继承</h2><blockquote><p>es6之前没有提供类的继承</p><p>采用组合继承的方式</p></blockquote><h3 id="1-继承属性"><a href="#1-继承属性" class="headerlink" title="1.继承属性"></a>1.继承属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//子类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">name,age,grade</span>)</span>&#123;<br>    <span class="hljs-comment">//1.调用父类的构造方法</span><br>    <span class="hljs-comment">//this是指向当前的Son</span><br>    Father.call(<span class="hljs-built_in">this</span>,name,age);<br>    <span class="hljs-comment">//子类自己的成员变量</span><br>    <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-继承方法"><a href="#2-继承方法" class="headerlink" title="2.继承方法"></a>2.继承方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//用父类重写子类的prototype</span><br>Son.prototype = <span class="hljs-keyword">new</span> Father;<br><span class="hljs-comment">//手动指回</span><br>Son.prototype.constructor = Son;<br></code></pre></td></tr></table></figure><h2 id="八、扩展"><a href="#八、扩展" class="headerlink" title="八、扩展"></a>八、扩展</h2><table><thead><tr><th align="center">函数</th><th align="center">主要作用</th><th align="center">是否调用</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">call()</td><td align="center">用于继承属性</td><td align="center">是</td><td align="center">参数arguments形式</td></tr><tr><td align="center">bind()</td><td align="center">定时器等不需要调用的地方</td><td align="center">否</td><td align="center"></td></tr><tr><td align="center">apply()</td><td align="center">与数组有关的地方</td><td align="center">是</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaScript复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】yarn eject报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91yarn%20eject%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91yarn%20eject%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】yarn-eject报错"><a href="#【React】yarn-eject报错" class="headerlink" title="【React】yarn eject报错"></a>【React】yarn eject报错</h1><h2 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h2><p>create-react-app项目使用yarn eject暴露webpack相关配置时，报错</p><p><img src="/images/yarn-eject.png"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>提交git</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m -xxx<br>复制代码<br></code></pre></td></tr></table></figure><p>提交后问题解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】项目启动less报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91less%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91less%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】create-react-app项目启动关于less报错"><a href="#【React】create-react-app项目启动关于less报错" class="headerlink" title="【React】create-react-app项目启动关于less报错"></a>【React】create-react-app项目启动关于less报错</h1><h2 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h2><p>在项目组中使用antd组件，自定义配置后，启动项目报错</p><p>TypeError: this.getOptions is not a function</p><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><p>less-loader版本过高</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>1、卸载原版本</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yarn <span class="hljs-keyword">remove</span> <span class="hljs-keyword">less</span>-loader<br>复制代码<br></code></pre></td></tr></table></figure><p>2、安装新版本</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">yarn <span class="hljs-keyword">add</span> less-loader<span class="hljs-subst">@5</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>复制代码<br></code></pre></td></tr></table></figure><p>完成后报错解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】antd自定义配置后报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91antd%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91antd%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】create-react-app项目使用antd自定义配置后，启动项目报错"><a href="#【React】create-react-app项目使用antd自定义配置后，启动项目报错" class="headerlink" title="【React】create-react-app项目使用antd自定义配置后，启动项目报错"></a>【React】create-react-app项目使用antd自定义配置后，启动项目报错</h1><h2 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h2><p>Error: Cannot find module ‘react-scripts/package.json”</p><p><img src="/images/antd1.png"></p><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><p>缺少react-script类库文件</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>安装react-script</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yarn <span class="hljs-keyword">add </span>react-<span class="hljs-keyword">script </span>-dev<br></code></pre></td></tr></table></figure><p><img src="/images/antd2.png"></p><p>安装完成可以正常启动</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hexo】--hexo clean命令报错</title>
    <link href="/2021/03/05/%E3%80%90hexo%E3%80%91hexo%20clean%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90hexo%E3%80%91hexo%20clean%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【hexo】–hexo-clean命令报错"><a href="#【hexo】–hexo-clean命令报错" class="headerlink" title="【hexo】–hexo clean命令报错"></a>【hexo】–hexo clean命令报错</h1><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>在使用hexo clean命令时发生错误，报错信息如下</p><p>FATAL YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key (107:16)</p><p><img src="/images/hexo-clean.png"></p><p>发现所有hexo命令都会报此错误，如hexo g,hexo d。</p><h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><p>配置hexo的_config.yml文件时，冒号后面少了空格，或者重复写了键。我就是重复写了language键。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>添加上空格或者删除重复的键。</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
