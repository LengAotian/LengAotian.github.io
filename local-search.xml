<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【JavaScript】构造函数 原型对象 实例复习</title>
    <link href="/2021/03/07/%E3%80%90JavaScript%E3%80%91%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/03/07/%E3%80%90JavaScript%E3%80%91%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="【JavaScript】构造函数-原型对象-实例复习"><a href="#【JavaScript】构造函数-原型对象-实例复习" class="headerlink" title="【JavaScript】构造函数 原型对象 实例复习"></a>【JavaScript】构造函数 原型对象 实例复习</h1><h2 id="一、构造函数"><a href="#一、构造函数" class="headerlink" title="一、构造函数"></a>一、构造函数</h2><blockquote><p>es6之前，没有引入类的概念，对象是通过构造函数来定义的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造函数名大写</span><br><span class="hljs-comment">//要与new一起使用才有意义</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-comment">//实例成员，通过对象访问</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//静态成员，通过构造函数访问</span><br>Father.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="二、原型对象"><a href="#二、原型对象" class="headerlink" title="二、原型对象"></a>二、原型对象</h2><blockquote><p>每一个构造函数上都有一个原型对象prototype</p><p>原型对象的作用：共享方法</p><p>一般公共的方法会放在原型对象上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">ather.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我会唱歌&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三、对象实例的原型属性"><a href="#三、对象实例的原型属性" class="headerlink" title="三、对象实例的原型属性"></a>三、对象实例的原型属性</h2><blockquote><p>每个实例对象都有一个属性_<em>prop</em>_</p><p>__prop__不能直接复制</p><p>指向构造函数的原型对象prototype</p></blockquote><h2 id="四、方法查找与关系"><a href="#四、方法查找与关系" class="headerlink" title="四、方法查找与关系"></a>四、方法查找与关系</h2><blockquote><p>方法的查找规则:</p><p>首先看对象实例身上是否有 某方法,如果有就执行这个对象上的，如果没有,因为有__proto__的存在,就去构造函数原型对象prototype身上去查找这个方法</p></blockquote><p><img src="/images/relative.png"></p><h2 id="五、constructor属性"><a href="#五、constructor属性" class="headerlink" title="五、constructor属性"></a>五、constructor属性</h2><blockquote><p>原型对象和__prop__属性上都有一个construcor，指向原来的构造函数</p><p>若修改了原型对象，给原型对象赋值的了一个对象，会覆盖原来的，必须利用constructor指回原来的构造函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">Father.prototype = &#123;<br>    <span class="hljs-comment">//手动指回</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Father</span>;<br>    <span class="hljs-comment">//修改添加</span><br>    dance:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            consoloe.log(<span class="hljs-string">&quot;我会跳舞&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、原型链"><a href="#六、原型链" class="headerlink" title="六、原型链"></a>六、原型链</h2><p><img src="/images/prototype-chain.png"></p><h2 id="七、继承"><a href="#七、继承" class="headerlink" title="七、继承"></a>七、继承</h2><blockquote><p>es6之前没有提供类的继承</p><p>采用组合继承的方式</p></blockquote><h3 id="1-继承属性"><a href="#1-继承属性" class="headerlink" title="1.继承属性"></a>1.继承属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//子类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">name,age,grade</span>)</span>&#123;<br>    <span class="hljs-comment">//1.调用父类的构造方法</span><br>    <span class="hljs-comment">//this是指向当前的Son</span><br>    Father.call(<span class="hljs-built_in">this</span>,name,age);<br>    <span class="hljs-comment">//子类自己的成员变量</span><br>    <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-继承方法"><a href="#2-继承方法" class="headerlink" title="2.继承方法"></a>2.继承方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//用父类重写子类的prototype</span><br>Son.prototype = <span class="hljs-keyword">new</span> Father;<br><span class="hljs-comment">//手动指回</span><br>Son.prototype.constructor = Son;<br></code></pre></td></tr></table></figure><h2 id="八、扩展"><a href="#八、扩展" class="headerlink" title="八、扩展"></a>八、扩展</h2><table><thead><tr><th align="center">函数</th><th align="center">主要作用</th><th align="center">是否调用</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">call()</td><td align="center">用于继承属性</td><td align="center">是</td><td align="center">参数arguments形式</td></tr><tr><td align="center">bind()</td><td align="center">定时器等不需要调用的地方</td><td align="center">否</td><td align="center"></td></tr><tr><td align="center">apply()</td><td align="center">与数组有关的地方</td><td align="center">是</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】yarn eject报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91yarn%20eject%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91yarn%20eject%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】yarn-eject报错"><a href="#【React】yarn-eject报错" class="headerlink" title="【React】yarn eject报错"></a>【React】yarn eject报错</h1><h2 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h2><p>create-react-app项目使用yarn eject暴露webpack相关配置时，报错</p><p><img src="/images/yarn-eject.png"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>提交git</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m -xxx<br>复制代码<br></code></pre></td></tr></table></figure><p>提交后问题解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】项目启动less报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91less%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91less%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】create-react-app项目启动关于less报错"><a href="#【React】create-react-app项目启动关于less报错" class="headerlink" title="【React】create-react-app项目启动关于less报错"></a>【React】create-react-app项目启动关于less报错</h1><h2 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h2><p>在项目组中使用antd组件，自定义配置后，启动项目报错</p><p>TypeError: this.getOptions is not a function</p><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><p>less-loader版本过高</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>1、卸载原版本</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yarn <span class="hljs-keyword">remove</span> <span class="hljs-keyword">less</span>-loader<br>复制代码<br></code></pre></td></tr></table></figure><p>2、安装新版本</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">yarn <span class="hljs-keyword">add</span> less-loader<span class="hljs-subst">@5</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>复制代码<br></code></pre></td></tr></table></figure><p>完成后报错解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【React】antd自定义配置后报错</title>
    <link href="/2021/03/05/%E3%80%90React%E3%80%91antd%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90React%E3%80%91antd%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【React】create-react-app项目使用antd自定义配置后，启动项目报错"><a href="#【React】create-react-app项目使用antd自定义配置后，启动项目报错" class="headerlink" title="【React】create-react-app项目使用antd自定义配置后，启动项目报错"></a>【React】create-react-app项目使用antd自定义配置后，启动项目报错</h1><h2 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h2><p>Error: Cannot find module ‘react-scripts/package.json”</p><p><img src="/images/antd1.png"></p><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><p>缺少react-script类库文件</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>安装react-script</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yarn <span class="hljs-keyword">add </span>react-<span class="hljs-keyword">script </span>-dev<br></code></pre></td></tr></table></figure><p><img src="/images/antd2.png"></p><p>安装完成可以正常启动</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hexo】--hexo clean命令报错</title>
    <link href="/2021/03/05/%E3%80%90hexo%E3%80%91hexo%20clean%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/05/%E3%80%90hexo%E3%80%91hexo%20clean%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="【hexo】–hexo-clean命令报错"><a href="#【hexo】–hexo-clean命令报错" class="headerlink" title="【hexo】–hexo clean命令报错"></a>【hexo】–hexo clean命令报错</h1><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>在使用hexo clean命令时发生错误，报错信息如下</p><p>FATAL YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key (107:16)</p><p><img src="/images/hexo-clean.png"></p><p>发现所有hexo命令都会报此错误，如hexo g,hexo d。</p><h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><p>配置hexo的_config.yml文件时，冒号后面少了空格，或者重复写了键。我就是重复写了language键。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>添加上空格或者删除重复的键。</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
